// The contents of reql_docs were generated by _scripts/dataexplorer.py from the rethinkdb documentation in http://github.com/rethinkdb/docs
// hash: "c69c9c14f6519b55d1f80bf91cd4e4dbf2fabcc3"
reql_docs = {
  "api/javascript/add/": {
    "body": "value.add(value[, value, ...]) &rarr; valuetime.add(number[, number, ...]) &rarr; time", 
    "description": "<p>Sum two or more numbers, or concatenate two or more strings or arrays.</p>", 
    "example": "<p><strong>Example:</strong> It's as easy as 2 + 2 = 4.</p>\n<pre><code>r.expr(2).add(2).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "number", 
        "number"
      ], 
      [
        "string", 
        "string"
      ], 
      [
        "array", 
        "array"
      ], 
      [
        "time", 
        "time"
      ], 
      [
        "time", 
        "number"
      ]
    ], 
    "name": "add", 
    "url": "add"
  }, 
  "api/javascript/and/": {
    "body": "bool.and([bool, bool, ...]) &rarr; boolr.and([bool, bool, ...]) &rarr; bool", 
    "description": "<p>Compute the logical \"and\" of one or more values.</p>", 
    "example": "<p><strong>Example:</strong> Return whether both <code>a</code> and <code>b</code> evaluate to true.</p>\n<pre><code>var a = true, b = false;\nr.expr(a).and(b).run(conn, callback);\n// result passed to callback\nfalse\n</code></pre>", 
    "io": [
      [
        "bool", 
        "bool"
      ]
    ], 
    "name": "and", 
    "url": "and"
  }, 
  "api/javascript/append/": {
    "body": "array.append(value) &rarr; array", 
    "description": "<p>Append a value to an array.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve Iron Man's equipment list with the addition of some new boots.</p>\n<pre><code>r.table('marvel').get('IronMan')('equipment').append('newBoots').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "append", 
    "url": "append"
  }, 
  "api/javascript/args/": {
    "body": "r.args(array) &rarr; special", 
    "description": "<p><code>r.args</code> is a special term that's used to splice an array of arguments\ninto another term.  This is useful when you want to call a variadic\nterm such as <code>getAll</code> with a set of arguments produced at runtime.</p>\n<p>This is analogous to using <strong>apply</strong> in JavaScript.</p>", 
    "example": "<p><strong>Example:</strong> Get Alice and Bob from the table <code>people</code>.</p>\n<pre><code>r.table('people').getAll('Alice', 'Bob').run(conn, callback)\n// or\nr.table('people').getAll(r.args(['Alice', 'Bob'])).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "special"
      ]
    ], 
    "name": "args", 
    "url": "args"
  }, 
  "api/javascript/avg/": {
    "body": "sequence.avg([field | function]) &rarr; number", 
    "description": "<p>Averages all the elements of a sequence.  If called with a field name,\naverages all the values of that field in the sequence, skipping\nelements of the sequence that lack that field.  If called with a\nfunction, calls that function on every element of the sequence and\naverages the results, skipping elements of the sequence where that\nfunction returns <code>null</code> or a non-existence error.</p>", 
    "example": "<p><strong>Example:</strong> What's the average of 3, 5, and 7?</p>\n<pre><code>r.expr([3, 5, 7]).avg().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "number"
      ]
    ], 
    "name": "avg", 
    "url": "avg"
  }, 
  "api/javascript/between/": {
    "body": "table.between(lowerKey, upperKey[, options]) &rarr; table_slicetable_slice.between(lowerKey, upperKey[, options]) &rarr; table_slice", 
    "description": "<p>Get all documents between two keys. Accepts three optional arguments: <code>index</code>,\n<code>left_bound</code>, and <code>right_bound</code>. If <code>index</code> is set to the name of a secondary index,\n<code>between</code> will return all documents where that index's value is in the specified range\n(it uses the primary key by default). <code>left_bound</code> or <code>right_bound</code> may be set to <code>open</code>\nor <code>closed</code> to indicate whether or not to include that endpoint of the range (by default,\n<code>left_bound</code> is closed and <code>right_bound</code> is open).</p>", 
    "example": "<p><strong>Example:</strong> Find all users with primary key &gt;= 10 and &lt; 20 (a normal half-open interval).</p>\n<pre><code>r.table('marvel').between(10, 20).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "table_slice"
      ]
    ], 
    "name": "between", 
    "url": "between"
  }, 
  "api/javascript/binary/": {
    "body": "r.binary(data) &rarr; binary", 
    "description": "<p>Encapsulate binary data within a query.</p>", 
    "example": "<p><strong>Example:</strong> Save an avatar image to a existing user record.</p>\n<pre><code>var fs = require('fs');\nfs.readFile('./defaultAvatar.png', function (err, avatarImage) {\n    if (err) {\n        // Handle error\n    }\n    else {\n        r.table('users').get(100).update({\n            avatar: avatarImage\n        })\n    }\n});\n</code></pre>", 
    "io": [
      [
        "r", 
        "binary"
      ]
    ], 
    "name": "binary", 
    "url": "binary"
  }, 
  "api/javascript/bracket/": {
    "body": "sequence(attr) &rarr; sequencesingleSelection(attr) &rarr; valueobject(attr) &rarr; valuearray(index) &rarr; value", 
    "description": "<p>Get a single field from an object or a single element from a sequence.</p>", 
    "example": "<p><strong>Example:</strong> What was Iron Man's first appearance in a comic?</p>\n<pre><code>r.table('marvel').get('IronMan')('firstAppearance').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "sequence"
      ], 
      [
        "singleSelection", 
        "value"
      ], 
      [
        "object", 
        "value"
      ]
    ], 
    "name": "() (bracket)", 
    "url": "bracket"
  }, 
  "api/javascript/branch/": {
    "body": "r.branch(test, true_action[, test2, else_action, ...], false_action) &rarr; any", 
    "description": "<p>Perform a branching conditional equivalent to <code>if-then-else</code>.</p>\n<p>The <code>branch</code> command takes 2n+1 arguments: pairs of conditional expressions and commands to be executed if the conditionals return any value but <code>false</code> or <code>null</code> (i.e., \"truthy\" values), with a final \"else\" command to be evaluated if all of the conditionals are <code>false</code> or <code>null</code>.</p>", 
    "example": "<p><strong>Example:</strong> Test the value of x.</p>\n<pre><code>var x = 10;\nr.branch(r.expr(x).gt(5), 'big', 'small').run(conn, callback);\n// Result passed to callback\n\"big\"\n</code></pre>", 
    "io": [
      [
        "r", 
        "any"
      ]
    ], 
    "name": "branch", 
    "url": "branch"
  }, 
  "api/javascript/ceil/": {
    "body": "r.ceil(number) &rarr; numbernumber.ceil() &rarr; number", 
    "description": "<p>Rounds the given value up, returning the smallest integer value greater than or equal to the given value (the value's ceiling).</p>", 
    "example": "<p><strong>Example:</strong> Return the ceiling of 12.345.</p>\n<pre><code>&gt; r.ceil(12.345).run(conn, callback);\n\n13.0\n</code></pre>", 
    "io": [
      [
        "number", 
        "number"
      ]
    ], 
    "name": "ceil", 
    "url": "ceil"
  }, 
  "api/javascript/change_at/": {
    "body": "array.changeAt(index, value) &rarr; array", 
    "description": "<p>Change a value in an array at a given index. Returns the modified array.</p>", 
    "example": "<p><strong>Example:</strong> Bruce Banner hulks out.</p>\n<pre><code>r.expr([\"Iron Man\", \"Bruce\", \"Spider-Man\"]).changeAt(1, \"Hulk\").run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "changeAt", 
    "url": "change_at"
  }, 
  "api/javascript/changes/": {
    "body": "stream.changes([options]) &rarr; streamsingleSelection.changes([options]) &rarr; stream", 
    "description": "<p>Return a changefeed, an infinite stream of objects representing changes to a query. A changefeed may return changes to a table or an individual document (a \"point\" changefeed), and document transformation commands such as <code>filter</code> or <code>map</code> may be used before the <code>changes</code> command to affect the output.</p>", 
    "example": "<p><strong>Example:</strong> Subscribe to the changes on a table.</p>\n<pre><code>r.table('games').changes().run(conn, function(err, cursor) {\n  cursor.each(console.log)\n})\n</code></pre>", 
    "io": [
      [
        "stream", 
        "stream"
      ], 
      [
        "singleSelection", 
        "stream"
      ]
    ], 
    "name": "changes", 
    "url": "changes"
  }, 
  "api/javascript/circle/": {
    "body": "r.circle([longitude, latitude], radius[, {numVertices: 32, geoSystem: 'WGS84', unit: 'm', fill: true}]) &rarr; geometryr.circle(point, radius[, {numVertices: 32, geoSystem: 'WGS84', unit: 'm', fill: true}]) &rarr; geometry", 
    "description": "<p>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</p>", 
    "example": "<p><strong>Example:</strong> Define a circle.</p>\n<pre><code>r.table('geo').insert({\n    id: 300,\n    name: 'Hayes Valley',\n    neighborhood: r.circle([-122.423246,37.779388], 1000)\n}).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "r", 
        "geometry"
      ]
    ], 
    "name": "circle", 
    "url": "circle"
  }, 
  "api/javascript/close-cursor/": {
    "body": "cursor.close()", 
    "description": "<p>Close a cursor. Closing a cursor cancels the corresponding query and frees the memory\nassociated with the open request.</p>", 
    "example": "<p><strong>Example:</strong> Close a cursor.</p>\n<pre><code>cursor.close()\n</code></pre>", 
    "io": [
      [
        "cursor", 
        "undefined"
      ]
    ], 
    "name": "close", 
    "url": "close-cursor"
  }, 
  "api/javascript/close/": {
    "body": "conn.close([{noreplyWait: true}, ]callback)conn.close([{noreplyWait: true}]) &rarr; promise", 
    "description": "<p>Close an open connection.</p>\n<p>If no callback is provided, a promise will be returned.</p>", 
    "example": "<p><strong>Example:</strong> Close an open connection, waiting for noreply writes to finish.</p>\n<pre><code>conn.close(function(err) { if (err) throw err; })\n</code></pre>", 
    "io": [
      [
        "connection", 
        "undefined"
      ]
    ], 
    "name": "close", 
    "url": "close"
  }, 
  "api/javascript/coerce_to/": {
    "body": "sequence.coerceTo('array') &rarr; arrayvalue.coerceTo('string') &rarr; stringstring.coerceTo('number') &rarr; numberarray.coerceTo('object') &rarr; objectsequence.coerceTo('object') &rarr; objectobject.coerceTo('array') &rarr; arraybinary.coerceTo('string') &rarr; stringstring.coerceTo('binary') &rarr; binary", 
    "description": "<p>Convert a value of one type into another.</p>", 
    "example": "<p><strong>Example:</strong> Coerce a stream to an array.</p>\n<pre><code>r.table('posts').map(function (post) {\n    post.merge({ comments: r.table('comments').getAll(post('id'), {index: 'postId'}).coerceTo('array')});\n}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "array"
      ], 
      [
        "value", 
        "string"
      ], 
      [
        "array", 
        "object"
      ], 
      [
        "object", 
        "array"
      ], 
      [
        "binary", 
        "string"
      ], 
      [
        "string", 
        "binary"
      ]
    ], 
    "name": "coerceTo", 
    "url": "coerce_to"
  }, 
  "api/javascript/concat_map/": {
    "body": "stream.concatMap(function) &rarr; streamarray.concatMap(function) &rarr; array", 
    "description": "<p>Concatenate one or more elements into a single sequence using a mapping function.</p>", 
    "example": "<p><strong>Example:</strong> Construct a sequence of all monsters defeated by Marvel heroes. The field \"defeatedMonsters\" is an array of one or more monster names.</p>\n<pre><code>r.table('marvel').concatMap(function(hero) {\n    return hero('defeatedMonsters')\n}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "concatMap", 
    "url": "concat_map"
  }, 
  "api/javascript/config/": {
    "body": "table.config() &rarr; selection&lt;object&gt;database.config() &rarr; selection&lt;object&gt;", 
    "description": "<p>Query (read and/or update) the configurations for individual tables or databases.</p>", 
    "example": "<p><strong>Example:</strong> Get the configuration for the <code>users</code> table.</p>\n<pre><code>&gt; r.table('users').config().run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "table", 
        "singleSelection"
      ], 
      [
        "database", 
        "singleSelection"
      ]
    ], 
    "name": "config", 
    "url": "config"
  }, 
  "api/javascript/connect/": {
    "body": "r.connect(options, callback)r.connect(host, callback)r.connect(options) &rarr; promiser.connect(host) &rarr; promise", 
    "description": "<p>Create a new connection to the database server.</p>", 
    "example": "<p><strong>Example:</strong> Open a connection using the default host and port, specifying the default database.</p>\n<pre><code>r.connect({\n    db: 'marvel'\n}, function(err, conn) {\n    // ...\n});\n</code></pre>\n<p>If no callback is provided, a promise will be returned.</p>\n<pre><code>var promise = r.connect({db: 'marvel'});\n</code></pre>", 
    "io": [
      [
        "r", 
        "undefined"
      ]
    ], 
    "name": "connect", 
    "url": "connect"
  }, 
  "api/javascript/contains/": {
    "body": "sequence.contains([value | predicate_function, ...]) &rarr; bool", 
    "description": "<p>Returns whether or not a sequence contains all the specified values, or if functions are\nprovided instead, returns whether or not a sequence contains values matching all the\nspecified functions.</p>", 
    "example": "<p><strong>Example:</strong> Has Iron Man ever fought Superman?</p>\n<pre><code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "bool"
      ]
    ], 
    "name": "contains", 
    "url": "contains"
  }, 
  "api/javascript/count/": {
    "body": "sequence.count([value | predicate_function]) &rarr; numberbinary.count() &rarr; number", 
    "description": "<p>Count the number of elements in the sequence. With a single argument, count the number\nof elements equal to it. If the argument is a function, it is equivalent to calling\nfilter before count.</p>", 
    "example": "<p><strong>Example:</strong> Just how many super heroes are there?</p>\n<pre><code>r.table('marvel').count().add(r.table('dc').count()).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "number"
      ], 
      [
        "binary", 
        "number"
      ]
    ], 
    "name": "count", 
    "url": "count"
  }, 
  "api/javascript/date/": {
    "body": "time.date() &rarr; time", 
    "description": "<p>Return a new time object only based on the day, month and year (ie. the same day at 00:00).</p>", 
    "example": "<p><strong>Example:</strong> Retrieve all the users whose birthday is today</p>\n<pre><code>r.table(\"users\").filter(function(user) {\n    return user(\"birthdate\").date().eq(r.now().date())\n}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "time", 
        "time"
      ]
    ], 
    "name": "date", 
    "url": "date"
  }, 
  "api/javascript/day/": {
    "body": "time.day() &rarr; number", 
    "description": "<p>Return the day of a time object as a number between 1 and 31.</p>", 
    "example": "<p><strong>Example:</strong> Return the users born on the 24th of any month.</p>\n<pre><code>r.table(\"users\").filter(\n    r.row(\"birthdate\").day().eq(24)\n).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "day", 
    "url": "day"
  }, 
  "api/javascript/day_of_week/": {
    "body": "time.dayOfWeek() &rarr; number", 
    "description": "<p>Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard). For your convenience, the terms r.monday, r.tuesday etc. are defined and map to the appropriate integer.</p>", 
    "example": "<p><strong>Example:</strong> Return today's day of week.</p>\n<pre><code>r.now().dayOfWeek().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "dayOfWeek", 
    "url": "day_of_week"
  }, 
  "api/javascript/day_of_year/": {
    "body": "time.dayOfYear() &rarr; number", 
    "description": "<p>Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).</p>", 
    "example": "<p><strong>Example:</strong> Retrieve all the users who were born the first day of a year.</p>\n<pre><code>r.table(\"users\").filter(\n    r.row(\"birthdate\").dayOfYear().eq(1)\n)\n</code></pre>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "dayOfYear", 
    "url": "day_of_year"
  }, 
  "api/javascript/db/": {
    "body": "r.db(dbName) &rarr; db", 
    "description": "<p>Reference a database.</p>", 
    "example": "<p><strong>Example:</strong> Explicitly specify a database for a query.</p>\n<pre><code>r.db('heroes').table('marvel').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "db"
      ]
    ], 
    "name": "db", 
    "url": "db"
  }, 
  "api/javascript/db_create/": {
    "body": "r.dbCreate(dbName) &rarr; object", 
    "description": "<p>Create a database. A RethinkDB database is a collection of tables, similar to\nrelational databases.</p>\n<p>If successful, the operation returns an object: <code>{created: 1}</code>. If a database with the\nsame name already exists the operation throws <code>ReqlRuntimeError</code>.</p>\n<p>Note: that you can only use alphanumeric characters and underscores for the database name.</p>", 
    "example": "<p><strong>Example:</strong> Create a database named 'superheroes'.</p>\n<pre><code>r.dbCreate('superheroes').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "object"
      ]
    ], 
    "name": "dbCreate", 
    "url": "db_create"
  }, 
  "api/javascript/db_drop/": {
    "body": "r.dbDrop(dbName) &rarr; object", 
    "description": "<p>Drop a database. The database, all its tables, and corresponding data will be deleted.</p>\n<p>If successful, the operation returns the object <code>{dropped: 1}</code>. If the specified database\ndoesn't exist a <code>ReqlRuntimeError</code> is thrown.</p>", 
    "example": "<p><strong>Example:</strong> Drop a database named 'superheroes'.</p>\n<pre><code>r.dbDrop('superheroes').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "object"
      ]
    ], 
    "name": "dbDrop", 
    "url": "db_drop"
  }, 
  "api/javascript/db_list/": {
    "body": "r.dbList() &rarr; array", 
    "description": "<p>List all database names in the system. The result is a list of strings.</p>", 
    "example": "<p><strong>Example:</strong> List all databases.</p>\n<pre><code>r.dbList().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "array"
      ]
    ], 
    "name": "dbList", 
    "url": "db_list"
  }, 
  "api/javascript/default/": {
    "body": "value.default(default_value | function) &rarr; anysequence.default(default_value | function) &rarr; any", 
    "description": "<p>Provide a default value in case of non-existence errors. The <code>default</code> command evaluates its first argument (the value it's chained to). If that argument returns <code>null</code> or a non-existence error is thrown in evaluation, then <code>default</code> returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve the titles and authors of the table <code>posts</code>.\nIn the case where the author field is missing or <code>null</code>, we want to retrieve the string\n<code>Anonymous</code>.</p>\n<pre><code>r.table(\"posts\").map(function (post) {\n    return {\n        title: post(\"title\"),\n        author: post(\"author\").default(\"Anonymous\")\n    }\n}).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "value", 
        "any"
      ], 
      [
        "sequence", 
        "any"
      ]
    ], 
    "name": "default", 
    "url": "default"
  }, 
  "api/javascript/delete/": {
    "body": "table.delete([{durability: \"hard\", returnChanges: false}])&rarr; objectselection.delete([{durability: \"hard\", returnChanges: false}])&rarr; objectsingleSelection.delete([{durability: \"hard\", returnChanges: false}])&rarr; object", 
    "description": "<p>Delete one or more documents from a table.</p>", 
    "example": "<p><strong>Example:</strong> Delete a single document from the table <code>comments</code>.</p>\n<pre><code>r.table(\"comments\").get(\"7eab9e63-73f1-4f33-8ce4-95cbea626f59\").delete().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "object"
      ], 
      [
        "selection", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "delete", 
    "url": "delete"
  }, 
  "api/javascript/delete_at/": {
    "body": "array.deleteAt(index [,endIndex]) &rarr; array", 
    "description": "<p>Remove one or more elements from an array at a given index. Returns the modified array.</p>", 
    "example": "<p><strong>Example:</strong> Delete the second element of an array.</p>\n<pre><code>&gt; r(['a','b','c','d','e','f']).deleteAt(1).run(conn, callback)\n// result passed to callback\n['a', 'c', 'd', 'e', 'f']\n</code></pre>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "deleteAt", 
    "url": "delete_at"
  }, 
  "api/javascript/difference/": {
    "body": "array.difference(array) &rarr; array", 
    "description": "<p>Remove the elements of one array from another array.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve Iron Man's equipment list without boots.</p>\n<pre><code>r.table('marvel').get('IronMan')('equipment').difference(['Boots']).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "difference", 
    "url": "difference"
  }, 
  "api/javascript/distance/": {
    "body": "geometry.distance(geometry[, {geoSystem: 'WGS84', unit: 'm'}]) &rarr; numberr.distance(geometry, geometry[, {geoSystem: 'WGS84', unit: 'm'}]) &rarr; number", 
    "description": "<p>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</p>", 
    "example": "<p><strong>Example:</strong> Compute the distance between two points on the Earth in kilometers.</p>\n<pre><code>var point1 = r.point(-122.423246,37.779388);\nvar point2 = r.point(-117.220406,32.719464);\nr.distance(point1, point2, {unit: 'km'}).run(conn, callback);\n// result returned to callback \n734.1252496021841\n</code></pre>", 
    "io": [
      [
        "geometry", 
        "number"
      ]
    ], 
    "name": "distance", 
    "url": "distance"
  }, 
  "api/javascript/distinct/": {
    "body": "sequence.distinct() &rarr; arraytable.distinct([{index: <indexname>}]) &rarr; stream", 
    "description": "<p>Remove duplicate elements from the sequence.</p>", 
    "example": "<p><strong>Example:</strong> Which unique villains have been vanquished by marvel heroes?</p>\n<pre><code>r.table('marvel').concatMap(function(hero) {\n    return hero('villainList')\n}).distinct().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "array"
      ], 
      [
        "table", 
        "stream"
      ]
    ], 
    "name": "distinct", 
    "url": "distinct"
  }, 
  "api/javascript/div/": {
    "body": "number.div(number[, number ...]) &rarr; number", 
    "description": "<p>Divide two numbers.</p>", 
    "example": "<p><strong>Example:</strong> It's as easy as 2 / 2 = 1.</p>\n<pre><code>r.expr(2).div(2).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "number", 
        "number"
      ]
    ], 
    "name": "div", 
    "url": "div"
  }, 
  "api/javascript/do/": {
    "body": "any.do(function) &rarr; anyr.do([args]*, function) &rarr; anyany.do(expr) &rarr; anyr.do([args]*, expr) &rarr; any", 
    "description": "<p>Call an anonymous function using return values from other ReQL commands or queries as arguments.</p>\n<p><strong>Example:</strong> Compute a golfer's net score for a game.</p>\n<p><code>js\nr.table('players').get('f19b5f16-ef14-468f-bd48-e194761df255').do(\n    function (player) {\n        return player('gross_score').sub(player('course_handicap'));\n    }\n).run(conn, callback);</code></p>", 
    "example": "", 
    "io": [
      [
        "any", 
        "any"
      ]
    ], 
    "name": "do", 
    "url": "do"
  }, 
  "api/javascript/downcase/": {
    "body": "string.downcase() &rarr; string", 
    "description": "<p>Lowercases a string.</p>", 
    "example": "<p><strong>Example:</strong></p>\n<pre><code>r.expr(\"Sentence about LaTeX.\").downcase().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "string", 
        "string"
      ]
    ], 
    "name": "downcase", 
    "url": "downcase"
  }, 
  "api/javascript/during/": {
    "body": "time.during(startTime, endTime[, options]) &rarr; bool", 
    "description": "<p>Return if a time is between two other times (by default, inclusive for the start, exclusive for the end).</p>", 
    "example": "<p><strong>Example:</strong> Retrieve all the posts that were posted between December 1st, 2013 (inclusive) and December 10th, 2013 (exclusive).</p>\n<pre><code>r.table(\"posts\").filter(\n    r.row('date').during(r.time(2013, 12, 1), r.time(2013, 12, 10))\n).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "time", 
        "bool"
      ]
    ], 
    "name": "during", 
    "url": "during"
  }, 
  "api/javascript/each/": {
    "body": "cursor.each(callback[, onFinishedCallback])array.each(callback[, onFinishedCallback])feed.each(callback)", 
    "description": "<p>Lazily iterate over the result set one element at a time.</p>", 
    "example": "<p><strong>Example:</strong> Let's process all the elements!</p>\n<pre><code>cursor.each(function(err, row) {\n    if (err) throw err;\n    processRow(row);\n});\n</code></pre>", 
    "io": [
      [
        "cursor", 
        "undefined"
      ]
    ], 
    "name": "each", 
    "url": "each"
  }, 
  "api/javascript/each_async/": {
    "body": "cursor.eachAsync(function) &rarr; promisearray.eachAsync(function) &rarr; promisefeed.eachAsync(function) &rarr; promise", 
    "description": "<p>Lazily iterate over a result set one element at a time in an identical fashion to <a href=\"/api/javascript/each/\">each</a>, returning a Promise that will be resolved once all rows are returned.</p>", 
    "example": "<p><strong>Example:</strong> Process all the elements in a stream.</p>\n<pre><code>cursor.eachAsync(function(row) {\n    // if a Promise is returned, it will be processed before the cursor\n    // continues iteration.\n    return asyncRowHandler(row);\n}).then(function () {\n    console.log(\"done processing\"); \n});\n</code></pre>", 
    "io": [
      [
        "cursor", 
        "undefined"
      ]
    ], 
    "name": "eachAsync", 
    "url": "each_async"
  }, 
  "api/javascript/epoch_time/": {
    "body": "r.epochTime(epochTime) &rarr; time", 
    "description": "<p>Create a time object based on seconds since epoch. The first argument is a double and\nwill be rounded to three decimal places (millisecond-precision).</p>", 
    "example": "<p><strong>Example:</strong> Update the birthdate of the user \"John\" to November 3rd, 1986.</p>\n<pre><code>r.table(\"user\").get(\"John\").update({birthdate: r.epochTime(531360000)})\n    .run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "time"
      ]
    ], 
    "name": "epochTime", 
    "url": "epoch_time"
  }, 
  "api/javascript/eq/": {
    "body": "value.eq(value[, value, ...]) &rarr; bool", 
    "description": "<p>Test if two or more values are equal.</p>", 
    "example": "<p><strong>Example:</strong> See if a user's <code>role</code> field is set to <code>administrator</code>. </p>\n<pre><code>r.table('users').get(1)('role').eq('administrator').run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "value", 
        "bool"
      ]
    ], 
    "name": "eq", 
    "url": "eq"
  }, 
  "api/javascript/eq_join/": {
    "body": "sequence.eqJoin(leftField, rightTable[, {index:'id'}]) &rarr; sequencesequence.eqJoin(predicate_function, rightTable[, {index:'id'}]) &rarr; sequence", 
    "description": "<p>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</p>\n<p><strong>Example:</strong> Match players with the games they've played against one another.</p>\n<p><code>js\nr.table('players').eqJoin('gameId', r.table('games')).run(conn, callback)</code></p>", 
    "example": "", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "eqJoin", 
    "url": "eq_join"
  }, 
  "api/javascript/error/": {
    "body": "r.error(message) &rarr; error", 
    "description": "<p>Throw a runtime error. If called with no arguments inside the second argument to <code>default</code>, re-throw the current error.</p>", 
    "example": "<p><strong>Example:</strong> Iron Man can't possibly have lost a battle:</p>\n<pre><code>r.table('marvel').get('IronMan').do(function(ironman) {\n    return r.branch(ironman('victories').lt(ironman('battles')),\n        r.error('impossible code path'),\n        ironman)\n}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "error"
      ]
    ], 
    "name": "error", 
    "url": "error"
  }, 
  "api/javascript/event_emitter-cursor/": {
    "body": "cursor.addListener(event, listener)cursor.on(event, listener)cursor.once(event, listener)cursor.removeListener(event, listener)cursor.removeAllListeners([event])cursor.setMaxListeners(n)cursor.listeners(event)cursor.emit(event, [arg1], [arg2], [...])", 
    "description": "<p>Cursors and feeds implement the same interface as Node's <a href=\"http://nodejs.org/api/events.html#events_class_events_eventemitter\">EventEmitter</a>.</p>", 
    "example": "", 
    "io": [
      [
        "cursor", 
        "undefined"
      ]
    ], 
    "name": "EventEmitter (cursor)", 
    "url": "event_emitter-cursor"
  }, 
  "api/javascript/event_emitter/": {
    "body": "connection.addListener(event, listener)connection.on(event, listener)connection.once(event, listener)connection.removeListener(event, listener)connection.removeAllListeners([event])connection.setMaxListeners(n)connection.listeners(event)connection.emit(event, [arg1], [arg2], [...])", 
    "description": "<p>Connections implement the same interface as Node's <a href=\"http://nodejs.org/api/events.html#events_class_events_eventemitter\">EventEmitter</a>.\nThis allows you to listen for changes in connection state.</p>", 
    "example": "", 
    "name": "EventEmitter (connection)", 
    "url": "event_emitter"
  }, 
  "api/javascript/expr/": {
    "body": "r.expr(value) &rarr; value", 
    "description": "<p>Construct a ReQL JSON object from a native object.</p>", 
    "example": "<p><strong>Example:</strong> Objects wrapped with <code>expr</code> can then be manipulated by ReQL API functions.</p>\n<pre><code>r.expr({a:'b'}).merge({b:[1,2,3]}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "value"
      ]
    ], 
    "name": "expr", 
    "url": "expr"
  }, 
  "api/javascript/fill/": {
    "body": "line.fill() &rarr; polygon", 
    "description": "<p>Convert a Line object into a Polygon object. If the last point does not specify the same coordinates as the first point, <code>polygon</code> will close the polygon by connecting them.</p>", 
    "example": "<p><strong>Example:</strong> Create a line object and then convert it to a polygon.</p>\n<pre><code>r.table('geo').insert({\n    id: 201,\n    rectangle: r.line(\n        [-122.423246,37.779388],\n        [-122.423246,37.329898],\n        [-121.886420,37.329898],\n        [-121.886420,37.779388]\n    )\n}).run(conn, callback);\n\nr.table('geo').get(201).update({\n    rectangle: r.row('rectangle').fill()\n}, {nonAtomic: true}).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "line", 
        "polygon"
      ]
    ], 
    "name": "fill", 
    "url": "fill"
  }, 
  "api/javascript/filter/": {
    "body": "selection.filter(predicate_function[, {default: false}]) &rarr; selectionstream.filter(predicate_function[, {default: false}]) &rarr; streamarray.filter(predicate_function[, {default: false}]) &rarr; array", 
    "description": "<p>Get all the documents for which the given predicate is true.</p>\n<p><code>filter</code> can be called on a sequence, selection, or a field containing an array of\nelements. The return type is the same as the type on which the function was called on.</p>\n<p>The body of every filter is wrapped in an implicit <code>.default(false)</code>, which means that\nif a non-existence errors is thrown (when you try to access a field that does not exist\nin a document), RethinkDB will just ignore the document.\nThe <code>default</code> value can be changed by passing an object with a <code>default</code> field.\nSetting this optional argument to <code>r.error()</code> will cause any non-existence errors to\nreturn a <code>ReqlRuntimeError</code>.</p>", 
    "example": "<p><strong>Example:</strong> Get all the users that are 30 years old.</p>\n<pre><code>r.table('users').filter({age: 30}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "selection"
      ], 
      [
        "stream", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "filter", 
    "url": "filter"
  }, 
  "api/javascript/floor/": {
    "body": "r.floor(number) &rarr; numbernumber.floor() &rarr; number", 
    "description": "<p>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value's floor).</p>", 
    "example": "<p><strong>Example:</strong> Return the floor of 12.345.</p>\n<pre><code>&gt; r.floor(12.345).run(conn, callback);\n\n12.0\n</code></pre>", 
    "io": [
      [
        "number", 
        "number"
      ]
    ], 
    "name": "floor", 
    "url": "floor"
  }, 
  "api/javascript/for_each/": {
    "body": "sequence.forEach(write_function) &rarr; object", 
    "description": "<p>Loop over a sequence, evaluating the given write query for each element.</p>", 
    "example": "<p><strong>Example:</strong> Now that our heroes have defeated their villains, we can safely remove them from the villain table.</p>\n<pre><code>r.table('marvel').forEach(function(hero) {\n    return r.table('villains').get(hero('villainDefeated')).delete()\n}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "object"
      ]
    ], 
    "name": "forEach", 
    "url": "for_each"
  }, 
  "api/javascript/ge/": {
    "body": "value.ge(value[, value, ...]) &rarr; bool", 
    "description": "<p>Compare values, testing if the left-hand value is greater than or equal to the right-hand.</p>", 
    "example": "<p><strong>Example:</strong> Test if a player has scored 10 points or more.</p>\n<pre><code>r.table('players').get(1)('score').ge(10).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "value", 
        "bool"
      ]
    ], 
    "name": "ge", 
    "url": "ge"
  }, 
  "api/javascript/geojson/": {
    "body": "r.geojson(geojson) &rarr; geometry", 
    "description": "<p>Convert a <a href=\"http://geojson.org\">GeoJSON</a> object to a ReQL geometry object.</p>", 
    "example": "<p><strong>Example:</strong> Convert a GeoJSON object to a ReQL geometry object.</p>\n<pre><code>var geoJson = {\n    'type': 'Point',\n    'coordinates': [ -122.423246, 37.779388 ]\n};\nr.table('geo').insert({\n    id: 'sfo',\n    name: 'San Francisco',\n    location: r.geojson(geoJson)\n}).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "r", 
        "geometry"
      ]
    ], 
    "name": "geojson", 
    "url": "geojson"
  }, 
  "api/javascript/get/": {
    "body": "table.get(key) &rarr; singleRowSelection", 
    "description": "<p>Get a document by primary key.</p>\n<p>If no document exists with that primary key, <code>get</code> will return <code>null</code>.</p>", 
    "example": "<p><strong>Example:</strong> Find a document by UUID.</p>\n<pre><code>r.table('posts').get('a9849eef-7176-4411-935b-79a6e3c56a74').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "singleSelection"
      ]
    ], 
    "name": "get", 
    "url": "get"
  }, 
  "api/javascript/get_all/": {
    "body": "table.getAll(key[, key2...], [, {index:'id'}]) &rarr; selection", 
    "description": "<p>Get all documents where the given value matches the value of the requested index.</p>", 
    "example": "<p><strong>Example:</strong> Secondary index keys are not guaranteed to be unique so we cannot query via <a href=\"/api/javascript/get/\">get</a> when using a secondary index.</p>\n<pre><code>r.table('marvel').getAll('man_of_steel', {index:'code_name'}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "selection"
      ]
    ], 
    "name": "getAll", 
    "url": "get_all"
  }, 
  "api/javascript/get_field/": {
    "body": "sequence.getField(attr) &rarr; sequencesingleSelection.getField(attr) &rarr; valueobject.getField(attr) &rarr; value", 
    "description": "<p>Get a single field from an object. If called on a sequence, gets that field from every\nobject in the sequence, skipping objects that lack it.</p>", 
    "example": "<p><strong>Example:</strong> What was Iron Man's first appearance in a comic?</p>\n<pre><code>r.table('marvel').get('IronMan').getField('firstAppearance').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "sequence"
      ], 
      [
        "singleSelection", 
        "value"
      ], 
      [
        "object", 
        "value"
      ]
    ], 
    "name": "getField", 
    "url": "get_field"
  }, 
  "api/javascript/get_intersecting/": {
    "body": "table.getIntersecting(geometry, {index: 'indexname'}) &rarr; selection<stream>", 
    "description": "<p>Get all documents where the given geometry object intersects the geometry object of the requested geospatial index.</p>", 
    "example": "<p><strong>Example:</strong> Which of the locations in a list of parks intersect <code>circle1</code>?</p>\n<pre><code>var circle1 = r.circle([-117.220406,32.719464], 10, {unit: 'mi'});\nr.table('parks').getIntersecting(circle1, {index: 'area'}).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "table", 
        "stream"
      ]
    ], 
    "name": "getIntersecting", 
    "url": "get_intersecting"
  }, 
  "api/javascript/get_nearest/": {
    "body": "table.getNearest(point, {index: 'indexname'[, maxResults: 100, maxDist: 100000, unit: 'm', geoSystem: 'WGS84']}) &rarr; selection<array>", 
    "description": "<p>Get all documents where the specified geospatial index is within a certain distance of the specified point (default 100 kilometers).</p>", 
    "example": "<p><strong>Example:</strong> Return a list of enemy hideouts within 5000 meters of the secret base.</p>\n<pre><code>var secretBase = r.point(-122.422876,37.777128);\nr.table('hideouts').getNearest(secretBase,\n    {index: 'location', maxDist: 5000}\n).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "array"
      ]
    ], 
    "name": "getNearest", 
    "url": "get_nearest"
  }, 
  "api/javascript/group/": {
    "body": "sequence.group(field | function..., [{index: <indexname>, multi: false}]) &rarr; grouped_stream", 
    "description": "<p>Takes a stream and partitions it into multiple groups based on the\nfields or functions provided.  Commands chained after <code>group</code> will be\ncalled on each of these grouped sub-streams, producing grouped data.</p>", 
    "example": "<p><strong>Example:</strong> What is each player's best game?</p>\n<pre><code>r.table('games').group('player').max('points').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "grouped_stream"
      ]
    ], 
    "name": "group", 
    "url": "group"
  }, 
  "api/javascript/gt/": {
    "body": "value.gt(value[, value, ...]) &rarr; bool", 
    "description": "<p>Compare values, testing if the left-hand value is greater than the right-hand.</p>", 
    "example": "<p><strong>Example:</strong> Test if a player has scored more than 10 points.</p>\n<pre><code>r.table('players').get(1)('score').gt(10).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "value", 
        "bool"
      ]
    ], 
    "name": "gt", 
    "url": "gt"
  }, 
  "api/javascript/has_fields/": {
    "body": "sequence.hasFields([selector1, selector2...]) &rarr; streamarray.hasFields([selector1, selector2...]) &rarr; arrayobject.hasFields([selector1, selector2...]) &rarr; boolean", 
    "description": "<p>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code>{'a': 1,'b': 2,'c': null}</code> has the fields <code>a</code> and <code>b</code>.</p>", 
    "example": "<p><strong>Example:</strong> Return the players who have won games.</p>\n<pre><code>r.table('players').hasFields('games_won').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ], 
      [
        "singleSelection", 
        "boolean"
      ], 
      [
        "object", 
        "boolean"
      ]
    ], 
    "name": "hasFields", 
    "url": "has_fields"
  }, 
  "api/javascript/hours/": {
    "body": "time.hours() &rarr; number", 
    "description": "<p>Return the hour in a time object as a number between 0 and 23.</p>", 
    "example": "<p><strong>Example:</strong> Return all the posts submitted after midnight and before 4am.</p>\n<pre><code>r.table(\"posts\").filter(function(post) {\n    return post(\"date\").hours().lt(4)\n})\n</code></pre>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "hours", 
    "url": "hours"
  }, 
  "api/javascript/http/": {
    "body": "r.http(url [, options]) &rarr; value", 
    "description": "<p>Retrieve data from the specified URL over HTTP.  The return type depends on the <code>resultFormat</code> option, which checks the <code>Content-Type</code> of the response by default.</p>", 
    "example": "<p><strong>Example:</strong> Perform a simple HTTP <code>GET</code> request, and store the result in a table.</p>\n<pre><code>r.table('posts').insert(r.http('http://httpbin.org/get')).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "value"
      ], 
      [
        "r", 
        "stream"
      ]
    ], 
    "name": "http", 
    "url": "http"
  }, 
  "api/javascript/in_timezone/": {
    "body": "time.inTimezone(timezone) &rarr; time", 
    "description": "<p>Return a new time object with a different timezone. While the time stays the same, the results returned by methods such as hours() will change since they take the timezone into account. The timezone argument has to be of the ISO 8601 format.</p>", 
    "example": "<p><strong>Example:</strong> Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).</p>\n<pre><code>r.now().inTimezone('-08:00').hours().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "time", 
        "time"
      ]
    ], 
    "name": "inTimezone", 
    "url": "in_timezone"
  }, 
  "api/javascript/includes/": {
    "body": "sequence.includes(geometry) &rarr; sequencegeometry.includes(geometry) &rarr; bool", 
    "description": "<p>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, <code>includes</code> acts as a <a href=\"/api/javascript/filter\">filter</a>, returning a sequence of objects from the sequence that include the argument.</p>", 
    "example": "<p><strong>Example:</strong> Is <code>point2</code> included within a 2000-meter circle around <code>point1</code>?</p>\n<pre><code>var point1 = r.point(-117.220406,32.719464);\nvar point2 = r.point(-117.206201,32.725186);\nr.circle(point1, 2000).includes(point2).run(conn, callback);\n// result returned to callback \ntrue\n</code></pre>", 
    "io": [
      [
        "geometry", 
        "bool"
      ], 
      [
        "sequence", 
        "sequence"
      ]
    ], 
    "name": "includes", 
    "url": "includes"
  }, 
  "api/javascript/index_create/": {
    "body": "table.indexCreate(indexName[, indexFunction][, {multi: false, geo: false}]) &rarr; object", 
    "description": "<p>Create a new secondary index on a table.</p>", 
    "example": "<p><strong>Example:</strong> Create a simple index based on the field <code>postId</code>.</p>\n<pre><code>r.table('comments').indexCreate('postId').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "object"
      ]
    ], 
    "name": "indexCreate", 
    "url": "index_create"
  }, 
  "api/javascript/index_drop/": {
    "body": "table.indexDrop(indexName) &rarr; object", 
    "description": "<p>Delete a previously created secondary index of this table.</p>", 
    "example": "<p><strong>Example:</strong> Drop a secondary index named 'code_name'.</p>\n<pre><code>r.table('dc').indexDrop('code_name').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "object"
      ]
    ], 
    "name": "indexDrop", 
    "url": "index_drop"
  }, 
  "api/javascript/index_list/": {
    "body": "table.indexList() &rarr; array", 
    "description": "<p>List all the secondary indexes of this table.</p>", 
    "example": "<p><strong>Example:</strong> List the available secondary indexes for this table.</p>\n<pre><code>r.table('marvel').indexList().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "array"
      ]
    ], 
    "name": "indexList", 
    "url": "index_list"
  }, 
  "api/javascript/index_rename/": {
    "body": "table.indexRename(oldIndexName, newIndexName[, {overwrite: false}]) &rarr; object", 
    "description": "<p>Rename an existing secondary index on a table. If the optional argument <code>overwrite</code> is specified as <code>true</code>, a previously existing index with the new name will be deleted and the index will be renamed. If <code>overwrite</code> is <code>false</code> (the default) an error will be raised if the new index name already exists.</p>", 
    "example": "<p><strong>Example:</strong> Rename an index on the comments table.</p>\n<pre><code>r.table('comments').indexRename('postId', 'messageId').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "object"
      ]
    ], 
    "name": "indexRename", 
    "url": "index_rename"
  }, 
  "api/javascript/index_status/": {
    "body": "table.indexStatus([, index...]) &rarr; array", 
    "description": "<p>Get the status of the specified indexes on this table, or the status\nof all indexes on this table if no indexes are specified.</p>", 
    "example": "<p><strong>Example:</strong> Get the status of all the indexes on <code>test</code>:</p>\n<pre><code>r.table('test').indexStatus().run(conn, callback)\n</code></pre>\n<p><strong>Example:</strong> Get the status of the <code>timestamp</code> index:</p>\n<pre><code>r.table('test').indexStatus('timestamp').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "array"
      ]
    ], 
    "name": "indexStatus", 
    "url": "index_status"
  }, 
  "api/javascript/index_wait/": {
    "body": "table.indexWait([, index...]) &rarr; array", 
    "description": "<p>Wait for the specified indexes on this table to be ready, or for all\nindexes on this table to be ready if no indexes are specified.</p>", 
    "example": "<p><strong>Example:</strong> Wait for all indexes on the table <code>test</code> to be ready:</p>\n<pre><code>r.table('test').indexWait().run(conn, callback)\n</code></pre>\n<p><strong>Example:</strong> Wait for the index <code>timestamp</code> to be ready:</p>\n<pre><code>r.table('test').indexWait('timestamp').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "array"
      ]
    ], 
    "name": "indexWait", 
    "url": "index_wait"
  }, 
  "api/javascript/info/": {
    "body": "any.info() &rarr; objectr.info(any) &rarr; object", 
    "description": "<p>Get information about a ReQL value.</p>", 
    "example": "<p><strong>Example:</strong> Get information about a table such as primary key, or cache size.</p>\n<pre><code>r.table('marvel').info().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "any", 
        "object"
      ]
    ], 
    "name": "info", 
    "url": "info"
  }, 
  "api/javascript/inner_join/": {
    "body": "sequence.innerJoin(otherSequence, predicate_function) &rarr; streamarray.innerJoin(otherSequence, predicate_function) &rarr; array", 
    "description": "<p>Returns an inner join of two sequences.</p>", 
    "example": "<p><strong>Example:</strong> Return a list of all matchups between Marvel and DC heroes in which the DC hero could beat the Marvel hero in a fight.</p>\n<pre><code>r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {\n    return marvelRow('strength').lt(dcRow('strength'))\n}).zip().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "innerJoin", 
    "url": "inner_join"
  }, 
  "api/javascript/insert/": {
    "body": "table.insert(object | [object1, object2, ...][, {durability: \"hard\", returnChanges: false, conflict: \"error\"}]) &rarr; object", 
    "description": "<p>Insert JSON documents into a table. Accepts a single JSON document or an array of\ndocuments.</p>", 
    "example": "<p><strong>Example:</strong> Insert a document into the table <code>posts</code>.</p>\n<pre><code>r.table(\"posts\").insert({\n    id: 1,\n    title: \"Lorem ipsum\",\n    content: \"Dolor sit amet\"\n}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "object"
      ], 
      [
        "selection", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "insert", 
    "url": "insert"
  }, 
  "api/javascript/insert_at/": {
    "body": "array.insertAt(index, value) &rarr; array", 
    "description": "<p>Insert a value in to an array at a given index. Returns the modified array.</p>", 
    "example": "<p><strong>Example:</strong> Hulk decides to join the avengers.</p>\n<pre><code>r.expr([\"Iron Man\", \"Spider-Man\"]).insertAt(1, \"Hulk\").run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "insertAt", 
    "url": "insert_at"
  }, 
  "api/javascript/intersects/": {
    "body": "sequence.intersects(geometry) &rarr; sequencegeometry.intersects(geometry) &rarr; boolr.intersects(sequence, geometry) &rarr; sequencer.intersects(geometry, geometry) &rarr; bool", 
    "description": "<p>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href=\"/api/javascript/filter\">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</p>", 
    "example": "<p><strong>Example:</strong> Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?</p>\n<pre><code>var point1 = r.point(-117.220406,32.719464);\nvar point2 = r.point(-117.206201,32.725186);\nr.circle(point1, 2000).intersects(point2).run(conn, callback);\n// result returned to callback \ntrue\n</code></pre>", 
    "io": [
      [
        "geometry", 
        "bool"
      ], 
      [
        "sequence", 
        "sequence"
      ]
    ], 
    "name": "intersects", 
    "url": "intersects"
  }, 
  "api/javascript/is_empty/": {
    "body": "sequence.isEmpty() &rarr; bool", 
    "description": "<p>Test if a sequence is empty.</p>", 
    "example": "<p><strong>Example:</strong> Are there any documents in the marvel table?</p>\n<pre><code>r.table('marvel').isEmpty().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "bool"
      ]
    ], 
    "name": "isEmpty", 
    "url": "is_empty"
  }, 
  "api/javascript/iso8601/": {
    "body": "r.ISO8601(iso8601Date[, {defaultTimezone:''}]) &rarr; time", 
    "description": "<p>Create a time object based on an ISO 8601 date-time string (e.g. '2013-01-01T01:01:01+00:00'). We support all valid ISO 8601 formats except for week dates. If you pass an ISO 8601 date-time without a time zone, you must specify the time zone with the <code>defaultTimezone</code> argument. Read more about the ISO 8601 format at <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">Wikipedia</a>.</p>", 
    "example": "<p><strong>Example:</strong> Update the time of John's birth.</p>\n<pre><code>r.table(\"user\").get(\"John\").update({birth: r.ISO8601('1986-11-03T08:30:00-07:00')}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "time"
      ]
    ], 
    "name": "ISO8601", 
    "url": "iso8601"
  }, 
  "api/javascript/js/": {
    "body": "r.js(jsString[, {timeout: <number>}]) &rarr; value", 
    "description": "<p>Create a javascript expression.</p>", 
    "example": "<p><strong>Example:</strong> Concatenate two strings using JavaScript.</p>\n<pre><code>r.js(\"'str1' + 'str2'\").run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "value"
      ]
    ], 
    "name": "js", 
    "url": "js"
  }, 
  "api/javascript/json/": {
    "body": "r.json(json_string) &rarr; value", 
    "description": "<p>Parse a JSON string on the server.</p>", 
    "example": "<p><strong>Example:</strong> Send an array to the server.</p>\n<pre><code>r.json(\"[1,2,3]\").run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "value"
      ]
    ], 
    "name": "json", 
    "url": "json"
  }, 
  "api/javascript/keys/": {
    "body": "singleSelection.keys() &rarr; arrayobject.keys() &rarr; array", 
    "description": "<p>Return an array containing all of an object's keys. Note that the keys will be sorted as described in <a href=\"/docs/data-types/#sorting-order\">ReQL data types</a> (for strings, lexicographically).</p>", 
    "example": "<p><strong>Example:</strong> Get all the keys from a table row.</p>\n<pre><code>// row: { id: 1, mail: \"fred@example.com\", name: \"fred\" }\n\nr.table('users').get(1).keys().run(conn, callback);\n// Result passed to callback\n[ \"id\", \"mail\", \"name\" ]\n</code></pre>", 
    "io": [
      [
        "singleSelection", 
        "array"
      ], 
      [
        "object", 
        "array"
      ]
    ], 
    "name": "keys", 
    "url": "keys"
  }, 
  "api/javascript/le/": {
    "body": "value.le(value[, value, ...]) &rarr; bool", 
    "description": "<p>Compare values, testing if the left-hand value is less than or equal to the right-hand.</p>", 
    "example": "<p><strong>Example:</strong> Test if a player has scored 10 points or less.</p>\n<pre><code>r.table('players').get(1)('score').le(10).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "value", 
        "bool"
      ]
    ], 
    "name": "le", 
    "url": "le"
  }, 
  "api/javascript/limit/": {
    "body": "sequence.limit(n) &rarr; streamarray.limit(n) &rarr; array", 
    "description": "<p>End the sequence after the given number of elements.</p>", 
    "example": "<p><strong>Example:</strong> Only so many can fit in our Pantheon of heroes.</p>\n<pre><code>r.table('marvel').orderBy('belovedness').limit(10).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "limit", 
    "url": "limit"
  }, 
  "api/javascript/line/": {
    "body": "r.line([lon1, lat1], [lon2, lat1], ...) &rarr; liner.line(point1, point2, ...) &rarr; line", 
    "description": "<p>Construct a geometry object of type Line. The line can be specified in one of two ways:</p>\n<ul>\n<li>Two or more two-item arrays, specifying longitude and latitude numbers of the line's vertices;</li>\n<li>Two or more <a href=\"/api/javascript/point\">Point</a> objects specifying the line's vertices.</li>\n</ul>", 
    "example": "<p><strong>Example:</strong> Define a line.</p>\n<pre><code>r.table('geo').insert({\n    id: 101,\n    route: r.line([-122.423246,37.779388], [-121.886420,37.329898])\n}).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "r", 
        "line"
      ]
    ], 
    "name": "line", 
    "url": "line"
  }, 
  "api/javascript/literal/": {
    "body": "r.literal(object) &rarr; special", 
    "description": "<p>Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation.</p>\n<p><code>js\nr.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)</code></p>", 
    "example": "", 
    "io": [
      [
        "r", 
        "special"
      ]
    ], 
    "name": "literal", 
    "url": "literal"
  }, 
  "api/javascript/lt/": {
    "body": "value.lt(value[, value, ...]) &rarr; bool", 
    "description": "<p>Compare values, testing if the left-hand value is less than the right-hand.</p>", 
    "example": "<p><strong>Example:</strong> Test if a player has scored less than 10 points.</p>\n<pre><code>r.table('players').get(1)['score'].lt(10).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "value", 
        "bool"
      ]
    ], 
    "name": "lt", 
    "url": "lt"
  }, 
  "api/javascript/map/": {
    "body": "sequence1.map([sequence2, ...], function) &rarr; streamarray1.map([array2, ...], function) &rarr; arrayr.map(sequence1[, sequence2, ...], function) &rarr; streamr.map(array1[, array2, ...], function) &rarr; array", 
    "description": "<p>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</p>", 
    "example": "<p><strong>Example:</strong> Return the first five squares.</p>\n<pre><code>r.expr([1, 2, 3, 4, 5]).map(function (val) {\n    return val.mul(val);\n}).run(conn, callback);\n// Result passed to callback\n[1, 4, 9, 16, 25]\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "map", 
    "url": "map"
  }, 
  "api/javascript/match/": {
    "body": "string.match(regexp) &rarr; null/object", 
    "description": "<p>Matches against a regular expression. If there is a match, returns an object with the fields:</p>\n<ul>\n<li><code>str</code>: The matched string</li>\n<li><code>start</code>: The matched string's start</li>\n<li><code>end</code>: The matched string's end</li>\n<li><code>groups</code>: The capture groups defined with parentheses</li>\n</ul>\n<p>If no match is found, returns <code>null</code>.</p>", 
    "example": "<p><strong>Example:</strong> Get all users whose name starts with \"A\". </p>\n<pre><code>r.table('users').filter(function(doc){\n    return doc('name').match(\"^A\")\n}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "string", 
        "object"
      ]
    ], 
    "name": "match", 
    "url": "match"
  }, 
  "api/javascript/max/": {
    "body": "sequence.max(field | function) &rarr; elementsequence.max({index: <indexname>}) &rarr; element", 
    "description": "<p>Finds the maximum element of a sequence.</p>", 
    "example": "<p><strong>Example:</strong> Return the maximum value in the list <code>[3, 5, 7]</code>.</p>\n<pre><code>r.expr([3, 5, 7]).max().run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "value"
      ]
    ], 
    "name": "max", 
    "url": "max"
  }, 
  "api/javascript/merge/": {
    "body": "singleSelection.merge([object | function, object | function, ...]) &rarr; objectobject.merge([object | function, object | function, ...]) &rarr; objectsequence.merge([object | function, object | function, ...]) &rarr; streamarray.merge([object | function, object | function, ...]) &rarr; array", 
    "description": "<p>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list.</p>", 
    "example": "<p><strong>Example:</strong> Equip Thor for battle.</p>\n<pre><code>r.table('marvel').get('thor').merge(\n    r.table('equipment').get('hammer'),\n    r.table('equipment').get('pimento_sandwich')\n).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ], 
      [
        "object", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "merge", 
    "url": "merge"
  }, 
  "api/javascript/min/": {
    "body": "sequence.min(field | function) &rarr; elementsequence.min({index: <indexname>}) &rarr; element", 
    "description": "<p>Finds the minimum element of a sequence.</p>", 
    "example": "<p><strong>Example:</strong> Return the minimum value in the list <code>[3, 5, 7]</code>.</p>\n<pre><code>r.expr([3, 5, 7]).min().run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "value"
      ]
    ], 
    "name": "min", 
    "url": "min"
  }, 
  "api/javascript/minutes/": {
    "body": "time.minutes() &rarr; number", 
    "description": "<p>Return the minute in a time object as a number between 0 and 59.</p>", 
    "example": "<p><strong>Example:</strong> Return all the posts submitted during the first 10 minutes of every hour.</p>\n<pre><code>r.table(\"posts\").filter(function(post) {\n    return post(\"date\").minutes().lt(10)\n})\n</code></pre>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "minutes", 
    "url": "minutes"
  }, 
  "api/javascript/mod/": {
    "body": "number.mod(number) &rarr; number", 
    "description": "<p>Find the remainder when dividing two numbers.</p>", 
    "example": "<p><strong>Example:</strong> It's as easy as 2 % 2 = 0.</p>\n<pre><code>r.expr(2).mod(2).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "number", 
        "number"
      ]
    ], 
    "name": "mod", 
    "url": "mod"
  }, 
  "api/javascript/month/": {
    "body": "time.month() &rarr; number", 
    "description": "<p>Return the month of a time object as a number between 1 and 12. For your convenience, the terms r.january, r.february etc. are defined and map to the appropriate integer.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve all the users who were born in November.</p>\n<pre><code>r.table(\"users\").filter(\n    r.row(\"birthdate\").month().eq(11)\n)\n</code></pre>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "month", 
    "url": "month"
  }, 
  "api/javascript/mul/": {
    "body": "number.mul(number[, number, ...]) &rarr; numberarray.mul(number[, number, ...]) &rarr; array", 
    "description": "<p>Multiply two numbers, or make a periodic array.</p>", 
    "example": "<p><strong>Example:</strong> It's as easy as 2 * 2 = 4.</p>\n<pre><code>r.expr(2).mul(2).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "number", 
        "number"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "mul", 
    "url": "mul"
  }, 
  "api/javascript/ne/": {
    "body": "value.ne(value[, value, ...]) &rarr; bool", 
    "description": "<p>Test if two or more values are not equal.</p>", 
    "example": "<p><strong>Example:</strong> See if a user's <code>role</code> field is not set to <code>administrator</code>. </p>\n<pre><code>r.table('users').get(1)('role').ne('administrator').run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "value", 
        "bool"
      ]
    ], 
    "name": "ne", 
    "url": "ne"
  }, 
  "api/javascript/next/": {
    "body": "cursor.next(callback)array.next(callback)cursor.next() &rarr; promisearray.next() &rarr; promise", 
    "description": "<p>Get the next element in the cursor.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve the next element.</p>\n<pre><code>cursor.next(function(err, row) {\n    if (err) throw err;\n    processRow(row);\n});\n</code></pre>", 
    "io": [
      [
        "cursor", 
        "undefined"
      ]
    ], 
    "name": "next", 
    "url": "next"
  }, 
  "api/javascript/noreply_wait/": {
    "body": "conn.noreplyWait(callback)conn.noreplyWait() &rarr; promise", 
    "description": "<p><code>noreplyWait</code> ensures that previous queries with the <code>noreply</code> flag have been processed\nby the server. Note that this guarantee only applies to queries run on the given connection.</p>", 
    "example": "<p><strong>Example:</strong> We have previously run queries with the <code>noreply</code> argument set to <code>true</code>. Now\nwait until the server has processed them.</p>\n<pre><code>conn.noreplyWait(function(err) { ... })\n</code></pre>", 
    "io": [
      [
        "connection", 
        null
      ]
    ], 
    "name": "noreplyWait", 
    "url": "noreply_wait"
  }, 
  "api/javascript/not/": {
    "body": "bool.not() &rarr; boolnot(bool) &rarr; bool", 
    "description": "<p>Compute the logical inverse (not) of an expression.</p>\n<p><code>not</code> can be called either via method chaining, immediately after an expression that evaluates as a boolean value, or by passing the expression as a parameter to <code>not</code>.</p>", 
    "example": "<p><strong>Example:</strong> Not true is false.</p>\n<pre><code>r(true).not().run(conn, callback)\nr.not(true).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "bool", 
        "bool"
      ]
    ], 
    "name": "not", 
    "url": "not"
  }, 
  "api/javascript/now/": {
    "body": "r.now() &rarr; time", 
    "description": "<p>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</p>", 
    "example": "<p><strong>Example:</strong> Add a new user with the time at which he subscribed.</p>\n<pre><code>r.table(\"users\").insert({\n    name: \"John\",\n    subscription_date: r.now()\n}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "time"
      ]
    ], 
    "name": "now", 
    "url": "now"
  }, 
  "api/javascript/nth/": {
    "body": "sequence.nth(index) &rarr; objectselection.nth(index) &rarr; selection&lt;object&gt;", 
    "description": "<p>Get the <em>nth</em> element of a sequence, counting from zero. If the argument is negative, count from the last element.</p>", 
    "example": "<p><strong>Example:</strong> Select the second element in the array.</p>\n<pre><code>r.expr([1,2,3]).nth(1).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "object"
      ]
    ], 
    "name": "nth", 
    "url": "nth"
  }, 
  "api/javascript/object/": {
    "body": "r.object([key, value,]...) &rarr; object", 
    "description": "<p>Creates an object from a list of key-value pairs, where the keys must\nbe strings.  <code>r.object(A, B, C, D)</code> is equivalent to\n<code>r.expr([[A, B], [C, D]]).coerce_to('OBJECT')</code>.</p>", 
    "example": "<p><strong>Example:</strong> Create a simple object.</p>\n<pre><code>r.object('id', 5, 'data', ['foo', 'bar']).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "object"
      ]
    ], 
    "name": "object", 
    "url": "object"
  }, 
  "api/javascript/offsets_of/": {
    "body": "sequence.offsetsOf(datum | predicate_function) &rarr; array", 
    "description": "<p>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</p>", 
    "example": "<p><strong>Example:</strong> Find the position of the letter 'c'.</p>\n<pre><code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "array"
      ]
    ], 
    "name": "offsetsOf", 
    "url": "offsets_of"
  }, 
  "api/javascript/or/": {
    "body": "bool.or([bool, bool, ...]) &rarr; boolr.or([bool, bool, ...]) &rarr; bool", 
    "description": "<p>Compute the logical \"or\" of one or more values.</p>", 
    "example": "<p><strong>Example:</strong> Return whether either <code>a</code> or <code>b</code> evaluate to true.</p>\n<pre><code>var a = true, b = false;\nr.expr(a).or(b).run(conn, callback);\n// result passed to callback\ntrue\n</code></pre>", 
    "io": [
      [
        "bool", 
        "bool"
      ]
    ], 
    "name": "or", 
    "url": "or"
  }, 
  "api/javascript/order_by/": {
    "body": "table.orderBy([key | function...], {index: index_name}) &rarr; table_sliceselection.orderBy(key | function[, ...]) &rarr; selection<array>sequence.orderBy(key | function[, ...]) &rarr; array", 
    "description": "<p>Sort the sequence by document values of the given key(s). To specify\nthe ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>\n(defaults to ascending).</p>\n<p>Sorting without an index requires the server to hold the sequence in\nmemory, and is limited to 100,000 documents (or the setting of the <code>arrayLimit</code> option for <a href=\"/api/javascript/run\">run</a>). Sorting with an index can\nbe done on arbitrarily large tables, or after a <code>between</code> command\nusing the same index.</p>", 
    "example": "<p><strong>Example:</strong> Order all the posts using the index <code>date</code>.   </p>\n<pre><code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)\n</code></pre>\n<p>The index must have been previously created with <a href=\"/api/javascript/index_create/\">indexCreate</a>.</p>\n<pre><code>r.table('posts').indexCreate('date').run(conn, callback)\n</code></pre>\n<p>You can also select a descending ordering:</p>\n<pre><code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "table_slice"
      ], 
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "orderBy", 
    "url": "order_by"
  }, 
  "api/javascript/outer_join/": {
    "body": "sequence.outerJoin(otherSequence, predicate_function) &rarr; streamarray.outerJoin(otherSequence, predicate_function) &rarr; array", 
    "description": "<p>Returns a left outer join of two sequences.</p>", 
    "example": "<p><strong>Example:</strong> Return a list of all Marvel heroes, paired with any DC heroes who could beat them in a fight.</p>\n<pre><code>r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {\n    return marvelRow('strength').lt(dcRow('strength'))\n}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "outerJoin", 
    "url": "outer_join"
  }, 
  "api/javascript/pluck/": {
    "body": "sequence.pluck([selector1, selector2...]) &rarr; streamarray.pluck([selector1, selector2...]) &rarr; arrayobject.pluck([selector1, selector2...]) &rarr; objectsingleSelection.pluck([selector1, selector2...]) &rarr; object", 
    "description": "<p>Plucks out one or more attributes from either an object or a sequence of objects\n(projection).</p>", 
    "example": "<p><strong>Example:</strong> We just need information about IronMan's reactor and not the rest of the\ndocument.</p>\n<pre><code>r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ], 
      [
        "object", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "pluck", 
    "url": "pluck"
  }, 
  "api/javascript/point/": {
    "body": "r.point(longitude, latitude) &rarr; point", 
    "description": "<p>Construct a geometry object of type Point. The point is specified by two floating point numbers, the longitude (&minus;180 to 180) and the latitude (&minus;90 to 90) of the point on a perfect sphere.</p>", 
    "example": "<p><strong>Example:</strong> Define a point.</p>\n<pre><code>r.table('geo').insert({\n    id: 1,\n    name: 'San Francisco',\n    location: r.point(-122.423246,37.779388)\n}).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "r", 
        "point"
      ]
    ], 
    "name": "point", 
    "url": "point"
  }, 
  "api/javascript/polygon/": {
    "body": "r.polygon([lon1, lat1], [lon2, lat2], [lon3, lat3], ...) &rarr; polygonr.polygon(point1, point2, point3, ...) &rarr; polygon", 
    "description": "<p>Construct a geometry object of type Polygon. The Polygon can be specified in one of two ways:</p>\n<ul>\n<li>Three or more two-item arrays, specifying longitude and latitude numbers of the polygon's vertices;</li>\n<li>Three or more <a href=\"/api/javascript/point\">Point</a> objects specifying the polygon's vertices.</li>\n</ul>", 
    "example": "<p><strong>Example:</strong> Define a polygon.</p>\n<pre><code>r.table('geo').insert({\n    id: 101,\n    rectangle: r.polygon(\n        [-122.423246,37.779388],\n        [-122.423246,37.329898],\n        [-121.886420,37.329898],\n        [-121.886420,37.779388]\n    )\n}).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "r", 
        "polygon"
      ]
    ], 
    "name": "polygon", 
    "url": "polygon"
  }, 
  "api/javascript/polygon_sub/": {
    "body": "polygon1.polygonSub(polygon2) &rarr; polygon", 
    "description": "<p>Use <code>polygon2</code> to \"punch out\" a hole in <code>polygon1</code>. <code>polygon2</code> must be completely contained within <code>polygon1</code> and must have no holes itself (it must not be the output of <code>polygonSub</code> itself).</p>", 
    "example": "<p><strong>Example:</strong> Define a polygon with a hole punched in it.</p>\n<pre><code>var outerPolygon = r.polygon(\n    [-122.4,37.7],\n    [-122.4,37.3],\n    [-121.8,37.3],\n    [-121.8,37.7]\n);\nvar innerPolygon = r.polygon(\n    [-122.3,37.4],\n    [-122.3,37.6],\n    [-122.0,37.6],\n    [-122.0,37.4]\n);\nouterPolygon.polygonSub(innerpolygon).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "polygon", 
        "polygon"
      ]
    ], 
    "name": "polygonSub", 
    "url": "polygon_sub"
  }, 
  "api/javascript/prepend/": {
    "body": "array.prepend(value) &rarr; array", 
    "description": "<p>Prepend a value to an array.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve Iron Man's equipment list with the addition of some new boots.</p>\n<pre><code>r.table('marvel').get('IronMan')('equipment').prepend('newBoots').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "prepend", 
    "url": "prepend"
  }, 
  "api/javascript/r/": {
    "body": "r &rarr; r", 
    "description": "<p>The top-level ReQL namespace.</p>", 
    "example": "<p><strong>Example:</strong> Set up your top-level namespace.</p>\n<pre><code>var r = require('rethinkdb');\n</code></pre>", 
    "io": [
      [
        null, 
        "r"
      ]
    ], 
    "name": "r", 
    "url": "r"
  }, 
  "api/javascript/random/": {
    "body": "r.random() &rarr; numberr.random(number[, number], {float: true}) &rarr; numberr.random(integer[, integer]) &rarr; integer", 
    "description": "<p>Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.</p>", 
    "example": "<p><strong>Example:</strong> Generate a random number in the range <code>[0,1)</code></p>\n<pre><code>r.random().run(conn, callback)\n</code></pre>", 
    "io": [
      "r", 
      "number"
    ], 
    "name": "random", 
    "url": "random"
  }, 
  "api/javascript/range/": {
    "body": "r.range() &rarr; streamr.range([startValue, ]endValue) &rarr; stream", 
    "description": "<p>Generate a stream of sequential integers in a specified range.</p>", 
    "example": "<p><strong>Example:</strong> Return a four-element range of <code>[0, 1, 2, 3]</code>.</p>\n<pre><code>&gt; r.range(4).run(conn, callback)\n\n[0, 1, 2, 3]\n</code></pre>", 
    "io": [
      [
        "r", 
        "stream"
      ]
    ], 
    "name": "range", 
    "url": "range"
  }, 
  "api/javascript/rebalance/": {
    "body": "table.rebalance() &rarr; objectdatabase.rebalance() &rarr; object", 
    "description": "<p>Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.</p>", 
    "example": "<p><strong>Example:</strong> Rebalance a table.</p>\n<pre><code>&gt; r.table('superheroes').rebalance().run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "table", 
        "object"
      ], 
      [
        "database", 
        "object"
      ]
    ], 
    "name": "rebalance", 
    "url": "rebalance"
  }, 
  "api/javascript/reconfigure/": {
    "body": "table.reconfigure({shards: <s>, replicas: <r>[, primaryReplicaTag: <t>, dryRun: false}]) &rarr; objectdatabase.reconfigure({shards: <s>, replicas: <r>[, primaryReplicaTag: <t>, dryRun: false}]) &rarr; object", 
    "description": "<p>Reconfigure a table's sharding and replication.</p>", 
    "example": "<p><strong>Example:</strong> Reconfigure a table.</p>\n<pre><code>&gt; r.table('superheroes').reconfigure({shards: 2, replicas: 1}).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "table", 
        "object"
      ], 
      [
        "database", 
        "object"
      ]
    ], 
    "name": "reconfigure", 
    "url": "reconfigure"
  }, 
  "api/javascript/reconnect/": {
    "body": "conn.reconnect([{noreplyWait: true}, ]callback)conn.reconnect([{noreplyWait: true}]) &rarr; promise", 
    "description": "<p>Close and reopen a connection.</p>\n<p>If no callback is provided, a promise will be returned.</p>", 
    "example": "<p><strong>Example:</strong> Cancel outstanding requests/queries that are no longer needed.</p>\n<pre><code>conn.reconnect({noreplyWait: false}, function(error, connection) { ... })\n</code></pre>", 
    "io": [
      [
        "connection", 
        "undefined"
      ]
    ], 
    "name": "reconnect", 
    "url": "reconnect"
  }, 
  "api/javascript/reduce/": {
    "body": "sequence.reduce(function) &rarr; value", 
    "description": "<p>Produce a single value from a sequence through repeated application of a reduction\nfunction.</p>", 
    "example": "<p><strong>Example:</strong> Return the number of documents in the table `posts.</p>\n<pre><code>r.table(\"posts\").map(function(doc) {\n    return 1\n}).reduce(function(left, right) {\n    return left.add(right)\n}).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "value"
      ]
    ], 
    "name": "reduce", 
    "url": "reduce"
  }, 
  "api/javascript/replace/": {
    "body": "table.replace(object | function[, {durability: \"hard\", returnChanges: false, nonAtomic: false}])&rarr; objectselection.replace(object | function[, {durability: \"hard\", returnChanges: false, nonAtomic: false}])&rarr; objectsingleSelection.replace(object | function[, {durability: \"hard\", returnChanges: false, nonAtomic: false}])&rarr; object", 
    "description": "<p>Replace documents in a table. Accepts a JSON document or a ReQL expression, and replaces\nthe original document with the new one. The new document must have the same primary key\nas the original document.</p>", 
    "example": "<p><strong>Example:</strong> Replace the document with the primary key <code>1</code>.</p>\n<pre><code>r.table(\"posts\").get(1).replace({\n    id: 1,\n    title: \"Lorem ipsum\",\n    content: \"Aleas jacta est\",\n    status: \"draft\"\n}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "object"
      ], 
      [
        "selection", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "replace", 
    "url": "replace"
  }, 
  "api/javascript/round/": {
    "body": "r.round(number) &rarr; numbernumber.round() &rarr; number", 
    "description": "<p>Rounds the given value to the nearest whole integer.</p>", 
    "example": "<p><strong>Example:</strong> Round 12.345 to the nearest integer.</p>\n<pre><code>&gt; r.round(12.345).run(conn, callback);\n\n12.0\n</code></pre>", 
    "io": [
      [
        "number", 
        "number"
      ]
    ], 
    "name": "round", 
    "url": "round"
  }, 
  "api/javascript/row/": {
    "body": "r.row &rarr; value", 
    "description": "<p>Returns the currently visited document.</p>", 
    "example": "<p><strong>Example:</strong> Get all users whose age is greater than 5.</p>\n<pre><code>r.table('users').filter(r.row('age').gt(5)).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "value"
      ]
    ], 
    "name": "row", 
    "url": "row"
  }, 
  "api/javascript/run/": {
    "body": "query.run(conn[, options], callback)query.run(conn[, options]) &rarr; promise", 
    "description": "<p>Run a query on a connection. </p>\n<p>The callback will get either an error, a single JSON result, or a\ncursor, depending on the query.</p>", 
    "example": "<p><strong>Example:</strong> Run a query on the connection <code>conn</code> and log each row in\nthe result to the console.</p>\n<pre><code>r.table('marvel').run(conn, function(err, cursor) { cursor.each(console.log); })\n</code></pre>", 
    "io": [
      [
        "any", 
        null
      ]
    ], 
    "name": "run", 
    "url": "run"
  }, 
  "api/javascript/sample/": {
    "body": "sequence.sample(number) &rarr; selectionstream.sample(number) &rarr; arrayarray.sample(number) &rarr; array", 
    "description": "<p>Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.</p>", 
    "example": "<p><strong>Example:</strong> Select 3 random heroes.</p>\n<pre><code>r.table('marvel').sample(3).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "selection"
      ], 
      [
        "stream", 
        "array"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "sample", 
    "url": "sample"
  }, 
  "api/javascript/seconds/": {
    "body": "time.seconds() &rarr; number", 
    "description": "<p>Return the seconds in a time object as a number between 0 and 59.999 (double precision).</p>", 
    "example": "<p><strong>Example:</strong> Return the post submitted during the first 30 seconds of every minute.</p>\n<pre><code>r.table(\"posts\").filter(function(post) {\n    return post(\"date\").seconds().lt(30)\n})\n</code></pre>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "seconds", 
    "url": "seconds"
  }, 
  "api/javascript/server/": {
    "body": "conn.server(callback)conn.server() &rarr; promise", 
    "description": "<p>Return the server name and server UUID being used by a connection.</p>", 
    "example": "<p><strong>Example:</strong> Return the server name and UUID.</p>\n<pre><code>conn.server(callback);\n\n// Result passed to callback\n{ \"id\": \"404bef53-4b2c-433f-9184-bc3f7bda4a15\", \"name\": \"amadeus\" }\n</code></pre>\n<p>If no callback is provided, a promise will be returned.</p>", 
    "io": [
      [
        "connection", 
        null
      ]
    ], 
    "name": "server", 
    "url": "server"
  }, 
  "api/javascript/set_difference/": {
    "body": "array.setDifference(array) &rarr; array", 
    "description": "<p>Remove the elements of one array from another and return them as a set (an array with\ndistinct values).</p>", 
    "example": "<p><strong>Example:</strong> Check which pieces of equipment Iron Man has, excluding a fixed list.</p>\n<pre><code>r.table('marvel').get('IronMan')('equipment').setDifference(['newBoots', 'arc_reactor']).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "setDifference", 
    "url": "set_difference"
  }, 
  "api/javascript/set_insert/": {
    "body": "array.setInsert(value) &rarr; array", 
    "description": "<p>Add a value to an array and return it as a set (an array with distinct values).</p>", 
    "example": "<p><strong>Example:</strong> Retrieve Iron Man's equipment list with the addition of some new boots.</p>\n<pre><code>r.table('marvel').get('IronMan')('equipment').setInsert('newBoots').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "setInsert", 
    "url": "set_insert"
  }, 
  "api/javascript/set_intersection/": {
    "body": "array.setIntersection(array) &rarr; array", 
    "description": "<p>Intersect two arrays returning values that occur in both of them as a set (an array with\ndistinct values).</p>", 
    "example": "<p><strong>Example:</strong> Check which pieces of equipment Iron Man has from a fixed list.</p>\n<pre><code>r.table('marvel').get('IronMan')('equipment').setIntersection(['newBoots', 'arc_reactor']).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "setIntersection", 
    "url": "set_intersection"
  }, 
  "api/javascript/set_union/": {
    "body": "array.setUnion(array) &rarr; array", 
    "description": "<p>Add a several values to an array and return it as a set (an array with distinct values).</p>", 
    "example": "<p><strong>Example:</strong> Retrieve Iron Man's equipment list with the addition of some new boots and an arc reactor.</p>\n<pre><code>r.table('marvel').get('IronMan')('equipment').setUnion(['newBoots', 'arc_reactor']).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "setUnion", 
    "url": "set_union"
  }, 
  "api/javascript/skip/": {
    "body": "sequence.skip(n) &rarr; streamarray.skip(n) &rarr; array", 
    "description": "<p>Skip a number of elements from the head of the sequence.</p>", 
    "example": "<p><strong>Example:</strong> Here in conjunction with <code>orderBy</code> we choose to ignore the most successful heroes.</p>\n<pre><code>r.table('marvel').orderBy('successMetric').skip(10).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "skip", 
    "url": "skip"
  }, 
  "api/javascript/slice/": {
    "body": "selection.slice(startIndex[, endIndex, {leftBound:'closed', rightBound:'open'}]) &rarr; selectionstream.slice(startIndex[, endIndex, {leftBound:'closed', rightBound:'open'}]) &rarr; streamarray.slice(startIndex[, endIndex, {leftBound:'closed', rightBound:'open'}]) &rarr; arraybinary.slice(startIndex[, endIndex, {leftBound:'closed', rightBound:'open'}]) &rarr; binary", 
    "description": "<p>Return the elements of a sequence within the specified range.</p>\n<p><strong>Example:</strong> Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3&ndash;5.)</p>\n<p><code>js\nr.table('players').orderBy({index: 'age'}).slice(3,6).run(conn, callback)</code></p>", 
    "example": "", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ], 
      [
        "binary", 
        "binary"
      ]
    ], 
    "name": "slice", 
    "url": "slice"
  }, 
  "api/javascript/splice_at/": {
    "body": "array.spliceAt(index, array) &rarr; array", 
    "description": "<p>Insert several values in to an array at a given index. Returns the modified array.</p>", 
    "example": "<p><strong>Example:</strong> Hulk and Thor decide to join the avengers.</p>\n<pre><code>r.expr([\"Iron Man\", \"Spider-Man\"]).spliceAt(1, [\"Hulk\", \"Thor\"]).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "spliceAt", 
    "url": "splice_at"
  }, 
  "api/javascript/split/": {
    "body": "string.split([separator, [max_splits]]) &rarr; array", 
    "description": "<p>Splits a string into substrings.  Splits on whitespace when called\nwith no arguments.  When called with a separator, splits on that\nseparator.  When called with a separator and a maximum number of\nsplits, splits on that separator at most <code>max_splits</code> times.  (Can be\ncalled with <code>null</code> as the separator if you want to split on whitespace\nwhile still specifying <code>max_splits</code>.)</p>\n<p>Mimics the behavior of Python's <code>string.split</code> in edge cases, except\nfor splitting on the empty string, which instead produces an array of\nsingle-character strings.</p>", 
    "example": "<p><strong>Example:</strong> Split on whitespace.</p>\n<pre><code>r.expr(\"foo  bar bax\").split().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "string", 
        "array"
      ]
    ], 
    "name": "split", 
    "url": "split"
  }, 
  "api/javascript/status/": {
    "body": "table.status() &rarr; selection&lt;object&gt;", 
    "description": "<p>Return the status of a table.</p>", 
    "example": "<p><strong>Example:</strong> Get a table's status.</p>\n<pre><code>&gt; r.table('superheroes').status().run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "table", 
        "singleSelection"
      ]
    ], 
    "name": "status", 
    "url": "status"
  }, 
  "api/javascript/sub/": {
    "body": "number.sub(number[, number, ...]) &rarr; numbertime.sub(number[, number, ...]) &rarr; timetime.sub(time) &rarr; number", 
    "description": "<p>Subtract two numbers.</p>", 
    "example": "<p><strong>Example:</strong> It's as easy as 2 - 2 = 0.</p>\n<pre><code>r.expr(2).sub(2).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "number", 
        "number"
      ], 
      [
        "time", 
        "time"
      ], 
      [
        "time", 
        "number"
      ]
    ], 
    "name": "sub", 
    "url": "sub"
  }, 
  "api/javascript/sum/": {
    "body": "sequence.sum([field | function]) &rarr; number", 
    "description": "<p>Sums all the elements of a sequence.  If called with a field name,\nsums all the values of that field in the sequence, skipping elements\nof the sequence that lack that field.  If called with a function,\ncalls that function on every element of the sequence and sums the\nresults, skipping elements of the sequence where that function returns\n<code>null</code> or a non-existence error.</p>", 
    "example": "<p><strong>Example:</strong> What's 3 + 5 + 7?</p>\n<pre><code>r.expr([3, 5, 7]).sum().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "number"
      ]
    ], 
    "name": "sum", 
    "url": "sum"
  }, 
  "api/javascript/sync/": {
    "body": "table.sync()&rarr; object", 
    "description": "<p><code>sync</code> ensures that writes on a given table are written to permanent storage. Queries\nthat specify soft durability (<code>{durability: 'soft'}</code>) do not give such guarantees, so\n<code>sync</code> can be used to ensure the state of these queries. A call to <code>sync</code> does not return\nuntil all previous writes to the table are persisted.</p>", 
    "example": "<p><strong>Example:</strong> After having updated multiple heroes with soft durability, we now want to wait\nuntil these changes are persisted.</p>\n<pre><code>r.table('marvel').sync().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "object"
      ]
    ], 
    "name": "sync", 
    "url": "sync"
  }, 
  "api/javascript/table/": {
    "body": "db.table(name[, {readMode: 'single', identifierFormat: 'name'}]) &rarr; table", 
    "description": "<p>Select all documents in a table. This command can be chained with other commands to do\nfurther processing on the data.</p>", 
    "example": "<p><strong>Example:</strong> Return all documents in the table 'marvel' of the default database.</p>\n<pre><code>r.table('marvel').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "db", 
        "table"
      ]
    ], 
    "name": "table", 
    "url": "table"
  }, 
  "api/javascript/table_create/": {
    "body": "db.tableCreate(tableName[, options]) &rarr; objectr.tableCreate(tableName[, options]) &rarr; object", 
    "description": "<p>Create a table. A RethinkDB table is a collection of JSON documents.</p>", 
    "example": "<p><strong>Example:</strong> Create a table named 'dc_universe' with the default settings.</p>\n<pre><code>r.db('heroes').tableCreate('dc_universe').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "db", 
        "table"
      ]
    ], 
    "name": "tableCreate", 
    "url": "table_create"
  }, 
  "api/javascript/table_drop/": {
    "body": "db.tableDrop(tableName) &rarr; object", 
    "description": "<p>Drop a table. The table and all its data will be deleted.</p>", 
    "example": "<p><strong>Example:</strong> Drop a table named 'dc_universe'.</p>\n<pre><code>r.db('test').tableDrop('dc_universe').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "db", 
        "object"
      ]
    ], 
    "name": "tableDrop", 
    "url": "table_drop"
  }, 
  "api/javascript/table_list/": {
    "body": "db.tableList() &rarr; array", 
    "description": "<p>List all table names in a database. The result is a list of strings.</p>", 
    "example": "<p><strong>Example:</strong> List all tables of the 'test' database.</p>\n<pre><code>r.db('test').tableList().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "db", 
        "array"
      ]
    ], 
    "name": "tableList", 
    "url": "table_list"
  }, 
  "api/javascript/time/": {
    "body": "r.time(year, month, day[, hour, minute, second], timezone)&rarr; time", 
    "description": "<p>Create a time object for a specific time.</p>\n<p>A few restrictions exist on the arguments:</p>\n<ul>\n<li><code>year</code> is an integer between 1400 and 9,999.</li>\n<li><code>month</code> is an integer between 1 and 12.</li>\n<li><code>day</code> is an integer between 1 and 31.</li>\n<li><code>hour</code> is an integer.</li>\n<li><code>minutes</code> is an integer.</li>\n<li><code>seconds</code> is a double. Its value will be rounded to three decimal places\n(millisecond-precision).</li>\n<li><code>timezone</code> can be <code>'Z'</code> (for UTC) or a string with the format <code>\u00b1[hh]:[mm]</code>.</li>\n</ul>", 
    "example": "<p><strong>Example:</strong> Update the birthdate of the user \"John\" to November 3rd, 1986 UTC.</p>\n<pre><code>r.table(\"user\").get(\"John\").update({birthdate: r.time(1986, 11, 3, 'Z')})\n    .run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "r", 
        "time"
      ]
    ], 
    "name": "time", 
    "url": "time"
  }, 
  "api/javascript/time_of_day/": {
    "body": "time.timeOfDay() &rarr; number", 
    "description": "<p>Return the number of seconds elapsed since the beginning of the day stored in the time object.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve posts that were submitted before noon.</p>\n<pre><code>r.table(\"posts\").filter(\n    r.row(\"date\").timeOfDay().le(12*60*60)\n).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "timeOfDay", 
    "url": "time_of_day"
  }, 
  "api/javascript/timezone/": {
    "body": "time.timezone() &rarr; string", 
    "description": "<p>Return the timezone of the time object.</p>", 
    "example": "<p><strong>Example:</strong> Return all the users in the \"-07:00\" timezone.</p>\n<pre><code>r.table(\"users\").filter( function(user) {\n    return user(\"subscriptionDate\").timezone().eq(\"-07:00\")\n})\n</code></pre>", 
    "io": [
      [
        "time", 
        "time"
      ]
    ], 
    "name": "timezone", 
    "url": "timezone"
  }, 
  "api/javascript/to_array/": {
    "body": "cursor.toArray(callback)array.toArray(callback)cursor.toArray() &rarr; promisearray.toArray() &rarr; promise", 
    "description": "<p>Retrieve all results and pass them as an array to the given callback.</p>", 
    "example": "<p><strong>Example:</strong> For small result sets it may be more convenient to process them at once as\nan array.</p>\n<pre><code>cursor.toArray(function(err, results) {\n    if (err) throw err;\n    processResults(results);\n});\n</code></pre>", 
    "io": [
      [
        "cursor", 
        "undefined"
      ]
    ], 
    "name": "toArray", 
    "url": "to_array"
  }, 
  "api/javascript/to_epoch_time/": {
    "body": "time.toEpochTime() &rarr; number", 
    "description": "<p>Convert a time object to its epoch time.</p>", 
    "example": "<p><strong>Example:</strong> Return the current time in seconds since the Unix Epoch with millisecond-precision.</p>\n<pre><code>r.now().toEpochTime()\n</code></pre>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "toEpochTime", 
    "url": "to_epoch_time"
  }, 
  "api/javascript/to_geojson/": {
    "body": "geometry.toGeojson() &rarr; object", 
    "description": "<p>Convert a ReQL geometry object to a [GeoJSON][] object.</p>", 
    "example": "<p><strong>Example:</strong> Convert a ReQL geometry object to a GeoJSON object.</p>\n<pre><code>r.table('geo').get('sfo')('location').toGeojson.run(conn, callback);\n// result passed to callback\n{\n    'type': 'Point',\n    'coordinates': [ -122.423246, 37.779388 ]\n}\n</code></pre>", 
    "io": [
      [
        "geometry", 
        "object"
      ]
    ], 
    "name": "toGeojson", 
    "url": "to_geojson"
  }, 
  "api/javascript/to_iso8601/": {
    "body": "time.toISO8601() &rarr; string", 
    "description": "<p>Convert a time object to a string in ISO 8601 format.</p>", 
    "example": "<p><strong>Example:</strong> Return the current ISO 8601 time.</p>\n<pre><code>r.now().toISO8601().run(conn, callback)\n// Result passed to callback\n\"2015-04-20T18:37:52.690+00:00\"\n</code></pre>", 
    "io": [
      [
        "time", 
        "string"
      ]
    ], 
    "name": "toISO8601", 
    "url": "to_iso8601"
  }, 
  "api/javascript/to_json_string/": {
    "body": "value.toJsonString() &rarr; stringvalue.toJSON() &rarr; string", 
    "description": "<p>Convert a ReQL value or object to a JSON string. You may use either <code>toJsonString</code> or <code>toJSON</code>.</p>", 
    "example": "<p><strong>Example:</strong> Get a ReQL document as a JSON string.</p>\n<pre><code>&gt; r.table('hero').get(1).toJSON()\n// result returned to callback\n'{\"id\": 1, \"name\": \"Batman\", \"city\": \"Gotham\", \"powers\": [\"martial arts\", \"cinematic entrances\"]}'\n</code></pre>", 
    "io": [
      [
        "value", 
        "string"
      ]
    ], 
    "name": "toJsonString, toJSON", 
    "url": "to_json_string"
  }, 
  "api/javascript/type_of/": {
    "body": "any.typeOf() &rarr; string", 
    "description": "<p>Gets the type of a value.</p>", 
    "example": "<p><strong>Example:</strong> Get the type of a string.</p>\n<pre><code>r.expr(\"foo\").typeOf().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "any", 
        "string"
      ]
    ], 
    "name": "typeOf", 
    "url": "type_of"
  }, 
  "api/javascript/ungroup/": {
    "body": "grouped_stream.ungroup() &rarr; arraygrouped_data.ungroup() &rarr; array", 
    "description": "<p>Takes a grouped stream or grouped data and turns it into an array of\nobjects representing the groups.  Any commands chained after <code>ungroup</code>\nwill operate on this array, rather than operating on each group\nindividually.  This is useful if you want to e.g. order the groups by\nthe value of their reduction.</p>", 
    "example": "<p><strong>Example:</strong> What is the maximum number of points scored by each\nplayer, with the highest scorers first?</p>\n<pre><code>r.table('games')\n    .group('player').max('points')['points']\n    .ungroup().orderBy(r.desc('reduction')).run(conn)\n</code></pre>", 
    "io": [
      [
        "grouped_stream", 
        "array"
      ]
    ], 
    "name": "ungroup", 
    "url": "ungroup"
  }, 
  "api/javascript/union/": {
    "body": "stream.union(sequence[, sequence, ...]) &rarr; streamarray.union(sequence[, sequence, ...]) &rarr; array", 
    "description": "<p>Merge two or more sequences. (Note that ordering is not guaranteed by <code>union</code>.)</p>", 
    "example": "<p><strong>Example:</strong> Construct a stream of all heroes.</p>\n<pre><code>r.table('marvel').union(r.table('dc')).run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "array"
      ]
    ], 
    "name": "union", 
    "url": "union"
  }, 
  "api/javascript/upcase/": {
    "body": "string.upcase() &rarr; string", 
    "description": "<p>Uppercases a string.</p>", 
    "example": "<p><strong>Example:</strong></p>\n<pre><code>r.expr(\"Sentence about LaTeX.\").upcase().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "string", 
        "string"
      ]
    ], 
    "name": "upcase", 
    "url": "upcase"
  }, 
  "api/javascript/update/": {
    "body": "table.update(object | function[, {durability: \"hard\", returnChanges: false, nonAtomic: false}])&rarr; objectselection.update(object | function[, {durability: \"hard\", returnChanges: false, nonAtomic: false}])&rarr; objectsingleSelection.update(object | function[, {durability: \"hard\", returnChanges: false, nonAtomic: false}])&rarr; object", 
    "description": "<p>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a\ncombination of the two. You can pass options like <code>returnChanges</code> that will return the old\nand new values of the row you have modified.</p>", 
    "example": "<p><strong>Example:</strong> Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</p>\n<pre><code>r.table(\"posts\").get(1).update({status: \"published\"}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "table", 
        "object"
      ], 
      [
        "selection", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "update", 
    "url": "update"
  }, 
  "api/javascript/use/": {
    "body": "conn.use(dbName)", 
    "description": "<p>Change the default database on this connection.</p>", 
    "example": "<p><strong>Example:</strong> Change the default database so that we don't need to\nspecify the database when referencing a table.</p>\n<pre><code>conn.use('marvel')\nr.table('heroes').run(conn, ...) // refers to r.db('marvel').table('heroes')\n</code></pre>", 
    "io": [
      [
        "connection", 
        "undefined"
      ]
    ], 
    "name": "use", 
    "url": "use"
  }, 
  "api/javascript/uuid/": {
    "body": "r.uuid() &rarr; string", 
    "description": "<p>Return a UUID (universally unique identifier), a string that can be used as a unique ID.</p>", 
    "example": "<p><strong>Example:</strong> Generate a UUID.</p>\n<pre><code>&gt; r.uuid().run(conn, callback)\n// result returned to callback\n\"27961a0e-f4e8-4eb3-bf95-c5203e1d87b9\"\n</code></pre>", 
    "io": [
      [
        "r", 
        "string"
      ]
    ], 
    "name": "uuid", 
    "url": "uuid"
  }, 
  "api/javascript/values/": {
    "body": "singleSelection.values() &rarr; arrayobject.values() &rarr; array", 
    "description": "<h1>Command syntax</h1>\n<p>Return an array containing all of an object's values. <code>values()</code> guarantees the values will come out in the same order as <a href=\"/api/javascript/keys\">keys</a>.</p>", 
    "example": "<p><strong>Example:</strong> Get all of the values from a table row.</p>\n<pre><code>// row: { id: 1, mail: \"fred@example.com\", name: \"fred\" }\n\nr.table('users').get(1).values().run(conn, callback);\n// Result passed to callback\n[ 1, \"fred@example.com\", \"fred\" ]\n</code></pre>", 
    "io": [
      [
        "singleSelection", 
        "array"
      ], 
      [
        "object", 
        "array"
      ]
    ], 
    "name": "values", 
    "url": "values"
  }, 
  "api/javascript/wait/": {
    "body": "table.wait([{waitFor: 'ready_for_writes', timeout: <sec>}]) &rarr; objectdatabase.wait([{waitFor: 'ready_for_writes', timeout: <sec>}]) &rarr; objectr.wait([{waitFor: 'ready_for_writes', timeout: <sec>}]) &rarr; object", 
    "description": "<p>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.</p>", 
    "example": "<p><strong>Example:</strong> Wait for a table to be ready.</p>\n<pre><code>&gt; r.table('superheroes').wait().run(conn, callback);\n</code></pre>", 
    "io": [
      [
        "table", 
        "object"
      ], 
      [
        "database", 
        "object"
      ], 
      [
        "r", 
        "object"
      ]
    ], 
    "name": "wait", 
    "url": "wait"
  }, 
  "api/javascript/with_fields/": {
    "body": "sequence.withFields([selector1, selector2...]) &rarr; streamarray.withFields([selector1, selector2...]) &rarr; array", 
    "description": "<p>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <code>hasFields</code> followed by <code>pluck</code> on a sequence.</p>", 
    "example": "<p><strong>Example:</strong> Get a list of users and their posts, excluding any users who have not made any posts.</p>\n<pre><code>r.table('users').withFields('id', 'username', 'posts').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "withFields", 
    "url": "with_fields"
  }, 
  "api/javascript/without/": {
    "body": "sequence.without([selector1, selector2...]) &rarr; streamarray.without([selector1, selector2...]) &rarr; arraysingleSelection.without([selector1, selector2...]) &rarr; objectobject.without([selector1, selector2...]) &rarr; object", 
    "description": "<p>The opposite of pluck; takes an object or a sequence of objects, and returns them with\nthe specified paths removed.</p>", 
    "example": "<p><strong>Example:</strong> Since we don't need it for this computation we'll save bandwidth and leave\nout the list of IronMan's romantic conquests.</p>\n<pre><code>r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ], 
      [
        "object", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "without", 
    "url": "without"
  }, 
  "api/javascript/year/": {
    "body": "time.year() &rarr; number", 
    "description": "<p>Return the year of a time object.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve all the users born in 1986.</p>\n<pre><code>r.table(\"users\").filter(function(user) {\n    return user(\"birthdate\").year().eq(1986)\n}).run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "year", 
    "url": "year"
  }, 
  "api/javascript/zip/": {
    "body": "stream.zip() &rarr; streamarray.zip() &rarr; array", 
    "description": "<p>Used to 'zip' up the result of a join by merging the 'right' fields into 'left' fields of each member of the sequence.</p>", 
    "example": "<p><strong>Example:</strong> 'zips up' the sequence by merging the left and right fields produced by a join.</p>\n<pre><code>r.table('marvel').eqJoin('main_dc_collaborator', r.table('dc'))\n    .zip().run(conn, callback)\n</code></pre>", 
    "io": [
      [
        "stream", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "zip", 
    "url": "zip"
  }
}
