////
// Tests the JavaScript driver using the callback interface
/////

var assert = require('assert');
var path = require('path');

// -- settings

var driverPort = process.env.RDB_DRIVER_PORT || (process.argv[2] ? parseInt(process.argv[2], 10) : 28015);
var serverHost = process.env.RDB_SERVER_HOST || (process.argv[3] ? parseInt(process.argv[3], 10) : 'localhost');

var dbName = 'test';
var tableName = 'test';
var numRows = parseInt(process.env.TEST_ROWS) || 100;
var numRowsMany = parseInt(process.env.TEST_MANY_ROWS) || 10000; // Keep a "big" value to try hitting `maximum call stack exceed`

// -- load rethinkdb from the proper location
var r = require(path.resolve(__dirname, '..', 'importRethinkDB.js')).r;
var Promise = r._bluebird;

// -- globals

var tbl = r.db(dbName).table(tableName);
var reqlConn = null;
var tableCursor = null;

// -- helper functions

var withConnection = function(fnct) {
    // ensure that the shared connection 'reqlConn' is valid
    if (fnct) {
        // callback style
        return function(done) {
            r.expr(1).run(reqlConn, function(err) {
                if(err) {
                    reqlConn = null;
                    r.connect({host:serverHost, port:driverPort}, function(err, conn) {
                        if(err) { done(err) }
                        reqlConn = conn;
                        return fnct(done, reqlConn);
                    })
                } else {
                    return fnct(done, reqlConn);
                }
            });
        };
    } else {
        // promises style
        return r.expr(1).run(reqlConn) // check the connection
        .then(function() {
            return reqlConn;
        })
        // re-establish the connection if it was bad
        .catch(r.Error.ReqlDriverError, r.Error.ReqlRuntimeError, function(err) {
                reqlConn = null;
                return r.connect({host:serverHost, port:driverPort})
                .then(function(conn) {
                // cache the new connection
                reqlConn = conn;
                return reqlConn;
                });
        });
    }
}

var withTableCursor = function() {
    return withConnection()
    .then(function() {
        return tbl.orderBy({index:'id'}).run(reqlConn);
    })
    .then(function(cur) {
        tableCursor = cur;
        return tableCursor;
    })
}

var argErrorTest = function(expectedMsg) {
    return function(err) {
        return (err instanceof r.Error.ReqlDriverCompileError) && (expectedMsg == err.msg)
    }
}

// -- tests

describe('JavaScript Cursor', function() {
    this.timeout(5000); // Bump timeout from the default 2000ms because some operations
                        // (like table creation) may take a moment

    // setup
    before(function() {
        this.timeout(10000)

        // ensure db exists
        return withConnection()
        .then(function() {
            r.expr([dbName]).setDifference(r.dbList()).forEach(
                function(value) { return r.dbCreate(value); }
            ).run(reqlConn)
        })
        // ensure table exists
        .then(function() {
            return r.expr([tableName]).setDifference(r.db(dbName).tableList()).forEach(
                function(value) { return r.db(dbName).tableCreate(value); }
            ).run(reqlConn);
        })
        // clean out table
        .then(function() {
            return tbl.delete().run(reqlConn);
        })
        // add simple data
        .then(function() {
            return r.range(0, numRows).forEach(
                function(i) { return tbl.insert({'id':i}); }
            ).run(reqlConn);
        });
    });

    // ensure reqlConn and tableCursor are valid before each test
    beforeEach(function() { return withTableCursor(); });

    describe('callback style', function() {

        it('gets created on a table query', function(done) {
            tbl.run(reqlConn, function(err, cur) {
                assert.ifError(err);
                assert.equal(cur.constructor.name, 'Cursor');
                done();
            });
        });

        describe('next', function() {
            it('yields the next element', function(done) {
                tableCursor.next(function(err, row) {
                    assert.ifError(err);
                    assert.deepEqual(row, {'id':0});
                    done();
                });
            });
        });

        describe('toArray', function() {
            it('yields the full result set', function(done) {
                var expectedResult = [];
                for (var i = 0; i < numRows; i++) {
                    expectedResult.push({'id':i});
                }
                tableCursor.toArray(function(err, value) {
                    assert.ifError(err);
                    assert.deepEqual(value, expectedResult);
                    done();
                });
            });
        });

        describe('each', function() {
            it('iterates over table', function(done) {
                var i = 0;
                tableCursor.each(
                    function(err, row) {
                        assert.ifError(err);
                        assert.deepEqual(row, {'id':i});
                        i++;
                    },
                    function() {
                        assert.equal(i, numRows);
                        done();
                    }
                );
            });

            it('stops iteration over table early', function(done) {
                var i = 0;
                tableCursor.each(
                    function(err, row) {
                        assert.ifError(err);
                        assert.deepEqual(row, {'id':i});
                        if (row.id === 10) {
                            return false;
                        }
                        i++;
                    },
                    function() {
                        assert.equal(i, 10);
                        done();
                    }
                );
            });

            it('errors when missing argument', function(done) {
                expectedMsg = 'Expected between 1 and 2 arguments but found 0.';
                assert.throws(function() { tableCursor.each(); }, argErrorTest(expectedMsg));
                done();
            });
        });

        describe('eachAsync', function() {
            it('iterates over table', function(done) {
                var i = 0;
                tableCursor.eachAsync(function(row) {
                    assert.deepEqual(row, {'id':i});
                    i++;
                }).then(function() {
                    assert.equal(i, numRows);
                    done();
                });
            });

            it('resolves before continuing iteration', function(done) {
                var i = 0,
                    handled = 0;

                function asyncHandler(row) {
                    return Promise.resolve().then(function () {
                        assert.equal(handled++, row.id);
                    })
                }

                tableCursor.eachAsync(function(row) {
                    assert.deepEqual(row, {'id':i});
                    i++;
                    return asyncHandler(row);
                })
                .then(function() {
                    assert.equal(i, numRows);
                    done();
                });
            });

            it('stops iteration over table early', function(done) {
                var i = 0;
                tableCursor.eachAsync(function(row) {
                    assert.deepEqual(row, {'id':i});
                    if (row.id === 10) {
                        return Promise.reject(row);
                    }
                    i++;
                })
                .catch(function(row) {
                    assert.equal(i, 10);
                    assert.equal(row.id, 10);
                    done();
                });
            });

            it('errors when missing argument', function(done) {
                expectedMsg = 'First argument to eachAsync must be a function.';
                assert.throws(function() { tableCursor.eachAsync(); }, argErrorTest(expectedMsg));
                done();
            });
        });

        describe('close', function(done) {
            it("doesn't error", function(done) {
                tableCursor.close(function(err) {
                    assert.ifError(err);
                    done();
                });
            });
        });

        it('errors on extra argument to toString', function(done) {
            expectedMsg = 'Expected 0 arguments but found 1.';
            assert.throws(function() {tableCursor.toString(1); },
                          argErrorTest(expectedMsg));
            done();
        });
    });
});

describe('JavaScript array', function() {
    var testArray = [];
    for(var i = 0; i < numRows; i++) {
        testArray.push(i);
    }

    // ensure reqlConn is valid before each test
    beforeEach(function() { return withConnection(); });

    it('has the right type, contents and size', function(done) {
        r(testArray).run(reqlConn, function(err, res) {
            assert.ifError(err);

            assert(res instanceof Array);
            assert.equal(res.length, numRows);
            assert.deepEqual(res, testArray);

            res.push(numRows);
            assert.equal(res[numRows], numRows);
            assert.equal(res.length, numRows + 1);
            done();
        });
    });

    describe('next', function() {
        it('yields the next value', function(done) {
            r(testArray).run(reqlConn, function(err, res) {
                res.next(function(err, value) {
                    assert.equal(value, testArray[0]);
                    done();
                });
            });
        });
    });

    describe('toArray', function() {
        it('returns the same array without copying', function(done) {
            r(testArray).run(reqlConn, function(err, res) {
                assert.ifError(err);
                assert.deepEqual(res, testArray);

                res.toArray(function(err, res2) {
                    assert.ifError(err);
                    assert.strictEqual(res, res2); // this should return the same object, not a copy
                    done();
                });
            });
        });
    });

    it('works with a large array', function(done) {
        var bigArray = [];
        for(var i = 0; i < numRowsMany; i++) {
            bigArray.push(i);
        }
        r.expr(bigArray).run(reqlConn, function(err, res) {
            assert.ifError(err);

            var i = 0;
            res.each(
                function(err, value) {
                    assert.ifError(err);
                    assert.equal(value, bigArray[i])
                    i++;
                },
                function() {
                    assert.equal(i, numRowsMany);
                    done();
                }
            );
        });
    });
});
