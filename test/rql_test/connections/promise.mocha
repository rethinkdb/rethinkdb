////
// Tests the JavaScript driver using the promises interface
/////

var assert = require('assert');
var path = require('path');
var net = require('net')

// -- settings

var driverPort = process.env.RDB_DRIVER_PORT || (process.argv[2] ? parseInt(process.argv[2], 10) : 28015);
var serverHost = process.env.RDB_SERVER_HOST || (process.argv[3] ? parseInt(process.argv[3], 10) : 'localhost');

var dbName = 'test';
var tableName = 'test';
var numRows = parseInt(process.env.TEST_ROWS) || 100;

// -- load rethinkdb from the proper location

var r = require(path.resolve(__dirname, '..', 'importRethinkDB.js')).r;

// -- globals

var tbl = r.db(dbName).table(tableName);
var reqlConn = null;

// -- helper functions

var givesError = function(type, msg, done) {
    return function(err){
        var error = null;
        try {
            assert(err instanceof Error, 'Expected error, but got: ' + err);
            if(type.__super__.name == Error.name) {
                assert(
                    err instanceof type,
                    'Got wrong type of error. Expected `' + type.name + '`, got: ' + err.constructor.name
                );
            } else {
                assert.equal(
                    err.constructor.name, type,
                    'Got wrong type of error. Expected `' + type + '`, got: ' + err.constructor.name
                );
            }
            var _msg = err.message.replace(/ in:\n([\r\n]|.)*/m, "");
            _msg = _msg.replace(/\nFailed assertion:(.|\n)*/m, "")
            assert.equal(_msg, msg);
        } catch (e) {
            error = e;
        } finally {
            if (done) {
                done(error);
            } else if (error) {
                throw error;
            } else {
                return true; // error is correct
            }
        }
    }
}

var withConnection = function(fnct) {
    // ensure that the shared connection 'reqlConn' is valid
    if (fnct) {
        // callback style
        return function(done) {
            r.expr(1).run(reqlConn, function(err) { // check the connection
                if(err) {
                    // re-establish the connection
                    reqlConn = null;
                    r.connect({host:serverHost, port:driverPort}, function(err, conn) {
                        if(err) { done(err) }
                        reqlConn = conn; // cache the new connection
                        fnct(done, reqlConn);
                    })
                } else {
                    fnct(done, reqlConn);
                }
            });
        };
    } else {
        // promises style
        return r.expr(1).run(reqlConn) // check the connection
        .then(function() {
            return reqlConn;
        })
        .catch(r.Error.ReqlDriverError, r.Error.ReqlRuntimeError, function(err) {
            // re-establish the connection
                reqlConn = null;
                return r.connect({host:serverHost, port:driverPort})
                .then(function(conn) {
                reqlConn = conn; // cache the new connection
                return reqlConn;
                });
        });
    }
}

// -- tests

describe('JavaScript Promise style', function() {
    this.timeout(5000); // Bump timeout from the default 2000ms because some operations
                        // (like table creation) may take a moment

    describe('connect', function() {

        it('works normally', function() {
            return r.connect({host:serverHost, port:driverPort})
            .then(function(conn) {
                assert(conn);
                assert.equal(conn.constructor.name, 'TcpConnection');
            })
        });

        it('times out with a bad port', function(done) {
            var server = net.createServer(function(c) {}); // Setup dummy sever
            server.listen(0, function() {
                var badPort = server.address().port;
                r.connect({port:badPort, timeout:1})
                .then(function() {
                    done(new Error('Connection did not return an error on bad port: ' + badPort));
                })
                .catch(r.Error.ReqlTimeoutError, function(err) {
                    try {
                        assert.equal(err.message,
                                     "Could not connect to localhost:"+badPort+
                                     ", operation timed out.");
                        done();
                    } catch (err) {
                        done(err);
                    }
                })
                .catch(function(err) {
                    done(err);
                })
            });
        });

        it('fails with a non-open port', function(done) {
            var server = net.createServer(function(c) {}); // Setup dummy sever to get open port
            server.listen(0, function() {
                var badPort = server.address().port;
                server.close(function(err) { // close dummy sever and hope no-one picks up the port
                    r.connect({port:badPort})
                    .then(function() {
                        done(new Error('Connection did nto return an error on bad port: ' + badPort));
                    })
                    .catch(r.Error.ReqlDriverError, function(err) {
                        try {
                            assert.equal(err.message, "Could not connect to localhost:" + badPort + ".\nconnect ECONNREFUSED");
                            done();
                        } catch (err) {
                            done(err);
                        }
                    })
                    .catch(function(err) {
                        done(err);
                    })
                });
            });
        });

        it('fails with a non-open port on host', function(done) {
            var server = net.createServer(function(c) {}); // Setup dummy sever to get open port
            server.listen(0, function() {
                var badPort = server.address().port;
                server.close(function(err) { // close dummy sever and hope no-one picks up the port
                    r.connect({port:badPort, host:'0.0.0.0'})
                    .then(function() {
                        done(new Error('Connection did nto return an error on bad port: ' + badPort));
                    })
                    .catch(r.Error.ReqlDriverError, function(err) {
                        try {
                            assert.equal(err.message, "Could not connect to 0.0.0.0:" + badPort + ".\nconnect ECONNREFUSED");
                            done();
                        } catch (err) {
                            done(err);
                        }
                    })
                    .catch(function(err) {
                        done(err);
                    })
                });
            });
        });

        describe('with authorization key', function() {
            // ensure reqlConn is valid before each test
            beforeEach(function() { return withConnection() });

            // undo any auth_key changes
            afterEach(function() {
                                return withConnection()
                                .then(function() {
                                return r.db('rethinkdb').table('users').get('admin').update({password: false}).run(reqlConn);
                }).then(function(result) {
                    assert.equal(result['errors'], 0, 'Failed setting auth key: ' + JSON.stringify(result))
                })
            });

            it("fails when no authorization key is needed", function(){
                return r.connect({host:serverHost, port:driverPort, authKey: "hunter2"})
                .then(function() {
                    throw new Error('No error was thrown when connecting with an authKey when none needed.')
                })
                .catch(r.Error.ReqlAuthError, function() {})
            });

            it("succeeds with correct key", function(){
                return r.db('rethinkdb').table('users').get('admin').update({password: "hunter3"}).run(reqlConn)
                .then(function() {
                    return r.connect({host:serverHost, port:driverPort, authKey: "hunter3"});
                }).then(function(authConn) {
                    return r.expr(1).run(authConn);
                })
            });

            it("fails with wrong authorization key", function(){
                return r.db('rethinkdb').table('users').get('admin').update({password: "hunter4"}).run(reqlConn)
                .then(function() {
                    return r.connect({host:serverHost, port:driverPort, authKey: "hunter-bad"});
                })
                .then(function() {
                    throw new Error('Unexpectedly connected with bad AuthKey');
                })
                .catch(r.Error.ReqlAuthError, function(err) {
                    assert.equal(err.message,
                                 "Wrong password");
                })
            });
        });
    });


    describe('run', function() {
        // ensure reqlConn is valid before each test
        beforeEach(function() { return withConnection() });

        it("errors with no connection", function() {
            return r.expr(1).run()
            .then(function() {
                throw new Error("Was expecting an error");
            })
            .catch(
                r.Error.ReqlDriverError,
                givesError(
                    r.Error.ReqlDriverError,
                    "First argument to `run` must be an open connection."
                )
            );
        });

        it("errors with an object", function() {
            return r.expr(1).run({})
            .then(function() {
                throw new Error("Was expecting an error");
            })
            .catch(
                r.Error.ReqlDriverError,
                givesError(
                    r.Error.ReqlDriverError,
                    "First argument to `run` must be an open connection."
                )
            );
        });

        it("errors with an invalid optarg", function(){
            return r.expr(1).run(reqlConn, {nonValidOption: true})
            .then(function() {
                throw new Error("Was expecting an error");
            })
            .catch(
                r.Error.ReqlCompileError,
                givesError(
                    r.Error.ReqlCompileError,
                    "Unrecognized global optional argument `non_valid_option`"
                )
            )
        });

        it("errors with a non-function callback", function(){
            return r.expr(1).run(reqlConn, {}, "not_a_function")
            .then(function() {
                throw new Error("Was expecting an error");
            })
            .catch(
                r.Error.ReqlDriverError,
                givesError(
                    r.Error.ReqlDriverError,
                    "If provided, the callback must be a function. Please use `run(connection[, options][, callback])"
                )
            )
        });

    })

    describe('connection', function() {
        // ensure reqlConn is valid before each test
        beforeEach(function() { return withConnection() });

        describe('close', function(){
            it("can be called", function() {
                return reqlConn.close()
            });

            it("makes subsequent queries fail", function() {
                return reqlConn.close()
                .then(function() {
                    return r.expr(1).run(reqlConn);
                })
                .then(function() {
                    throw new Error('Expected error on closed connection');
                })
                .catch(r.Error.ReqlDriverError, function() {})
            })

            it("waits for noreply by default", function() {
                var minTime = Date.now() + 500;
                // set looping query
                r.js('while(true);', {timeout: 0.5}).run(reqlConn, {noreply: true})
                .catch(function(err) {})
                // ensure we took longer than minTime
                return reqlConn.close()
                .then(function() {
                    assert(Date.now() > minTime);
                })
            });
        });

        describe('reconnect', function() {
            it("can be called", function() {
                return reqlConn.close()
                .then(function() {
                    return reqlConn.reconnect();
                })
            });

            it("waits for noreply by default", function() {
                var minTime = Date.now() + 500;
                // set looping query
                r.js('while(true);', {timeout: 0.5}).run(reqlConn, {noreply: true})
                .catch(function(err) {})
                // ensure we took longer than minTime
                return reqlConn.reconnect()
                .then(function() {
                    assert(Date.now() > minTime);
                })
            });
        });

        it("noreplyWait", function() {
            var minTime = Date.now() + 500;
            // set looping query
            r.js('while(true);', {timeout: 0.5}).run(reqlConn, {noreply: true})
            .catch(function(err) {})
            // ensure we took longer than minTime
            return reqlConn.noreplyWait()
            .then(function() {
                assert(Date.now() > minTime);
            })
        });

        describe('close twice and reconnect', function() {
            var simpleQuery = function(c) { return r(1).run(reqlConn); };

            it("works if done synchronously", function() {
                return simpleQuery()
                .then(function() {
                    return reqlConn.close();
                })
                .then(function() {
                    return reqlConn.close();
                })
                .then(function() {
                    return reqlConn.reconnect();
                })
                .then(function() {
                    return simpleQuery();
                })
            });

            it("works with noreplyWait=false", function() {
                return simpleQuery()
                .then(function() {
                    return reqlConn.close({noreplyWait: false});
                })
                .then(function() {
                    return reqlConn.close({noreplyWait: false});
                })
                .then(function() {
                    return reqlConn.reconnect();
                })
                .then(function() {
                    return simpleQuery();
                })
            });
        });
    });

    describe('expr', function() {
        // ensure reqlConn is valid before each test
        beforeEach(function() { return withConnection() });

        it('fails without a connection', function() {
            r.expr(1).run()
            .then(function(value) {
                throw new Error("Did not fail with an empty run. Got: " + value);
            })
            .catch(r.Error.ReqlDriverError, function(err) {
                assert.equal(err.message, "First argument to `run` must be an open connection.")
            })
        });

        it("works for simple values", function() {
            return r.expr(1).run(reqlConn)
            .then(function(result) {
                assert.equal(result, 1, 'Did not get the expected value (1), imtead got: ' + result)
            });
        });

        it("works for a large array", function() {
            var limit = 10000 // large number to try hitting `maximum call stack exceed`
            return r.range(0, limit).run(reqlConn)
            .then(function(resCursor) {
                var i = 0;
                resCursor.each(
                    function(err, value) {
                        assert.strictEqual(value, i, "Value at poisition: " + i + " was: " + value + " rather than the expected: " + i);
                        i++;
                    },
                    function() {
                        assert.strictEqual(i, limit, "Final value was: " + i + " rather than the expected: " + limit);
                    }
                );
            });
        });
    });

    describe('toArray', function() {
        it("returns a given array without copying", function() {
            var cursorA = null;
            return r.expr([1,2,3]).run(reqlConn)
            .then(function(cur) {
                cursorA = cur;
                return cur.toArray();
            })
            .then(function(cursorB) {
                // we should get back a reference to what we already had
                assert.strictEqual(cursorB, cursorA);
            });
        });
    });

    describe('table cursor with ' + numRows + ' row table', function() {
        before(function() {
            this.timeout(20000);

            return withConnection()
            // setup db/table
            .then(function() {
                return r.expr([dbName]).setDifference(r.dbList()).forEach(r.dbCreate(r.row)).run(reqlConn);
            }).then(function() {
                return r.expr([tableName]).setDifference(r.db(dbName).tableList()).forEach(r.db(dbName).tableCreate(r.row)).run(reqlConn);
            })
            // ensure content
            .then(function() {
                return tbl.delete().run(reqlConn);
            })
            .then(function() {
                return tbl.insert(r.range(numRows).map(function(row) {
                    return {'id':row, 'nums':r.range(0, 500).coerceTo('array')};
                })).run(reqlConn)
            });
        });

        // ensure reqlConn is valid before each test
        beforeEach(function() { return withConnection() });

        it("allows cursor next to be called", function() {
            return tbl.run(reqlConn).then(function(cur) { return cur.next(); });
        });

        it("allows cursor toArray to be called", function() {
            return tbl.run(reqlConn).then(function(cur) { return cur.toArray(); }).then(function(result) {
                assert.strictEqual(result.length, numRows);
            });
        });
    });
});
