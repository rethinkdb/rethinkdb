/////
// Tests the driver API for making connections and excercising the networking code
/////

var assert = require('assert');
var path = require('path');
var net = require('net')

// -- settings

var driverPort = process.env.RDB_DRIVER_PORT || (process.argv[2] ? parseInt(process.argv[2], 10) : 28015);
var serverHost = process.env.RDB_SERVER_HOST || (process.argv[3] ? parseInt(process.argv[3], 10) : 'localhost');

var dbName = 'test';
var tableName = 'test';

// -- load rethinkdb from the proper location

var r = require(path.resolve(__dirname, '..', 'importRethinkDB.js')).r;

/// -- global variables

var tbl = r.db(dbName).table(tableName);
var reqlConn = null;

// -- helper functions

var givesError = function(type, msg, done) {
    return function(err){
        var error = null;
        try {
            assert(err instanceof Error, 'Expected error, but got: ' + err);
            if(type.__super__ && type.__super__.name == Error.name) {
                assert(
                    err instanceof type,
                    'Got wrong type of error. Expected `' + type.name + '`, got: ' + err.constructor.name
                );
            } else {
                assert.equal(
                    err.constructor.name, type,
                    'Got wrong type of error. Expected `' + type + '`, got: ' + err.constructor.name
                );
            }
            var _msg = err.message.replace(/ in:\n([\r\n]|.)*/m, "");
            _msg = _msg.replace(/\nFailed assertion:(.|\n)*/m, "")
            if (msg instanceof RegExp) {
                if (!msg.test(_msg)) {
                    assert.equal(_msg, msg) // just to get the formating
                }
            } else {
                assert.equal(_msg, msg);
            }
        } catch (e) {
            error = e;
        } finally {
            if (done) {
                done(error);
            } else if (error) {
                throw error;
            } else {
                return true; // error is correct
            }
        }
    }
}

var withConnection = function(fnct) {
    // ensure that the shared connection 'reqlConn' is valid
    if (fnct) {
        // callback style
        return function(done) {
            r.expr(1).run(reqlConn, function(err) { // check the connection
                if(err) {
                    // re-establish the connection
                    reqlConn = null;
                    r.connect({host:serverHost, port:driverPort}, function(err, conn) {
                        if(err) { done(err) }
                        reqlConn = conn; // cache the new connection
                        fnct(done, reqlConn);
                    })
                } else {
                    fnct(done, reqlConn);
                }
            });
        };
    } else {
        // promises style
        return r.expr(1).run(reqlConn) // check the connection
        .then(function() {
            return reqlConn;
        })
        .catch(r.Error.ReqlDriverError, r.Error.ReqlRuntimeError, function(err) {
            // re-establish the connection
                reqlConn = null;
                return r.connect({host:serverHost, port:driverPort})
                .then(function(conn) {
                reqlConn = conn; // cache the new connection
                return reqlConn;
                });
        });
    }
}

var noError = function(f){
    return function(err){
        assertNull(err);
        f.apply({}, arguments);
    };
}

var assertNull = function(x){
    assert.equal(x, null);
}

var assertNotNull = function(x){
    assert.notEqual(x, null);
}

describe("JavaScript Callback style", function() {
    this.timeout(5000); // Bump timeout from the default 2000ms because some operations
                        // (like table creation) may take a moment

    describe("connect", function() {

        it("works normally", function(done) {
            r.connect({host:serverHost, port:driverPort}, function(err, conn) {
                try {
                    assert.strictEqual(err, null);
                    assert(conn);
                    assert.equal(conn.constructor.name, 'TcpConnection');
                    done();
                } catch (err) {
                    done(err);
                }
            });
        });

        it("times out with a bad port", function(done){
            var server = net.createServer(function(c) {}); // Setup dummy sever
            server.listen(0, function() {
                var badPort = server.address().port;
                r.connect({port:badPort, timeout:.01}, givesError(
                    "ReqlTimeoutError",
                    "Could not connect to localhost:"+badPort+
                    ", operation timed out.", done));
            });
        });

        it("fails with a non-open port", function(done) {
            var server = net.createServer(function(c) {}); // Setup dummy sever to get open port
            server.listen(0, function() {
                var badPort = server.address().port;
                server.close(function(err) { // close dummy sever and hope no-one picks up the port
                    r.connect({port:badPort}, givesError("ReqlDriverError", RegExp("Could not connect to localhost:" + badPort + ".\nconnect ECONNREFUSED( 127.0.0.1:" + badPort + ")?"), done))
                });
            });
        });

        it("fails with a non-open port on host", function(done) {
            var server = net.createServer(function(c) {}); // Setup dummy sever to get open port
            server.listen(0, function() {
                var badPort = server.address().port;
                server.close(function(err) { // close dummy sever and hope no-one picks up the port
                    r.connect({port:badPort, host:'0.0.0.0'}, givesError("ReqlDriverError", RegExp("Could not connect to 0.0.0.0:" + badPort + ".\nconnect ECONNREFUSED( 0.0.0.0:" + badPort + ")?"), done))
                });
            });
        });

        it("works with default db", function(done, c){
            r.connect(
                {host:serverHost, port:driverPort, db:'rethinkdb'},
                noError(function(err, c) { r.table('current_issues').run(c, noError(done)); })
            )
        });

        describe('with authentication key', function() {
            // ensure reqlConn is valid before each test
            beforeEach(function() { return withConnection() });

            // undo any auth_key changes
            afterEach(function() {
                                return withConnection()
                                .then(function() {
                                return r.db('rethinkdb').table('users').get('admin').update({password:false}).run(reqlConn);
                }).then(function(result) {
                    assert.equal(result['errors'], 0, 'Failed setting auth key: ' + JSON.stringify(result))
                })
            });

            it("fails when no authentication key is needed", function(done){
                r.connect(
                    {host:serverHost, port:driverPort, authKey: "hunter2"},
                    givesError("ReqlAuthError",
                               "Wrong password", done)
                );
            });

            it("suceeds with correct key", function(done){
                r.db('rethinkdb').table('users').get('admin').update({password: "hunter3"}).run(reqlConn, function(err, result) {
                    assert.ifError(err);
                    assert.equal(result['errors'], 0, 'Failed setting auth key: ' + JSON.stringify(result))
                    r.connect({host:serverHost, port:driverPort, authKey: "hunter3"}, function(err, authConn) {
                        assert.ifError(err);
                        r.expr(1).run(authConn, function(err, value) {
                            assert.ifError(err);
                            assert.equal(value, 1);
                            done();
                        });
                    });
                });
            });

            it("fails with wrong authentication key", function(done){
                r.db('rethinkdb').table('users').get('admin').update({password: "hunter4"}).run(reqlConn, function(err, result) {
                    assert.ifError(err);
                    assert.equal(result['errors'], 0, 'Failed setting auth key: ' + JSON.stringify(result))
                    r.connect(
                        {host:serverHost, port:driverPort, authKey: "hunter-bad"},
                        givesError("ReqlAuthError",
                                   "Wrong password", done)
                    );
                });
            });
        });

    });

    describe('connection', function(){
        // ensure reqlConn is valid before each test
        beforeEach(function() { return withConnection() });

        it("fails queries after close", function(done) {
            reqlConn.close({noreplyWait: false});
            r.expr(1).run(reqlConn, givesError("ReqlDriverError", "Connection is closed.", done));
        });

        it("gets clientPort", function(done){
            assert(reqlConn.clientPort() != null);
            done();
        });


        it("gets clientAddress", function(done){
            assert(reqlConn.clientAddress() != null);
            done();
        });

        describe('noreplyWait', function(){
            it("waits", function(done){
                var t = Date.now();
                r.js('while(true);', {timeout: 0.2}).run(reqlConn, {noreply: true}, function() {});
                reqlConn.noreplyWait(function (err) {
                    assert.ifError(err);
                    var duration = Date.now() - t;
                    assert(duration >= 200);
                    done();
                });
            });
        });

        describe('close', function(){
            it("waits by default", function(done){
                var t = Date.now();
                r.js('while(true);', {timeout: 0.2}).run(reqlConn, {noreply: true}, function() {});
                reqlConn.close(function (err) {
                    assert.ifError(err);
                    var duration = Date.now() - t;
                    assert(duration >= 200);
                    done();
                });
            });

            it("does not wait if we want it not to", function(done){
                var t = Date.now();
                r.js('while(true);', {timeout: 0.2}).run(reqlConn, {noreply: true}, function() {
                    reqlConn.close({'noreplyWait': false}, function (err) {
                        assert.ifError(err);
                        var duration = Date.now() - t;
                        assert(duration < 200);
                        done();
                    });
                });
            });

            it("works even with noreply queries that are still in the transfer queue", function(done){
                var t = Date.now();
                r.js('while(true);', {timeout: 0.2}).run(reqlConn, {noreply: true}, function() {});
                r.js('while(true);', {timeout: 0.2}).run(reqlConn, {noreply: true}, function() {});
                r.js('while(true);', {timeout: 0.2}).run(reqlConn, {noreply: true}, function() {});
                reqlConn.close({'noreplyWait': false}, function (err) {
                    assert.ifError(err);
                    var duration = Date.now() - t;
                    assert(duration < 200);
                    done();
                });
            });

            it("waits even without callback", function(done){
                var t = Date.now() + 200;
                r.js('while(true);', {timeout: 0.2}).run(reqlConn, {noreply: true}, function() {});
                reqlConn.close(function(err) {
                    assert.ifError(err);
                    assert(Date.now() >= t);
                    done();
                });
            });
        });

        describe('reconnect', function(){
            it("waits by default", function(done){
                var t = Date.now();
                r.js('while(true);', {timeout: 0.2}).run(reqlConn, {noreply: true}, function() {});
                reqlConn.reconnect(function (err) {
                    assert.ifError(err);
                    var duration = Date.now() - t;
                    assert(duration >= 200);
                    done();
                });
            });

            it("does not wait if we want it not to", function(done){
                var t = Date.now();
                r.js('while(true);', {timeout: 0.2}).run(reqlConn, {noreply: true}, function() {
                    reqlConn.reconnect({'noreplyWait': false}, function (err) {
                        assert.ifError(err);
                        var duration = Date.now() - t;
                        assert(duration < 200);
                        done();
                    });
                });
            });

            it("works even with noreply queries that are still in the transfer queue", function(done){
                var t = Date.now();
                r.js('while(true);', {timeout: 0.2}).run(reqlConn, {noreply: true}, function() {});
                r.js('while(true);', {timeout: 0.2}).run(reqlConn, {noreply: true}, function() {});
                r.js('while(true);', {timeout: 0.2}).run(reqlConn, {noreply: true}, function() {});
                reqlConn.reconnect({'noreplyWait': false}, function (err) {
                    assert.ifError(err);
                    var duration = Date.now() - t;
                    assert(duration < 200);
                    done();
                });
            });
        });

        describe('use', function(){
            it("sets the default database", function(done) {
                reqlConn.use('rethinkdb');
                r.table('current_issues').run(reqlConn, noError(done));
            });

            it("errors when missing argument", function(done){
                assert.throws(function(){ reqlConn.use(); });
                done();
            });

            it("errors with bad table", function(done) {
                reqlConn.use('rethinkdb');
                r.table('non_existent').run(reqlConn, givesError("ReqlOpFailedError", "Table `rethinkdb.non_existent` does not exist", done));
            });
        });
    });

    describe('run', function() {
        // ensure reqlConn is valid before each test
        beforeEach(function() { return withConnection() });

        it("errors with no connection", function(done) {
            r.expr(1).run().then(function() {
                done(new Error("Was expecting an error"))
            }).error(givesError("ReqlDriverError", "First argument to `run` must be an open connection.", done));
        });

        it("errors with an object", function(done) {
            r.expr(1).run({}).then(function() {
                done(new Error("Was expecting an error"))
            }).error(givesError("ReqlDriverError", "First argument to `run` must be an open connection.", done));
        });

        it("errors with an invalid optarg", function(done){
            r.expr(1).run(reqlConn, {nonValidOption: true}).then(function() {
                done(new Error("Was expecting an error"))
            }).error(givesError("ReqlServerCompileError", "Unrecognized global optional argument `non_valid_option`", done));
        });

        it("errors with an extra argument", function(done){
            r.expr(1).run(reqlConn, givesError("ReqlDriverError", "Second argument to `run` cannot be a function if a third argument is provided.", done), 1)
        });

        it("errors with a non-function callback", function(done){
            r.expr(1).run(reqlConn, {}, "not_a_function").error(givesError("ReqlDriverError", "If provided, the callback must be a function. Please use `run(connection[, options][, callback])", done))
        });

        it("handles the db optarg", function(done){
            r.tableCreate('dbOptarg').run(reqlConn, {db:'dbOptarg'}).error(givesError('ReqlOpFailedError', 'Database `dbOptarg` does not exist', done))
        });

        describe('with a table', function() {
            // ensure the db and table exist, and the table is clean
            beforeEach(function() {
                this.timeout(10000)
                
                // ensure db presense
                return r.expr([dbName]).setDifference(r.dbList()).forEach(r.dbCreate(r.row)).run(reqlConn)
                // ensure table presence
                .then(function() {
                    return r.expr([tableName]).setDifference(r.db(dbName).tableList()).forEach(r.db(dbName).tableCreate(r.row)).run(reqlConn);
                })
                // clean the table
                .then(function() {
                    return r.db(dbName).table(tableName).delete().run(reqlConn);
                }).then(function() {
                    tbl = r.db(dbName).table(tableName)
                });
            });
            
            describe('read', function() {
                it("accepts readMode='outdated'", function(done){
                    tbl.run(reqlConn, {readMode: "outdated"}, noError(done));
                });

                it("accepts readMode='majority'", function(done){
                    tbl.run(reqlConn, {readMode: "majority"}, noError(done));
                });

                it("accepts readMode='single'", function(done){
                    tbl.run(reqlConn, {readMode: "single"}, noError(done));
                });
            });

            describe('insert', function() {
                it("accepts soft durability", function(done) {
                    tbl.insert({data:"5"}).run(reqlConn, {durability: "soft"}, noError(done));
                });

                it("accepts hard durability", function(done){
                    tbl.insert({data:"5"}).run(reqlConn, {durability: "hard"}, noError(done));
                });

                it("accepts non-deterministic durability", function(done){
                    tbl.insert({data:"5"}).run(reqlConn, {durability: r.js("'so' + 'ft'")}, noError(done));
                });

                it("errors with \"default\" durability", function(done) {
                    tbl.insert({data:"5"}).run(reqlConn, {durability: "default"},
                        givesError("ReqlQueryLogicError", 'Durability option `default` unrecognized (options are "hard" and "soft")', done)
                    );
                });

                it("errors with wrong durability", function(done) {
                    tbl.insert({data:"5"}).run(reqlConn, {durability: "wrong"},
                        givesError("ReqlQueryLogicError", 'Durability option `wrong` unrecognized (options are "hard" and "soft")', done)
                    );
                });
            });
        });
    });
});

describe('Javascript query toString()', function() {
    
    it('works for various queries', function(){
        [
            'r.table("turtles").filter(r.row("firstName").match("ny$"))',
            'r.table("posts").orderBy({"index": r.desc("date")})',
            'r.db("test").table("sometable").insert({"-x-y-z": 2})',
        ].forEach(function(queryString){
            var query = eval(queryString);
            assert.equal(eval(queryString).toString(), queryString);
        });
    });
    
    it("works with variables", function(done){
        functString = r.db('db1').table('tbl1').map(function(x){ return x; }).toString()
        assert(
            /r.db\("db1"\).table\("tbl1"\).map\(function\(var_\d+\) { return var_\d+; }\)/.test(functString),
            'toString did not give the expected value: ' + functString
        );
        done();
    });
});

describe('EventEmitter', function() {
    // ensure reqlConn is valid before each test
    beforeEach(function() { return withConnection() });

    // ensure we have a clean reqlConn for the next test
    afterEach(function() { reqlConn.removeAllListeners; reqlConn = null; });

    it("emits connect event on connect", function(done){
        reqlConn.on('connect', function() {
            done();
        });

        reqlConn.reconnect(function(){});
    });

    it("emits close event on close", function(done){
        reqlConn.on('close', function() {
            done();
        });

        reqlConn.close();
    });
});
