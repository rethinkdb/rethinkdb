#!/usr/bin/env python

# test-issue-url: https://github.com/rethinkdb/rethinkdb/issues/1774
# test-description: reads and writes can still proceed while a table is sharded

import os, sys, time

# import our testing common
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir, os.path.pardir, 'common')))
import driver, http_admin, utils

# -- constants

databaseName = 'test'
tableName = os.path.splitext(os.path.basename(__file__))[0]

# -- setup

r = utils.import_pyton_driver()
server = driver.Process()
connection = r.connect(host=server.host, port=server.driver_port)

# make sure we have a clean table with no shards

if databaseName not in r.db_list().run(connection):
	r.db_create(databaseName).run(connection)

try:
	r.table_create(tableName).run(connection)
except r.RqlRuntimeError:
	r.table_drop(tableName).run(connection)
	r.table_create(tableName).run(connection)

# -- thread methods

class FillTable(utils.PerformContinuousAction):
	def runAction(self):
		tableName = os.path.splitext(os.path.basename(__file__))[0]
		if 'tableName' in self.kwargs:
			tableName = self.kwargs['tableName']
		r.table(tableName).insert({'id':self.sucessCount + 1, 'data':self.sucessCount + 1}, durability='hard', upsert=False).run(self.connection)

class WaitForTable(utils.PerformContinuousAction):
    def runAction(self):
        tableName = os.path.splitext(os.path.basename(__file__))[0]
        if 'tableName' in self.kwargs:
            tableName = self.kwargs['tableName']
        timeout = 10
        if 'timeout' in self.kwargs:
            timeout = self.kwargs['timeout']
        deadline = time.time() + timeout

        while time.time() < deadline:
            try:
                r.table(tableName).limit(1).run(self.connection)
                break
            except r.RqlRuntimeError:
                pass
            except Exception, e:
                self.recordError(e)
                break
        if time.time() >= deadline:
            self.recordError('Timed out after waiting %s seconds for table %s to be read' % (timeout, tableName))

# -- run the test

# - start filling the table

fillTableProcess = FillTable(connection=r.connect(host=server.host, port=server.driver_port))
time.sleep(3) # give it a moment to have something

# - start reading the table

readTableProcess = utils.PerformContinuousAction(connection=r.connect(host=server.host, port=server.driver_port), action=r.table(tableName).sample(1))

# - perform the shard

shardStartTime = time.time()
admin = http_admin.ClusterAccess(addresses=[(server.host, server.http_port)])
admin.add_table_shard(tableName, '4')

# -- wait for the table to be ready

waitTableTimeout = 10
waitTableProcess = WaitForTable(connection=r.connect(host=server.host, port=server.driver_port), database=databaseName, timeout=waitTableTimeout)
waitTableProcess.join(timeout=waitTableTimeout)
if waitTableProcess.errorCount != 0:
    allPassed = False
    for errorMessage in waitTableProcess.recordedErrors:
    	sys.stderr.write('Failure waiting for table to shard: %s\n' % errorMessage)
else:
    print('Success: %.2f seconds after shard command the table was ready' % ((waitTableProcess.startTime - shardStartTime) + waitTableProcess.durration))

# -- wind down the processes

time.sleep(1) # another second to add more data

fillTableProcess.stop()
readTableProcess.stop()

# -- report on errors

print('Created %d records, %d read, in %.2f seconds' % (fillTableProcess.sucessCount, readTableProcess.sucessCount, fillTableProcess.durration))
allPassed = True;

# - fill

for errorMessage, errorCount in fillTableProcess.errorSummary().items():
	allPassed = False
	sys.stderr.write('Failure while writing: %s x %s\n' % (errorCount, errorMessage))

# - read

for errorMessage, errorCount in readTableProcess.errorSummary().items():
	allPassed = False
	sys.stderr.write('Failure while reading: %s x %s\n' % (errorCount, errorMessage))

# - connection is still valid

try:
	r.db_list().run(connection)
	print('Success: conection is still valid')
except r.errors.RqlDriverError:
	allPassed = False
	sys.stderr.write('Failure: The database connnection went stale\n')
	r.connect(host=server.host, port=server.driver_port)

# - everything made it to the database that we expected

try:
    actualRecordCount = r.table(tableName).count().run(connection)
    if actualRecordCount != fillTableProcess.sucessCount:
        allPassed = False
        sys.stderr.write('Failure: The count of records in the table (%d) does not match the number we added (%d)\n' % (actualRecordCount, fillTableProcess.sucessCount))
    else:
        print('Success: correct number of records: %d' % actualRecordCount)
    
    expectedSum = (fillTableProcess.sucessCount * (fillTableProcess.sucessCount + 1))/2
    actualSum = r.table(tableName).sum('data').run(connection)
    if expectedSum != actualSum:
        allPassed = False
        sys.stderr.write('Failure: The sum of the data in the table (%d) does not match the number we expected (%d)\n' % (actualSum, expectedSum))
    else:
        print('Success: correct sum of records: %d' % expectedSum)
except Exception, e:
    allPassed = False
    sys.stderr.write('Failure: unable to connect to the table to review data: %s %s' % (e.__class__.__name__, str(e)))
    time.sleep(600)

# -- wind down the server

server.check_and_stop()

# --

if allPassed is False:
	sys.exit('Test failed!')

print('Test passed')
