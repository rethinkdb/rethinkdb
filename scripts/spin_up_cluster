#!/usr/bin/python
import commands
import getpass
import os
import subprocess
import signal
import time
import random
import sys

names = """Aphrodite
Apollo
Ares
Artemis
Athena
Demeter
Dionysus
Hades
Hephaestus
Hera
Hermes
Hestia
Poseidon
Zeus
Aether
Ananke
Erebos
Gaia
Hemera
Chaos
Chronos
Nesoi
Nyx
Uranus
Ourea
Phanes
Pontus
Tartarus
Thalassa
Hyperion
Lapetus
Coeus
Crius
Cronus
Mnemosyne
Oceanus
Phoebe
Rhea
Tethys
Themis
Asteria
Astraeus
Atlas
Aura
Dione
Eos
Epimetheus
Eurybia
Eurynome
Helios
Clumene
Lelantos
Leto
Menoetius
Metis
Ophion
Phallas
Perses
Prometheus
Selene
Styx""".splitlines()


def usage():
    print os.sys.argv[0], "p N [data_root_directory] [--keep] [--copy_old]"
    print """Where: 
    p is the port you want the cluster to use 
    N is the number of machines you want in the cluster
    data_root_directory is the directory where RethinkDB will store each server data
    --keep preserve the data directories between runs (by default they are deleted)"""


if len(os.sys.argv) < 3:
    usage()
    exit(1)

port = int(os.sys.argv[1])
n_machines = int(os.sys.argv[2])
if n_machines < 1:
    usage()
    exit(1)
else:
    parent_dir = ''
    keep_data = False
    for opt in os.sys.argv[3:]:
        if opt == '--keep':
            keep_data = True
        else:
            parent_dir = opt
    kids = []
    machine_names = random.sample(names, n_machines)
    for i, machine_name in enumerate(machine_names):
        directory = os.path.join(parent_dir, "cluster_directory_%d" % i)
        # cleanup the directory
        if not keep_data:
            os.system("rm -rf " + directory)
        binary = "../build/debug/rethinkdb"
        if (i == 0):
            cl = [binary, "--port", str(port), "--directory", directory, "--name", machine_name, "--port-offset", str(i+port)]
        else:
            cl = [binary, "--port", str(port+i), "--directory", directory, "--name", machine_name, "--join", "newton:%d" % port, "--port-offset", str(i+port)]
        print ' '.join(cl)
        kids += [subprocess.Popen(cl, stdout=sys.stdout, stderr=sys.stderr)]
        time.sleep(1)

    time.sleep(1)
    print "CTRL-C to kill me http requests can be sent to ports:",
    for i in range(n_machines):
        if i != 0:
            print ",",

        print port + (i * 2) + 1,

    print ""

    sys.stdout.flush()
    sys.stderr.flush()

    try:
        signal.pause()
    except:
        for kid in kids:
            kid.terminate()
