// Generated by CoffeeScript 1.3.3
(function() {
  var Builtin, CreateTable, Helpers, JavascriptServer, MetaQuery, Query, ReadQuery, TableRef, Term, TermCall, TermGetByKey, TermTable, VarTermTuple, WriteQuery, WriteQueryInsert, display_result, test, test_all,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Handlebars.registerHelper('print_safe', function(str) {
    if (str != null) {
      return new Handlebars.SafeString(str);
    } else {
      return "";
    }
  });

  Handlebars.registerHelper('pluralize_noun', function(noun, num, capitalize) {
    var ends_with_y, result;
    ends_with_y = noun.substr(-1) === 'y';
    if (num === 1) {
      result = noun;
    } else {
      if (ends_with_y && (noun !== 'key')) {
        result = noun.slice(0, noun.length - 1) + "ies";
      } else if (noun.substr(-1) === 's') {
        result = noun + "es";
      } else {
        result = noun + "s";
      }
    }
    if (capitalize === true) {
      result = result.charAt(0).toUpperCase() + result.slice(1);
    }
    return result;
  });

  this.module = function(names, fn) {
    var space, _name;
    if (typeof names === 'string') {
      names = names.split('.');
    }
    space = this[_name = names.shift()] || (this[_name] = {});
    space.module || (space.module = this.module);
    if (names.length) {
      return space.module(names, fn);
    } else {
      return fn.call(space);
    }
  };

  $(window).load(function() {
    this.current_view = new DataExplorerView.Container({
      can_extend: false,
      local_connect: true
    });
    $('#dataexplorer_container').html(this.current_view.render().el);
    this.current_view.call_codemirror();
    return js_server.local_server['test'] = {
      'test': {
        data: {},
        options: {
          cache_size: 1073741824,
          datacenter: null,
          primary_key: 'id'
        }
      }
    };
  });

  Helpers = (function() {

    function Helpers() {
      this.generate_uuid = __bind(this.generate_uuid, this);

    }

    Helpers.prototype.generate_uuid = function() {
      var result;
      result = (Math.random() + '').slice(2) + (Math.random() + '').slice(2);
      result = CryptoJS.SHA1(result) + '';
      result = result.slice(0, 8) + '-' + result.slice(8, 12) + '-' + result.slice(12, 16) + '-' + result.slice(16, 20) + '-' + result.slice(20, 32);
      return result;
    };

    return Helpers;

  })();

  Builtin = (function() {

    function Builtin(data) {
      this.data = data;
    }

    Builtin.prototype.evaluate = function(server, args) {
      var response, result, term, term_raw, type, _i, _j, _len, _len1, _ref, _ref1;
      console.log(args);
      type = this.data.getType();
      switch (type) {
        case 1:
          response = new Response;
          if (args[0].getType() !== 9) {
            response.setStatusCode(103);
            response.setErrorMessage('Not can only be called on a boolean');
            return response;
          }
          response.setStatusCode(1);
          response.addResponse(!args[0].getValuebool());
          return response;
        case 14:
          response = new Response;
          if ((args[0].getType() !== 6 && args[0].getType() !== 10) || (args[1].getType() !== 6 && args[1].getType() !== 10) || (args[0].getType() !== args[1].getType())) {
            response.setStatusCode(103);
            response.setErrorMessage('Can only ADD numbers with number and arrays with arrays');
            return response;
          }
          if (args[0].getType() === 6) {
            result = args[0].getNumber() + args[1].getNumber();
          } else if (args[0].getType() === 10) {
            result = [];
            _ref = args[0].arrayArray();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              term_raw = _ref[_i];
              term = new Term(term_raw);
              result.push(JSON.parse(term.evaluate(server).getResponse()));
            }
            _ref1 = args[1].arrayArray();
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              term_raw = _ref1[_j];
              term = new Term(term_raw);
              result.push(JSON.parse(term.evaluate(server).getResponse()));
            }
          }
          response.setStatusCode(1);
          response.addResponse(JSON.stringify(result));
          return response;
        case 15:
          response = new Response;
          if (args[0].getType() !== 6 || args[1].getType() !== 6) {
            response.setStatusCode(103);
            response.setErrorMessage('All operands to SUBSTRACT must be numbers');
            return response;
          }
          result = args[0].getNumber() - args[1].getNumber();
          response.setStatusCode(1);
          response.addResponse(JSON.stringify(result));
          return response;
        case 16:
          response = new Response;
          if (args[0].getType() !== 6 || args[1].getType() !== 6) {
            response.setStatusCode(103);
            response.setErrorMessage('All operands to MULTIPLY must be numbers');
            return response;
          }
          result = args[0].getNumber() * args[1].getNumber();
          response.setStatusCode(1);
          response.addResponse(JSON.stringify(result));
          return response;
        case 17:
          response = new Response;
          if (args[0].getType() !== 6 || args[1].getType() !== 6) {
            response.setStatusCode(103);
            response.setErrorMessage('All operands to DIVIDE  must be numbers');
            return response;
          }
          result = args[0].getNumber() / args[1].getNumber();
          result = parseFloat(result.toFixed(6));
          response.setStatusCode(1);
          response.addResponse(JSON.stringify(result));
          return response;
        case 18:
          response = new Response;
          if (args[0].getType() !== 6 || args[1].getType() !== 6) {
            response.setStatusCode(103);
            response.setErrorMessage('All operands to DIVIDE  must be numbers');
            return response;
          }
          result = args[0].getNumber() % args[1].getNumber();
          response.setStatusCode(1);
          response.addResponse(JSON.stringify(result));
          return response;
      }
    };

    return Builtin;

  })();

  CreateTable = (function() {

    function CreateTable(data) {
      this.evaluate = __bind(this.evaluate, this);
      this.data = data;
    }

    CreateTable.prototype.evaluate = function(server) {
      var cache_size, datacenter, options, primary_key, table_ref;
      datacenter = this.data.getDatacenter();
      table_ref = new TableRef(this.data.getTableRef());
      primary_key = this.data.getPrimaryKey();
      cache_size = this.data.getCacheSize();
      options = {
        datacenter: (datacenter != null ? datacenter : void 0),
        primary_key: (primary_key != null ? primary_key : void 0),
        cache_size: (cache_size != null ? cache_size : void 0)
      };
      return table_ref.create(server, options);
    };

    return CreateTable;

  })();

  WriteQueryInsert = (function() {

    function WriteQueryInsert(data) {
      this.data = data;
    }

    WriteQueryInsert.prototype.insert = function(server) {
      var data_to_insert, generated_keys, internal_key, json_object, key, new_id, response, response_data, table_ref, term_to_insert, term_to_insert_raw, _i, _len;
      table_ref = new TableRef(this.data.getTableRef());
      data_to_insert = this.data.termsArray();
      response_data = {
        inserted: 0,
        errors: 0
      };
      generated_keys = [];
      for (_i = 0, _len = data_to_insert.length; _i < _len; _i++) {
        term_to_insert_raw = data_to_insert[_i];
        term_to_insert = new Term(term_to_insert_raw);
        json_object = JSON.parse(term_to_insert.evaluate(server).getResponse());
        if (table_ref.get_primary_key(server) in json_object) {
          key = json_object[table_ref.get_primary_key(server)];
          if (typeof key === 'number') {
            internal_key = 'N' + key;
          } else if (typeof key === 'string') {
            internal_key = 'S' + key;
          } else {
            if (!('first_error' in response_data)) {
              response_data.first_error = "Cannot insert row " + (JSON.stringify(json_object, void 0, 1)) + " with primary key " + (JSON.stringify(key, void 0, 1)) + " of non-string, non-number type.";
            }
            response_data.errors++;
            continue;
          }
          if (internal_key in server[table_ref.get_db_name()][table_ref.get_table_name()]['data']) {
            response_data.errors++;
            if (!('first_error' in response_data)) {
              response_data.first_error = "Duplicate primary key " + (table_ref.get_primary_key(server)) + " in " + (JSON.stringify(json_object, void 0, 1));
            }
          } else {
            server[table_ref.get_db_name()][table_ref.get_table_name()]['data'][internal_key] = json_object;
            response_data.inserted++;
          }
        } else {
          new_id = Helpers.prototype.generate_uuid();
          internal_key = 'S' + new_id;
          if (internal_key in server[table_ref.get_db_name()][table_ref.get_table_name()]['data']) {
            response_data.errors++;
            if (!('first_error' in response_data)) {
              response_data.first_error = "Generated key was a duplicate either you've won the uuid lottery or you've intentionnaly tried to predict the keys rdb would generate... in which case well done.";
            }
          } else {
            json_object[table_ref.get_primary_key(server)] = new_id;
            server[table_ref.get_db_name()][table_ref.get_table_name()]['data'][internal_key] = json_object;
            response_data.inserted++;
            generated_keys.push(new_id);
          }
        }
      }
      if (generated_keys.length > 0) {
        response_data.generated_keys = generated_keys;
      }
      response = new Response;
      response.setStatusCode(1);
      response.addResponse(JSON.stringify(response_data));
      return response;
    };

    return WriteQueryInsert;

  })();

  MetaQuery = (function() {

    function MetaQuery(data) {
      this.data = data;
    }

    MetaQuery.prototype.evaluate = function(server) {
      var create_table, database, db_name, response, result, table, table_to_drop, type;
      type = this.data.getType();
      switch (type) {
        case 1:
          db_name = this.data.getDbName();
          if (/[a-zA-Z0-9_]+/.test(db_name) === false) {
            response = new Response;
            response.setStatusCode(102);
            response.setErrorMessage("Bad Query: Invalid name 'f-f'.  (Use A-Za-z0-9_ only.).");
            return response;
          }
          if (db_name in server) {
            response = new Response;
            response.setStatusCode(103);
            response.setErrorMessage("Error: Error during operation `CREATE_DB " + db_name + "`: Entry already exists.");
            return response;
          }
          server[db_name] = {};
          response = new Response;
          response.setStatusCode(0);
          return response;
        case 2:
          db_name = this.data.getDbName();
          if (/[a-zA-Z0-9_]+/.test(db_name) === false) {
            response = new Response;
            response.setStatusCode(102);
            response.setErrorMessage("Bad Query: Invalid name 'f-f'.  (Use A-Za-z0-9_ only.).");
            return response;
          }
          if (!(db_name in server)) {
            response = new Response;
            response.setStatusCode(103);
            response.setErrorMessage("Error: Error during operation `DROP_DB " + db_name + "`: No entry with that name");
            return response;
          }
          delete server[db_name];
          response = new Response;
          response.setStatusCode(0);
          return response;
        case 3:
          response = new Response;
          result = [];
          for (database in server) {
            response.addResponse(JSON.stringify(database));
          }
          response.setStatusCode(3);
          return response;
        case 4:
          create_table = new CreateTable(this.data.getCreateTable());
          return create_table.evaluate(server);
        case 5:
          table_to_drop = new TableRef(this.data.getDropTable());
          return table_to_drop.drop(server);
        case 6:
          response = new Response;
          result = [];
          for (table in server[this.data.getDbName()]) {
            response.addResponse(JSON.stringify(table));
          }
          response.setStatusCode(3);
          return response;
      }
    };

    return MetaQuery;

  })();

  ReadQuery = (function() {

    function ReadQuery(data) {
      this.evaluate = __bind(this.evaluate, this);
      this.data = data;
    }

    ReadQuery.prototype.evaluate = function(server) {
      var term;
      term = new Term(this.data.getTerm());
      return term.evaluate(server);
    };

    return ReadQuery;

  })();

  Query = (function() {

    function Query(data) {
      this.evaluate = __bind(this.evaluate, this);
      this.data = data;
    }

    Query.prototype.evaluate = function(server) {
      var meta_query, read_query, type, write_query;
      type = this.data.getType();
      switch (type) {
        case 1:
          read_query = new ReadQuery(this.data.getReadQuery());
          return read_query.evaluate(server);
        case 2:
          write_query = new WriteQuery(this.data.getWriteQuery());
          return write_query.write(server);
        case 5:
          meta_query = new MetaQuery(this.data.getMetaQuery());
          return meta_query.evaluate(server);
      }
    };

    return Query;

  })();

  TableRef = (function() {

    function TableRef(data) {
      this.drop = __bind(this.drop, this);

      this.create = __bind(this.create, this);

      this.get_primary_key = __bind(this.get_primary_key, this);

      this.get_use_outdated = __bind(this.get_use_outdated, this);

      this.get_table_name = __bind(this.get_table_name, this);

      this.get_db_name = __bind(this.get_db_name, this);
      this.data = data;
    }

    TableRef.prototype.get_db_name = function() {
      return this.data.getDbName();
    };

    TableRef.prototype.get_table_name = function() {
      return this.data.getTableName();
    };

    TableRef.prototype.get_use_outdated = function() {
      return this.data.getUseOutdated();
    };

    TableRef.prototype.get_primary_key = function(server) {
      var db_name, table_name;
      db_name = this.data.getDbName();
      table_name = this.data.getTableName();
      return server[db_name][table_name]['options']['primary_key'];
    };

    TableRef.prototype.create = function(server, options) {
      var db_name, response, table_name;
      db_name = this.data.getDbName();
      table_name = this.data.getTableName();
      if (/[a-zA-Z0-9_]+/.test(db_name) === false || /[a-zA-Z0-9_]+/.test(table_name) === false) {
        response = new Response;
        response.setStatusCode(102);
        response.setErrorMessage("Bad Query: Invalid name 'f-f'.  (Use A-Za-z0-9_ only.).");
        return response;
      }
      if (!db_name in server) {
        response = new Response;
        response.setStatusCode(103);
        response.setErrorMessage("Error: Error during operation `FIND_DATABASE " + db_name + "`: No entry with that name");
        return response;
      } else if (table_name in server[db_name]) {
        response = new Response;
        response.setStatusCode(103);
        response.setErrorMessage("Error: Error during operation `CREATE_TABLE " + table_name + "`: Entry already exists");
        return response;
      } else {
        if (!(options.datacenter != null)) {
          options.datacenter = null;
        }
        if (!(options.primary_key != null)) {
          options.primary_key = 'id';
        }
        if (!(options.cache_size != null)) {
          options.cache_size = 1024 * 1024 * 1024;
        }
        server[db_name][table_name] = {
          options: options,
          data: {}
        };
        response = new Response;
        response.setStatusCode(0);
        return response;
      }
    };

    TableRef.prototype.drop = function(server) {
      var db_name, response, table_name;
      db_name = this.data.getDbName();
      table_name = this.data.getTableName();
      if (!db_name in server) {
        response = new Response;
        response.setStatusCode(103);
        response.setErrorMessage("Error: Error during operation `FIND_DATABASE " + db_name + "`: No entry with that name");
        return response;
      } else if (!table_name in server[db_name]) {
        response = new Response;
        response.setStatusCode(103);
        response.setErrorMessage("Error: Error during operation `FIND_TABLE " + table_name + "`: No entry with that name");
        return response;
      } else {
        delete server[db_name][table_name];
        response = new Response;
        response.setStatusCode(0);
        return response;
      }
    };

    TableRef.prototype.evaluate = function(server) {
      var db_name, document, id, response, table_name, _ref;
      db_name = this.data.getDbName();
      table_name = this.data.getTableName();
      if (/[a-zA-Z0-9_]+/.test(db_name) === false || /[a-zA-Z0-9_]+/.test(table_name) === false) {
        response = new Response;
        response.setStatusCode(102);
        response.setErrorMessage("Bad Query: Invalid name 'f-f'.  (Use A-Za-z0-9_ only.).");
        return response;
      }
      if (!(server[db_name] != null)) {
        response = new Response;
        response.setStatusCode(103);
        response.setErrorMessage("Error: Error during operation `EVAL_DB " + db_name + "`: No entry with that name");
        return response;
      }
      if (!(server[db_name][table_name] != null)) {
        response = new Response;
        response.setStatusCode(103);
        response.setErrorMessage("Error: Error during operation `EVAL_TABLE " + db_name + "`: No entry with that name");
        return response;
      }
      response = new Response;
      _ref = server[db_name][table_name]['data'];
      for (id in _ref) {
        document = _ref[id];
        response.addResponse(JSON.stringify(document));
      }
      response.setStatusCode(3);
      return response;
    };

    TableRef.prototype.get_term = function(server, term) {
      var db_name, internal_key, key, response, table_name;
      db_name = this.data.getDbName();
      table_name = this.data.getTableName();
      key = JSON.parse(term.evaluate().getResponse());
      if (typeof key === 'number') {
        internal_key = 'N' + key;
      } else if (typeof key === 'string') {
        internal_key = 'S' + key;
      } else {
        response = new Response;
        response.setStatusCode(103);
        response.setErrorMessage("Runtime Error: Primary key must be a number or a string, not " + key);
        return response;
      }
      response = new Response;
      if (server[db_name][table_name]['data'][internal_key] != null) {
        response.addResponse(JSON.stringify(server[db_name][table_name]['data'][internal_key]));
      }
      response.setStatusCode(3);
      return response;
    };

    return TableRef;

  })();

  Term = (function() {

    function Term(data) {
      this.data = data;
    }

    Term.prototype.evaluate = function(server) {
      var new_term, new_var_term_tuple, response, result, term_call, term_data, term_get_by_key, term_table, type, _i, _j, _len, _len1, _ref, _ref1;
      type = this.data.getType();
      switch (type) {
        case 0:
          response = new Response;
          response.setStatusCode(1);
          response.addResponse(JSON.stringify(null));
          return response;
        case 3:
          term_call = new TermCall(this.data.getCall());
          return term_call.evaluate(server);
        case 6:
          response = new Response;
          response.setStatusCode(1);
          response.addResponse(JSON.stringify(this.data.getNumber()));
          return response;
        case 7:
          response = new Response;
          response.setStatusCode(1);
          response.addResponse(JSON.stringify(this.data.getValuestring()));
          return response;
        case 9:
          response = new Response;
          response.setStatusCode(1);
          response.addResponse(JSON.stringify(this.data.getValuebool()));
          return response;
        case 10:
          response = new Response;
          response.setStatusCode(1);
          result = [];
          _ref = this.data.arrayArray();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            term_data = _ref[_i];
            new_term = new Term(term_data);
            result.push(JSON.parse(new_term.evaluate().getResponse()));
          }
          response.addResponse(JSON.stringify(result));
          return response;
        case 11:
          response = new Response;
          response.setStatusCode(1);
          result = {};
          _ref1 = this.data.objectArray();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            term_data = _ref1[_j];
            new_var_term_tuple = new VarTermTuple(term_data);
            result[new_var_term_tuple.get_key()] = JSON.parse(new_var_term_tuple.evaluate().getResponse());
          }
          response.addResponse(JSON.stringify(result));
          return response;
        case 12:
          term_get_by_key = new TermGetByKey(this.data.getGetByKey());
          return term_get_by_key.evaluate(server);
        case 13:
          term_table = new TermTable(this.data.getTable());
          return term_table.evaluate(server);
        case 14:
          response = new Response;
          response.setStatusCode(1);
          response.addResponse(JSON.stringify(eval('(function(){' + this.data.getJavascript() + ';})()')));
          return response;
      }
    };

    return Term;

  })();

  TermCall = (function() {

    function TermCall(data) {
      this.data = data;
    }

    TermCall.prototype.evaluate = function(server) {
      var args, builtin;
      builtin = new Builtin(this.data.getBuiltin());
      args = this.data.argsArray();
      return builtin.evaluate(server, args);
    };

    return TermCall;

  })();

  TermGetByKey = (function() {

    function TermGetByKey(data) {
      this.data = data;
    }

    TermGetByKey.prototype.evaluate = function(server) {
      var table_ref, term;
      table_ref = new TableRef(this.data.getTableRef());
      term = new Term(this.data.getKey());
      return table_ref.get_term(server, term);
    };

    return TermGetByKey;

  })();

  TermTable = (function() {

    function TermTable(data) {
      this.data = data;
    }

    TermTable.prototype.evaluate = function(server) {
      var table_ref;
      table_ref = new TableRef(this.data.getTableRef());
      return table_ref.evaluate(server);
    };

    return TermTable;

  })();

  VarTermTuple = (function() {

    function VarTermTuple(data) {
      this.evaluate = __bind(this.evaluate, this);

      this.get_key = __bind(this.get_key, this);
      this.data = data;
    }

    VarTermTuple.prototype.get_key = function() {
      return this.data.getVar();
    };

    VarTermTuple.prototype.evaluate = function(server) {
      var term;
      term = new Term(this.data.getTerm());
      return term.evaluate(server);
    };

    return VarTermTuple;

  })();

  WriteQuery = (function() {

    function WriteQuery(data) {
      this.data = data;
    }

    WriteQuery.prototype.write = function(server) {
      var insert_query, type;
      type = this.data.getType();
      switch (type) {
        case 4:
          insert_query = new WriteQueryInsert(this.data.getInsert());
          return insert_query.insert(server);
      }
    };

    return WriteQuery;

  })();

  /*
  response = new Response
  response.setStatusCode 103
  response.setErrorMessage 
  return response
  */


  JavascriptServer = (function() {

    function JavascriptServer() {
      this.execute = __bind(this.execute, this);

      this.pb2query = __bind(this.pb2query, this);

      this.set_serializer = __bind(this.set_serializer, this);

      this.set_descriptor = __bind(this.set_descriptor, this);

      this.print_all = __bind(this.print_all, this);
      this.local_server = {};
      this.set_descriptor();
      this.set_serializer();
    }

    JavascriptServer.prototype.print_all = function() {
      return console.log(this.local_server);
    };

    JavascriptServer.prototype.set_descriptor = function() {
      return this.descriptor = window.Query.getDescriptor();
    };

    JavascriptServer.prototype.set_serializer = function() {
      return this.serializer = new goog.proto2.WireFormatSerializer();
    };

    JavascriptServer.prototype.buffer2pb = function(buffer) {
      var expanded_array;
      expanded_array = new Uint8Array(buffer);
      return expanded_array.subarray(4);
    };

    JavascriptServer.prototype.pb2query = function(intarray) {
      return this.serializer.deserialize(this.descriptor, intarray);
    };

    JavascriptServer.prototype.execute = function(data) {
      var data_query, final_response, length, query, response, serialized_response;
      data_query = this.pb2query(this.buffer2pb(data));
      console.log('Server: deserialized query');
      console.log(data_query);
      query = new Query(data_query);
      response = query.evaluate(this.local_server);
      response.setToken(data_query.getToken());
      console.log('Server: response');
      console.log(response);
      serialized_response = this.serializer.serialize(response);
      length = serialized_response.byteLength;
      final_response = new Uint8Array(length + 4);
      final_response[0] = length % 256;
      final_response[1] = Math.floor(length / 256);
      final_response[2] = Math.floor(length / (256 * 256));
      final_response[3] = Math.floor(length / (256 * 256 * 256));
      final_response.set(serialized_response, 4);
      console.log('Server: serialized response');
      console.log(final_response);
      return final_response;
    };

    return JavascriptServer;

  })();

  $(document).ready(function() {
    /*
        window.r = rethinkdb
        window.R = r.R
    
        window.js_server = new JavascriptServer
        r.fake_connect(window.js_server)
    
        window.q = $.extend true, {}, r
        window.Q = q.R
    
        server = {
            host: window.location.hostname,
            port: parseInt(window.location.port)-888+1000
        }
        
    
        q.connect server
    
        setTimeout test_all, 500
    */

  });

  test_all = function() {
    var queries;
    queries = [
      {
        local: "r.dbList().run()",
        server: "q.dbList().run()"
      }
    ];
    return test(queries, 0);
  };

  test = function(queries, i) {
    var local_cursor, server_cursor;
    local_cursor = eval(queries[i].local);
    server_cursor = eval(queries[i].server);
    if (_.isEqual(local_cursor, server_cursor) === false) {
      console.log('~~~~~~~~~~~~~~~~~~~~~~~~~~~');
      console.log('Local cursor');
      console.log(local_cursor);
      console.log('Server cursor');
      console.log(server_cursor);
      return display_result(i, false);
    } else {
      return display_result(i, true);
    }
  };

  display_result = function(i, is_success) {
    var li_template;
    if (is_success === true) {
      li_template = '<li>Query ' + i + ': Success</li>';
    } else {
      li_template = '<li>Query ' + i + ': Fail</li>';
    }
    return $('#result').append(li_template);
  };

  module('DataExplorerView', function() {
    this.Container = (function(_super) {

      __extends(Container, _super);

      function Container() {
        this.destroy = __bind(this.destroy, this);

        this.display_full = __bind(this.display_full, this);

        this.display_normal = __bind(this.display_normal, this);

        this.toggle_size = __bind(this.toggle_size, this);

        this.handle_gutter_click = __bind(this.handle_gutter_click, this);

        this.call_codemirror = __bind(this.call_codemirror, this);

        this.render = __bind(this.render, this);

        this.initialize = __bind(this.initialize, this);

        this.reconnect = __bind(this.reconnect, this);

        this.error_on_connect = __bind(this.error_on_connect, this);

        this.success_on_connect = __bind(this.success_on_connect, this);

        this.connect = __bind(this.connect, this);

        this.clear_query = __bind(this.clear_query, this);

        this.separate_queries = __bind(this.separate_queries, this);

        this.execute_query = __bind(this.execute_query, this);

        this.callback_multiple_queries = __bind(this.callback_multiple_queries, this);

        this.show_more_results = __bind(this.show_more_results, this);

        this.callback_query = __bind(this.callback_query, this);

        this.append_suggestion = __bind(this.append_suggestion, this);

        this.extract_last_function = __bind(this.extract_last_function, this);

        this.extract_last_function_for_description = __bind(this.extract_last_function_for_description, this);

        this.handle_keypress = __bind(this.handle_keypress, this);

        this.expand_textarea = __bind(this.expand_textarea, this);

        this.add_description = __bind(this.add_description, this);

        this.extract_database_used = __bind(this.extract_database_used, this);

        this.extend_description = __bind(this.extend_description, this);

        this.show_suggestion_description = __bind(this.show_suggestion_description, this);

        this.show_suggestion = __bind(this.show_suggestion, this);

        this.move_suggestion = __bind(this.move_suggestion, this);

        this.compute_extra_lines = __bind(this.compute_extra_lines, this);

        this.set_char_per_line = __bind(this.set_char_per_line, this);

        this.hide_suggestion = __bind(this.hide_suggestion, this);

        this.position_cursor_after_click = __bind(this.position_cursor_after_click, this);

        this.select_suggestion = __bind(this.select_suggestion, this);

        this.position_cursor = __bind(this.position_cursor, this);

        this.highlight_suggestion = __bind(this.highlight_suggestion, this);

        this.mouseout_suggestion = __bind(this.mouseout_suggestion, this);

        this.mouseover_suggestion = __bind(this.mouseover_suggestion, this);

        this.write_suggestion = __bind(this.write_suggestion, this);

        this.show_or_hide_arrow = __bind(this.show_or_hide_arrow, this);

        this.save_tab = __bind(this.save_tab, this);
        return Container.__super__.constructor.apply(this, arguments);
      }

      Container.prototype.id = 'dataexplorer';

      Container.prototype.template = Handlebars.compile($('#dataexplorer_view-template').html());

      Container.prototype.description_template = Handlebars.compile($('#dataexplorer-description-template').html());

      Container.prototype.template_suggestion_name = Handlebars.compile($('#dataexplorer_suggestion_name_li-template').html());

      Container.prototype.alert_connection_fail_template = Handlebars.compile($('#alert-connection_fail-template').html());

      Container.prototype.alert_reconnection_success_template = Handlebars.compile($('#alert-reconnection_success-template').html());

      Container.prototype.databases_suggestions_template = Handlebars.compile($('#dataexplorer-databases_suggestions-template').html());

      Container.prototype.namespaces_suggestions_template = Handlebars.compile($('#dataexplorer-namespaces_suggestions-template').html());

      Container.prototype.events = {
        'click .CodeMirror': 'handle_keypress',
        'mousedown .suggestion_name_li': 'select_suggestion',
        'mouseover .suggestion_name_li': 'mouseover_suggestion',
        'mouseout .suggestion_name_li': 'mouseout_suggestion',
        'click .clear_query': 'clear_query',
        'click .execute_query': 'execute_query',
        'click .change_size': 'toggle_size',
        'click #reconnect': 'reconnect',
        'click .more_results': 'show_more_results',
        'click .link_to_tree_view': 'save_tab',
        'click .link_to_table_view': 'save_tab',
        'click .link_to_raw_view': 'save_tab',
        'click .close': 'close_alert'
      };

      Container.prototype.save_tab = function(event) {
        return this.results_view.set_view(this.$(event.target).data('view'));
      };

      Container.prototype.displaying_full_view = false;

      Container.prototype.close_alert = function(event) {
        event.preventDefault();
        return $(event.currentTarget).parent().slideUp('fast', function() {
          return $(this).remove();
        });
      };

      Container.prototype.map_state = {
        '': '',
        'r': 'r',
        'db': 'db',
        'table': 'table',
        'get': 'view',
        'filter': 'stream',
        'length': 'value',
        'map': 'array',
        'slice': 'stream',
        'orderby': 'stream',
        'distinct': 'array',
        'reduce': 'stream',
        'pluck': 'stream',
        'extend': 'array',
        'expr': 'expr',
        'R': 'expr',
        'add': 'expr',
        'sub': 'expr',
        'mul': 'expr',
        'div': 'expr',
        'mod': 'expr',
        'eq': 'expr',
        'ne': 'expr',
        'lt': 'expr',
        'le': 'expr',
        'gt': 'expr',
        'ge': 'expr',
        'not': 'expr',
        'and': 'expr',
        'or': 'expr',
        'range': 'stream'
      };

      Container.prototype.descriptions = {
        'get(': {
          name: 'get',
          args: '( id )',
          description: 'Get the document which primary key has the value id'
        },
        'filter(': {
          name: 'filter',
          args: '( predicate )',
          description: 'Filter a stream. A document passes the filter if the predicate returns true'
        },
        'map(': {
          name: 'map',
          args: '( attribute )',
          description: 'Map a stream to an array'
        },
        'slice(': {
          name: 'slice',
          args: '( start, end )',
          description: 'Returned a sliced array stating from start to end'
        },
        'orderby(': {
          name: 'orderby',
          args: '( expression )',
          description: 'order the stream with the expression'
        },
        'distinct(': {
          name: 'distinct',
          args: '( expression )',
          description: 'Formating text is not funny. I need a bunny. I need a hat first to make my bunny appear.'
        },
        'pluck(': {
          name: 'pluck',
          args: '( attribute )',
          description: 'Filter some attributes'
        },
        'extend(': {
          name: 'extend',
          args: '( object )',
          description: 'Extend something that I do not know'
        },
        'pickAttrs(': {
          name: 'pickAttrs',
          args: '( attribute_to pick... )',
          description: 'The VP debate is ridiculous. They should talk about serious issues...'
        },
        'del(': {
          name: 'del',
          args: '()',
          description: 'Delete all the rows returned by the query'
        },
        'table(': {
          name: 'table',
          args: '( table_name )',
          description: 'Select a table'
        },
        'list(': {
          name: 'list',
          args: '()',
          description: 'List all the data'
        },
        'create(': {
          name: 'create',
          args: '( table_name )',
          description: 'Create a new table'
        },
        'drop(': {
          name: 'drop',
          args: '()',
          description: 'Drop a table'
        },
        'insert(': {
          name: 'insert',
          args: '( document)',
          description: ' Insert a new document'
        },
        'dbCreate(': {
          name: 'dbCreate',
          args: '( database_name )',
          description: 'Create a database'
        },
        'db(': {
          name: 'db',
          args: '( database_name )',
          description: 'Select a database'
        },
        'dbDrop(': {
          name: 'dbDrop',
          args: '( database_name )',
          description: 'Drop a database'
        },
        'dbList(': {
          name: 'dbList',
          args: '()',
          description: 'list the databases'
        },
        'expr(': {
          name: 'expr',
          args: '( expression )',
          description: 'Create an expression'
        },
        'fn(': {
          name: 'fn',
          args: '( argument..., body )',
          descrition: 'Create a function'
        },
        'ifThenElse(': {
          name: 'ifThenElse',
          args: '( expression, callback_true, callback_false)',
          description: 'In French we say si ou sinon for if then else'
        },
        'let(': {
          name: 'let',
          args: '( arguments..., body)',
          description: 'Create a variable'
        },
        'length(': {
          name: 'length',
          args: '()',
          description: 'Return the length of the array'
        },
        'limit(': {
          name: 'limit',
          args: '( number )',
          description: 'Limit the number of results'
        },
        'r': {
          name: 'r',
          description: 'The main ReQL namespace.'
        },
        'R(': {
          name: 'R',
          args: '( attribute_string )',
          description: 'Select an attribute'
        },
        'add': {
          name: 'add',
          args: '( expression )',
          description: 'Add a value'
        },
        'sub(': {
          name: 'sub',
          args: '( expression )',
          description: 'Sub a value'
        },
        'mul(': {
          name: 'mul',
          args: '( expression )',
          description: 'Multiply a value'
        },
        'div(': {
          name: 'div',
          args: '( expression )',
          description: 'Divide something by something and youhouuuuuUUUuuu'
        },
        'mod(': {
          name: 'mod',
          args: '( expression )',
          description: 'Mod by a value'
        },
        'eq(': {
          name: 'eq',
          args: '( expression )',
          description: 'Check for equality'
        },
        'ne(': {
          name: 'ne',
          args: '( expression )',
          description: 'It is not really cool to format stuff, I am bored -_-'
        },
        'lt(': {
          name: 'lt',
          args: '( expression )',
          description: 'Less than'
        },
        'le(': {
          name: 'le',
          args: '( expression )',
          description: 'Less than'
        },
        'gt(': {
          name: 'gt',
          args: '( expression )',
          description: 'Greater than'
        },
        'ge(': {
          name: 'ge',
          args: '( expression )',
          description: 'Greater or equal'
        },
        'not(': {
          name: 'not',
          args: '( expression )',
          description: 'Not'
        },
        'and(': {
          name: 'and',
          args: '( expression )',
          description: 'And'
        },
        'or(': {
          name: 'or',
          args: '( expression )',
          description: 'Or means Gold in French. That is cool no?'
        },
        'run(': {
          name: 'run',
          args: '()',
          description: 'Run the query'
        }
      };

      Container.prototype.suggestions = {
        stream: ['get(', 'filter(', 'length(', 'map(', 'slice(', 'orderby(', 'distinct(', 'reduce(', 'pluck(', 'extend(', 'run('],
        view: ['pickAttrs(', 'del(', 'run('],
        db: ['table(', 'list(', 'create(', 'drop(', 'run('],
        table: ['insert(', 'get(', 'filter(', 'length(', 'map(', 'slice(', 'orderby(', 'distinct(', 'reduce(', 'pluck(', 'extend(', 'run('],
        r: ['db(', 'dbCreate(', 'table(', 'dbDrop(', 'dbList(', 'expr(', 'fn(', 'ifThenElse(', 'let(', 'run('],
        array: ['length(', 'limit(', 'run('],
        "": ['r', 'R('],
        expr: ['add(', 'sub(', 'mul(', 'div(', 'mod(', 'eq(', 'ne(', 'lt(', 'le(', 'gt(', 'ge(', 'not(', 'and(', 'or(', 'run(']
      };

      Container.prototype.line_height = 13;

      Container.prototype.num_char_per_line = 106;

      Container.prototype.default_num_char_per_line = 106;

      Container.prototype.current_suggestions = [];

      Container.prototype.current_highlighted_suggestion = -1;

      Container.prototype.current_conpleted_query = '';

      Container.prototype.query_first_part = '';

      Container.prototype.query_last_part = '';

      Container.prototype.show_or_hide_arrow = function() {
        if (this.$('.suggestion_name_list').css('display') === 'none' && this.$('.suggestion_description').css('display') === 'none') {
          return this.$('.arrow').hide();
        } else {
          return this.$('.arrow').show();
        }
      };

      Container.prototype.write_suggestion = function(suggestion_to_write) {
        return this.codemirror.setValue(this.query_first_part + this.current_completed_query + suggestion_to_write + this.query_last_part);
      };

      Container.prototype.mouseover_suggestion = function(event) {
        return this.highlight_suggestion(event.target.dataset.id);
      };

      Container.prototype.mouseout_suggestion = function(event) {
        return this.hide_suggestion_description();
      };

      Container.prototype.highlight_suggestion = function(id) {
        this.$('.suggestion_name_li').removeClass('suggestion_name_li_hl');
        this.$('.suggestion_name_li').eq(id).addClass('suggestion_name_li_hl');
        this.$('.suggestion_description').html(this.description_template(this.extend_description(this.current_suggestions[id])));
        return this.show_suggestion_description();
      };

      Container.prototype.position_cursor = function(position) {
        return this.codemirror.setCursor(position);
      };

      Container.prototype.select_suggestion = function(event) {
        var ch, saved_cursor, start_line_index, suggestion_to_write;
        saved_cursor = this.codemirror.getCursor();
        suggestion_to_write = this.$(event.target).html();
        this.write_suggestion(suggestion_to_write);
        start_line_index = (this.query_first_part + this.current_completed_query).lastIndexOf('\n');
        if (start_line_index === -1) {
          start_line_index = 0;
        } else {
          start_line_index += 1;
        }
        ch = (this.query_first_part + this.current_completed_query + suggestion_to_write).length - start_line_index;
        this.cursor = {
          line: saved_cursor.line,
          ch: ch
        };
        return setTimeout(this.position_cursor_after_click, 1);
      };

      Container.prototype.position_cursor_after_click = function() {
        this.codemirror.focus();
        this.position_cursor(this.cursor);
        return this.handle_keypress();
      };

      Container.prototype.hide_suggestion = function() {
        this.$('.suggestion_name_list').css('display', 'none');
        this.hide_suggestion_description();
        this.current_suggestions = [];
        return this.show_or_hide_arrow();
      };

      Container.prototype.hide_suggestion_description = function() {
        this.$('.suggestion_description').html('');
        this.$('.suggestion_description').css('display', 'none');
        return this.show_or_hide_arrow();
      };

      Container.prototype.set_char_per_line = function() {
        if (this.displaying_full_view === true) {
          return this.num_char_per_line = Math.floor((this.$('.CodeMirror-scroll').width() - 37) / 8);
        } else {
          return this.num_char_per_line = this.default_num_char_per_line;
        }
      };

      Container.prototype.compute_extra_lines = function() {
        var extra_lines, i, query_lines;
        query_lines = this.codemirror.getValue().split('\n');
        i = 0;
        extra_lines = 0;
        while (i < query_lines.length - 1) {
          extra_lines += Math.floor(query_lines[i].length / this.num_char_per_line);
          i++;
        }
        extra_lines += Math.floor(this.codemirror.getCursor().ch / this.num_char_per_line);
        return extra_lines;
      };

      Container.prototype.move_suggestion = function() {
        var margin_left, max_margin;
        margin_left = (this.codemirror.getCursor().ch % this.num_char_per_line) * 8 + 27;
        this.$('.arrow').css('margin-left', margin_left);
        if (margin_left < 200) {
          this.$('.suggestion_full_container').css('left', '0px');
        } else {
          max_margin = this.$('.CodeMirror-scroll').width() - 418;
        }
        if (margin_left > max_margin) {
          return this.$('.suggestion_full_container').css('left', (max_margin - 28) + 'px');
        } else {
          margin_left = Math.min(max_margin, Math.floor(margin_left / 100) * 100);
          return this.$('.suggestion_full_container').css('left', (margin_left - 100) + 'px');
        }
      };

      Container.prototype.show_suggestion = function() {
        var margin;
        margin = ((this.codemirror.getCursor().line + 1 + this.compute_extra_lines()) * this.line_height) + 'px';
        this.$('.suggestion_full_container').css('margin-top', margin);
        this.$('.arrow').css('margin-top', margin);
        this.$('.suggestion_name_list').css('display', 'block');
        this.move_suggestion();
        return this.show_or_hide_arrow();
      };

      Container.prototype.show_suggestion_description = function() {
        var margin;
        margin = ((this.codemirror.getCursor().line + 1 + this.compute_extra_lines()) * this.line_height) + 'px';
        this.$('.suggestion_full_container').css('margin-top', margin);
        this.$('.arrow').css('margin-top', margin);
        this.$('.suggestion_description').css('display', 'block');
        return this.show_or_hide_arrow();
      };

      Container.prototype.extend_description = function(fn) {
        var data, database_used, description, namespace, namespaces_available, _i, _len, _ref, _ref1, _ref2;
        if ((((_ref = this.options) != null ? _ref.can_extend : void 0) != null) && ((_ref1 = this.options) != null ? _ref1.can_extend : void 0) === false) {
          return this.descriptions[fn];
        }
        if (fn === 'db(') {
          description = _.extend({}, this.descriptions[fn]);
          if (databases.length === 0) {
            data = {
              no_database: true
            };
          } else {
            data = {
              no_database: false,
              databases_available: _.map(databases.models, function(database) {
                return database.get('name');
              })
            };
          }
          description.description += this.databases_suggestions_template(data);
        } else if (fn === 'table(') {
          database_used = this.extract_database_used();
          description = _.extend({}, this.descriptions[fn]);
          if (database_used.error === false) {
            namespaces_available = [];
            _ref2 = namespaces.models;
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              namespace = _ref2[_i];
              if (database_used.db_found === false || namespace.get('database') === database_used.id) {
                namespaces_available.push(namespace.get('name'));
              }
            }
            data = {
              namespaces_available: namespaces_available,
              no_namespace: namespaces_available.length === 0
            };
            if (database_used.name != null) {
              data.database_name = database_used.name;
            }
          } else {
            data = {
              error: database_used.error
            };
          }
          description.description += this.namespaces_suggestions_template(data);
        } else {
          description = this.descriptions[fn];
        }
        return description;
      };

      Container.prototype.extract_database_used = function() {
        var arg, char, database, db_name, end_arg_position, i, last_db_position, query_before_cursor, query_lines, _i, _j, _len, _ref, _ref1;
        query_lines = this.codemirror.getValue().split('\n');
        query_before_cursor = '';
        if (this.codemirror.getCursor().line > 0) {
          for (i = _i = 0, _ref = this.codemirror.getCursor().line - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            query_before_cursor += query_lines[i] + '\n';
          }
        }
        query_before_cursor += query_lines[this.codemirror.getCursor().line].slice(0, this.codemirror.getCursor().ch);
        last_db_position = query_before_cursor.lastIndexOf('.db(');
        if (last_db_position === -1) {
          return {
            db_found: false,
            error: false
          };
        } else {
          arg = query_before_cursor.slice(last_db_position + 5);
          char = query_before_cursor.slice(last_db_position + 4, last_db_position + 5);
          end_arg_position = arg.indexOf(char);
          if (end_arg_position === -1) {
            return {
              db_found: false,
              error: true
            };
          }
          db_name = arg.slice(0, end_arg_position);
          _ref1 = databases.models;
          for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
            database = _ref1[_j];
            if (database.get('name') === db_name) {
              return {
                db_found: true,
                error: false,
                id: database.get('id'),
                name: db_name
              };
            }
          }
          return {
            db_found: false,
            error: true
          };
        }
      };

      Container.prototype.add_description = function(fn) {
        var margin;
        if (this.descriptions[fn] != null) {
          margin = ((this.codemirror.getCursor().line + 1 + this.compute_extra_lines()) * this.line_height) + 'px';
          this.$('.suggestion_full_container').css('margin-top', margin);
          this.$('.arrow').css('margin-top', margin);
          this.$('.suggestion_description').html(this.description_template(this.extend_description(fn)));
          this.$('.suggestion_description').css('display', 'block');
          this.move_suggestion();
          return this.show_or_hide_arrow();
        }
      };

      Container.prototype.expand_textarea = function(event) {
        var height;
        if (this.$('.input_query').length === 1) {
          this.$('.input_query').height(0);
          height = this.$('.input_query').prop('scrollHeight');
          if (this.$('.input_query').height() !== height) {
            return this.$('.input_query').css('height', height);
          }
        }
      };

      Container.prototype.handle_keypress = function(editor, event) {
        var i, index_next_character, last_function, last_function_for_description, last_function_full, next_non_white_character, position, query, query_after_cursor, query_before_cursor, query_lines, saved_cursor, slice_index, start_line_index, _i, _j, _ref, _ref1, _ref2;
        saved_cursor = this.codemirror.getCursor();
        if ((event != null ? event.which : void 0) != null) {
          if (event.which === 9) {
            event.preventDefault();
            if (event.type !== 'keydown') {
              return true;
            }
            if (event.shiftKey) {
              this.current_highlighted_suggestion--;
              if (this.current_highlighted_suggestion < 0) {
                this.current_highlighted_suggestion = this.current_suggestions.length - 1;
              }
            } else {
              this.current_highlighted_suggestion++;
              if (this.current_highlighted_suggestion >= this.current_suggestions.length) {
                this.current_highlighted_suggestion = 0;
              }
            }
            if (this.current_suggestions[this.current_highlighted_suggestion] != null) {
              this.highlight_suggestion(this.current_highlighted_suggestion);
              this.write_suggestion(this.current_suggestions[this.current_highlighted_suggestion]);
              start_line_index = (this.query_first_part + this.current_completed_query).lastIndexOf('\n');
              if (start_line_index === -1) {
                start_line_index = 0;
              } else {
                start_line_index += 1;
              }
              position = (this.query_first_part + this.current_completed_query + this.current_suggestions[this.current_highlighted_suggestion]).length - start_line_index;
              this.position_cursor({
                line: saved_cursor.line,
                ch: position
              });
            }
            if (this.current_suggestions.length === 0) {
              return false;
            }
            return true;
          }
          if (event.which === 13 && (event.shiftKey || event.ctrlKey)) {
            this.hide_suggestion();
            event.preventDefault();
            if (event.type !== 'keydown') {
              return true;
            }
            this.show_or_hide_arrow();
            this.execute_query();
          }
        }
        if (((event != null ? event.type : void 0) != null) && event.type !== 'keyup' || (((event != null ? event.which : void 0) != null) && event.which === 16)) {
          return false;
        }
        this.current_highlighted_suggestion = -1;
        this.$('.suggestion_name_list').html('');
        query_lines = this.codemirror.getValue().split('\n');
        query_before_cursor = '';
        if (this.codemirror.getCursor().line > 0) {
          for (i = _i = 0, _ref = this.codemirror.getCursor().line - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            query_before_cursor += query_lines[i] + '\n';
          }
        }
        query_before_cursor += query_lines[this.codemirror.getCursor().line].slice(0, this.codemirror.getCursor().ch);
        query_after_cursor = query_lines[this.codemirror.getCursor().line].slice(this.codemirror.getCursor().ch);
        if (query_lines.length > this.codemirror.getCursor().line + 1) {
          query_after_cursor += '\n';
          for (i = _j = _ref1 = this.codemirror.getCursor().line + 1, _ref2 = query_lines.length - 1; _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = _ref1 <= _ref2 ? ++_j : --_j) {
            if (i !== query_lines.length - 1) {
              query_after_cursor += query_lines[i] + '\n';
            } else {
              query_after_cursor += query_lines[i];
            }
          }
        }
        if (this.is_in_string(query_before_cursor) === true) {
          this.hide_suggestion();
          last_function_for_description = this.extract_last_function_for_description(query_before_cursor);
          if (last_function_for_description !== '') {
            this.add_description(last_function_for_description);
          }
          return '';
        }
        index_next_character = 0;
        while (query_after_cursor[index_next_character] != null) {
          if (/\s/.test(query_after_cursor[index_next_character]) === false) {
            next_non_white_character = query_after_cursor[index_next_character];
            break;
          }
          index_next_character++;
        }
        if ((next_non_white_character != null) && next_non_white_character !== '.' && next_non_white_character !== ')' && next_non_white_character !== ';') {
          this.hide_suggestion();
          last_function_for_description = this.extract_last_function_for_description(query_before_cursor);
          if (last_function_for_description !== '') {
            this.add_description(last_function_for_description);
          }
          return '';
        }
        slice_index = this.extract_query_first_part(query_before_cursor);
        query = query_before_cursor.slice(slice_index);
        this.query_first_part = query_before_cursor.slice(0, slice_index);
        this.query_last_part = query_after_cursor;
        last_function = this.extract_last_function(query);
        if (last_function === '') {
          last_function_full = this.extract_last_function_for_description(query_before_cursor);
          if (last_function_full !== '') {
            last_function = last_function_full;
          }
        }
        if (last_function === query && last_function === 'r') {
          last_function = null;
        }
        if ((this.map_state[last_function] != null) && (this.suggestions[this.map_state[last_function]] != null)) {
          if (!(this.suggestions[this.map_state[last_function]] != null) || this.suggestions[this.map_state[last_function]].length === 0) {
            this.hide_suggestion();
            last_function_for_description = this.extract_last_function_for_description(query_before_cursor);
            if (last_function_for_description !== '') {
              this.add_description(last_function_for_description);
            }
          } else {
            this.append_suggestion(query, this.suggestions[this.map_state[last_function]]);
          }
        } else {
          this.hide_suggestion();
          last_function_for_description = this.extract_last_function_for_description(query_before_cursor);
          if (last_function_for_description !== '') {
            this.add_description(last_function_for_description);
          }
        }
        return false;
      };

      Container.prototype.extract_last_function_for_description = function(query) {
        var char_used, count_dot, end, i, is_string, num_not_open_parenthesis, _i, _ref;
        count_dot = 0;
        num_not_open_parenthesis = 0;
        is_string = false;
        char_used = '';
        for (i = _i = _ref = query.length - 1; _i >= 0; i = _i += -1) {
          if (is_string === false) {
            if (query[i] === '"' || query[i] === '\'') {
              char_used = query[i];
            } else if (query[i] === '(' && num_not_open_parenthesis === 0) {
              num_not_open_parenthesis--;
              end = i + 1;
            } else if (query[i] === '(' && num_not_open_parenthesis !== 0) {
              return query.slice(i + 1, end);
            } else if (query[i] === ')') {
              return '';
            } else if (query[i] === '.' && num_not_open_parenthesis === 0) {
              return '';
            } else if (query[i] === '.' && num_not_open_parenthesis !== 0) {
              return query.slice(i + 1, end);
            }
          }
        }
        if (end != null) {
          return query.slice(0, end);
        }
        return '';
      };

      Container.prototype.is_in_string = function(query) {
        var char_used, i, is_string, _i, _ref;
        is_string = false;
        char_used = '';
        for (i = _i = _ref = query.length - 1; _i >= 0; i = _i += -1) {
          if (is_string === false) {
            if (query[i] === '"' || query[i] === '\'') {
              is_string = true;
              char_used = query[i];
            }
          } else if (is_string === true) {
            if (query[i] === char_used) {
              if ((query[i - 1] != null) && query[i - 1] === '\\') {
                continue;
              } else {
                is_string = false;
              }
            }
          }
        }
        return is_string;
      };

      Container.prototype.extract_last_function = function(query) {
        var char_used, count_dot, dot_position, end, i, is_string, num_not_open_parenthesis, parenthesis_position, start, _i, _ref;
        start = 0;
        count_dot = 0;
        num_not_open_parenthesis = 0;
        is_string = false;
        char_used = '';
        for (i = _i = _ref = query.length - 1; _i >= 0; i = _i += -1) {
          if (is_string === false) {
            if (query[i] === '"' || query[i] === '\'') {
              is_string = true;
              char_used = query[i];
            } else if (query[i] === '(') {
              num_not_open_parenthesis--;
            } else if (query[i] === ')') {
              num_not_open_parenthesis++;
            } else if (query[i] === '.' && num_not_open_parenthesis <= 0) {
              count_dot++;
              if (count_dot === 2) {
                start = i + 1;
                break;
              }
            }
          } else if (is_string === true) {
            if (query[i] === char_used) {
              if ((query[i - 1] != null) && query[i - 1] === '\\') {
                continue;
              } else {
                is_string = false;
              }
            }
          }
        }
        dot_position = query.indexOf('.', start);
        if (dot_position === -1) {
          dot_position = query.length;
        }
        parenthesis_position = query.indexOf('(', start);
        if (parenthesis_position === -1) {
          parenthesis_position = query.length;
        }
        end = Math.min(dot_position, parenthesis_position);
        return query.slice(start, end).replace(/\s/g, '');
      };

      Container.prototype.extract_query_first_part = function(query) {
        var char_used, count_opening_parenthesis, i, is_string, k, _i, _ref;
        is_string = false;
        char_used = "";
        count_opening_parenthesis = 0;
        for (i = _i = _ref = query.length - 1; _i >= 0; i = _i += -1) {
          if (is_string === false) {
            if (query[i] === '"' || query[i] === '\'') {
              is_string = true;
              char_used = query[i];
            } else if (query[i] === ';') {
              k = 0;
              while ((query[i + 1 + k] != null) && /\s/.test(query[i + 1 + k])) {
                k++;
              }
              return i + 1 + k;
            } else if (query[i] === '(') {
              count_opening_parenthesis++;
              if (count_opening_parenthesis > 0) {
                k = 0;
                while ((query[i + 1 + k] != null) && /\s/.test(query[i + 1 + k])) {
                  k++;
                }
                return i + 1 + k;
              }
            } else if (query[i] === ')') {
              count_opening_parenthesis--;
            }
          } else if (is_string === true) {
            if (query[i] === char_used) {
              if ((query[i - 1] != null) && query[i - 1] === '\\') {
                continue;
              } else {
                is_string = false;
              }
            }
          }
        }
        return 0;
      };

      Container.prototype.append_suggestion = function(query, suggestions) {
        var char, element_currently_written, found_suggestion, i, pattern, splitdata, suggestion, _i, _j, _k, _len, _len1, _ref, _ref1;
        this.hide_suggestion();
        splitdata = query.split('.');
        this.current_completed_query = '';
        if (splitdata.length > 1) {
          for (i = _i = 0, _ref = splitdata.length - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            this.current_completed_query += splitdata[i] + '.';
          }
        }
        element_currently_written = splitdata[splitdata.length - 1];
        _ref1 = this.unsafe_to_safe_regexstr;
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          char = _ref1[_j];
          element_currently_written = element_currently_written.replace(char.pattern, char.replacement);
        }
        found_suggestion = false;
        pattern = new RegExp('^(' + element_currently_written + ')', 'i');
        this.current_suggestions = [];
        for (i = _k = 0, _len1 = suggestions.length; _k < _len1; i = ++_k) {
          suggestion = suggestions[i];
          if (pattern.test(suggestion)) {
            if (splitdata[splitdata.length - 1] === suggestion) {
              continue;
            }
            found_suggestion = true;
            this.current_suggestions.push(suggestion);
            this.$('.suggestion_name_list').append(this.template_suggestion_name({
              id: i,
              suggestion: suggestion
            }));
          }
        }
        if (found_suggestion) {
          this.show_suggestion();
        } else {
          this.hide_suggestion();
        }
        return this;
      };

      Container.prototype.callback_query = function(data) {
        var execution_time;
        if (data instanceof rethinkdb.errors.RuntimeError || data instanceof rethinkdb.errors.BadQuery || data instanceof rethinkdb.errors.ClientError || data instanceof rethinkdb.errors.ClientError) {
          this.$('.loading_query_img').css('display', 'none');
          this.results_view.render_error(this.query, data);
          return false;
        }
        if ((data != null) && this.current_results.length < this.limit) {
          this.current_results.push(data);
          return true;
        } else {
          this.$('.loading_query_img').css('display', 'none');
          this.results_view.render_result(this.query, this.current_results);
          execution_time = new Date() - this.start_time;
          this.results_view.render_metadata({
            limit_value: this.current_results.length,
            skip_value: this.skip_value,
            execution_time: execution_time,
            query: this.query,
            has_more_data: (data != null ? true : void 0)
          });
          if (data != null) {
            this.skip_value += this.current_results.length;
            this.current_results = [];
            this.current_results.push(data);
          }
          return false;
        }
      };

      Container.prototype.show_more_results = function(event) {
        try {
          event.preventDefault();
          this.cursor.next(this.callback_query);
          return $(window).scrollTop(this.$('.results_container').offset().top);
        } catch (err) {
          this.$('.loading_query_img').css('display', 'none');
          return this.results_view.render_error(this.query, err);
        }
      };

      Container.prototype.callback_multiple_queries = function(data) {
        var execution_time, _ref;
        if (data instanceof rethinkdb.errors.RuntimeError || data instanceof rethinkdb.errors.BadQuery || data instanceof rethinkdb.errors.ClientError || data instanceof rethinkdb.errors.ClientError) {
          this.$('.loading_query_img').css('display', 'none');
          this.results_view.render_error(this.query, data);
          return false;
        }
        this.current_query_index++;
        if (this.current_query_index >= this.queries.length) {
          if (data instanceof rethinkdb.errors.RuntimeError) {
            this.$('.loading_query_img').css('display', 'none');
            this.results_view.render_error(this.query, data);
            return false;
          }
          if ((data != null) && this.current_results.length < this.limit) {
            this.current_results.push(data);
            return true;
          } else {
            this.$('.loading_query_img').css('display', 'none');
            this.results_view.render_result(this.query, this.current_results);
            execution_time = new Date() - this.start_time;
            this.results_view.render_metadata({
              limit_value: this.current_results.length,
              skip_value: this.skip_value,
              execution_time: execution_time,
              query: this.query,
              has_more_data: (data != null ? true : void 0)
            });
            if (data != null) {
              this.skip_value += this.current_results.length;
              this.current_results = [];
              this.current_results.push(data);
            }
            return false;
          }
        } else {
          try {
            if (((_ref = this.cursor) != null ? _ref.close : void 0) != null) {
              this.cursor.close();
            }
            this.current_results = [];
            this.skip_value = 0;
            this.cursor = eval(this.queries[this.current_query_index]);
            this.cursor.next(this.callback_multiple_queries);
          } catch (err) {
            this.$('.loading_query_img').css('display', 'none');
            this.results_view.render_error(this.query, err);
          }
        }
        return false;
      };

      Container.prototype.execute_query = function() {
        var char_used, i, is_string, start_string, _ref;
        clearTimeout(this.timeout);
        this.timeout = setTimeout(this.connect, 5 * 60 * 1000);
        this.query = this.codemirror.getValue();
        is_string = false;
        char_used = '';
        i = 0;
        while (i < this.query.length) {
          if (is_string === true) {
            if (this.query[i] === char_used) {
              if ((this.query[i - 1] != null) && this.query[i - 1] !== '\\') {
                this.query = this.query.slice(0, start_string) + this.query.slice(start_string, i).replace('\n', '\\n') + this.query.slice(i);
                is_string = false;
              }
            }
          } else if (is_string === false) {
            if (this.query[i] === '\'' || this.query[i] === '"') {
              is_string = true;
              start_string = i;
              char_used = this.query[i];
            }
          }
          i++;
        }
        this.$('.loading_query_img').css('display', 'block');
        try {
          this.queries = this.separate_queries(this.query);
          this.start_time = new Date();
          this.current_results = [];
          this.skip_value = 0;
          this.current_query_index = 0;
          if (((_ref = this.cursor) != null ? _ref.close : void 0) != null) {
            this.cursor.close();
          }
          this.cursor = eval(this.queries[this.current_query_index]);
          return this.cursor.next(this.callback_multiple_queries);
        } catch (err) {
          throw err;
          this.$('.loading_query_img').css('display', 'none');
          return this.results_view.render_error(this.query, err);
        }
      };

      Container.prototype.separate_queries = function(query) {
        var char_used, count_dot, i, is_string, last_query, queries, start, _i, _ref;
        start = 0;
        count_dot = 0;
        is_string = false;
        char_used = '';
        queries = [];
        for (i = _i = 0, _ref = query.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (is_string === false) {
            if (query[i] === '"' || query[i] === '\'') {
              is_string = true;
              char_used = query[i];
            } else if (query[i] === ';') {
              queries.push(query.slice(start, i));
              start = i + 1;
            }
          } else if (is_string === true) {
            if (query[i] === char_used) {
              if ((query[i - 1] != null) && query[i - 1] === '\\') {
                continue;
              } else {
                is_string = false;
              }
            }
          }
        }
        last_query = query.slice(start, query.length);
        if (/^\s*$/.test(last_query) === false) {
          queries.push(query.slice(start, query.length));
        }
        return queries;
      };

      Container.prototype.clear_query = function() {
        this.codemirror.setValue('');
        return this.codemirror.focus();
      };

      Container.prototype.connect = function(data) {
        var server, that;
        server = {
          host: window.location.hostname,
          port: parseInt(window.location.port)
        };
        that = this;
        if ((data != null) && data.reconnecting === true) {
          if ((this.options != null) && (this.options.local_connect != null)) {
            window.js_server = new JavascriptServer;
            r.fake_connect(window.js_server);
          } else {
            r.connect(server, this.success_on_connect, this.error_on_connect);
          }
        } else {
          if ((this.options != null) && (this.options.local_connect != null)) {
            window.js_server = new JavascriptServer;
            r.fake_connect(window.js_server);
          } else {
            r.connect(server, void 0, this.error_on_connect);
          }
        }
        if (this.timeout != null) {
          clearTimeout(this.timeout);
        }
        return this.timeout = setTimeout(this.connect, 5 * 60 * 1000);
      };

      Container.prototype.success_on_connect = function() {
        this.$('#user-alert-space').hide();
        this.$('#user-alert-space').html(this.alert_reconnection_success_template());
        return this.$('#user-alert-space').slideDown('fast');
      };

      Container.prototype.error_on_connect = function() {
        this.$('#user-alert-space').hide();
        this.$('#user-alert-space').html(this.alert_connection_fail_template({}));
        return this.$('#user-alert-space').slideDown('fast');
      };

      Container.prototype.reconnect = function(event) {
        event.preventDefault();
        return this.connect({
          reconnecting: true
        });
      };

      Container.prototype.initialize = function(options) {
        if (options != null) {
          this.options = options;
        }
        this.timeout = setTimeout(this.connect, 5 * 60 * 1000);
        window.r = rethinkdb;
        window.R = r.R;
        this.connect();
        this.limit = 40;
        this.unsafe_to_safe_regexstr = [];
        this.unsafe_to_safe_regexstr.push({
          pattern: /\\/g,
          replacement: '\\\\'
        });
        this.unsafe_to_safe_regexstr.push({
          pattern: /\(/g,
          replacement: '\\('
        });
        this.unsafe_to_safe_regexstr.push({
          pattern: /\)/g,
          replacement: '\\)'
        });
        this.unsafe_to_safe_regexstr.push({
          pattern: /\^/g,
          replacement: '\\^'
        });
        this.unsafe_to_safe_regexstr.push({
          pattern: /\$/g,
          replacement: '\\$'
        });
        this.unsafe_to_safe_regexstr.push({
          pattern: /\*/g,
          replacement: '\\*'
        });
        this.unsafe_to_safe_regexstr.push({
          pattern: /\+/g,
          replacement: '\\+'
        });
        this.unsafe_to_safe_regexstr.push({
          pattern: /\?/g,
          replacement: '\\?'
        });
        this.unsafe_to_safe_regexstr.push({
          pattern: /\./g,
          replacement: '\\.'
        });
        this.unsafe_to_safe_regexstr.push({
          pattern: /\|/g,
          replacement: '\\|'
        });
        this.unsafe_to_safe_regexstr.push({
          pattern: /\{/g,
          replacement: '\\{'
        });
        this.unsafe_to_safe_regexstr.push({
          pattern: /\}/g,
          replacement: '\\}'
        });
        this.unsafe_to_safe_regexstr.push({
          pattern: /\[/g,
          replacement: '\\['
        });
        this.input_query = new DataExplorerView.InputQuery;
        this.results_view = new DataExplorerView.ResultView(this.limit);
        this.render();
        return $(window).on('resize', this.set_char_per_line);
      };

      Container.prototype.render = function() {
        this.$el.html(this.template);
        this.$('.input_query_full_container').html(this.input_query.render().$el);
        this.$('.results_container').html(this.results_view.render().$el);
        this.$('.results_container').html(this.results_view.render_default().$el);
        return this;
      };

      Container.prototype.call_codemirror = function() {
        this.codemirror = CodeMirror.fromTextArea(document.getElementById('input_query'), {
          mode: {
            name: 'javascript',
            json: true
          },
          onKeyEvent: this.handle_keypress,
          onBlur: this.hide_suggestion,
          onGutterClick: this.handle_gutter_click,
          lineNumbers: true,
          lineWrapping: true,
          matchBrackets: true
        });
        return this.codemirror.setSize('100%', 'auto');
      };

      Container.prototype.handle_gutter_click = function(editor, line) {
        var end, start;
        start = {
          line: line,
          ch: 0
        };
        end = {
          line: line,
          ch: this.codemirror.getLine(line).length
        };
        return this.codemirror.setSelection(start, end);
      };

      Container.prototype.toggle_size = function() {
        if (this.displaying_full_view) {
          this.display_normal();
          $(window).on('resize', this.display_full);
          this.displaying_full_view = false;
          return this.set_char_per_line();
        } else {
          this.display_full();
          $(window).on('resize', this.display_full);
          this.displaying_full_view = true;
          return this.set_char_per_line();
        }
      };

      Container.prototype.display_normal = function() {
        $('#cluster').addClass('container');
        return this.$('.json_table_container').css('width', '888px');
      };

      Container.prototype.display_full = function() {
        $('#cluster').removeClass('container');
        return this.$('.json_table_container').css('width', ($(window).width() - 52) + 'px');
      };

      Container.prototype.destroy = function() {
        var _ref;
        this.display_normal();
        $(window).off('resize', this.display_full);
        this.input_query.destroy();
        this.results_view.destroy();
        try {
          window.conn.close();
        } catch (err) {

        }
        if (((_ref = this.cursor) != null ? _ref.close : void 0) != null) {
          this.cursor.close();
        }
        return clearTimeout(this.timeout);
      };

      return Container;

    })(Backbone.View);
    this.InputQuery = (function(_super) {

      __extends(InputQuery, _super);

      function InputQuery() {
        this.render = __bind(this.render, this);
        return InputQuery.__super__.constructor.apply(this, arguments);
      }

      InputQuery.prototype.className = 'query_control';

      InputQuery.prototype.template = Handlebars.compile($('#dataexplorer_input_query-template').html());

      InputQuery.prototype.render = function() {
        this.$el.html(this.template());
        return this;
      };

      return InputQuery;

    })(Backbone.View);
    return this.ResultView = (function(_super) {

      __extends(ResultView, _super);

      function ResultView() {
        this.destroy = __bind(this.destroy, this);

        this.expand_textarea = __bind(this.expand_textarea, this);

        this.bootstrap_hack = __bind(this.bootstrap_hack, this);

        this.expand_raw_textarea = __bind(this.expand_raw_textarea, this);

        this.handle_keypress = __bind(this.handle_keypress, this);

        this.toggle_collapse = __bind(this.toggle_collapse, this);

        this.render_default = __bind(this.render_default, this);

        this.render = __bind(this.render, this);

        this.render_metadata = __bind(this.render_metadata, this);

        this.render_result = __bind(this.render_result, this);

        this.handle_mouseup = __bind(this.handle_mouseup, this);

        this.handle_mousemove = __bind(this.handle_mousemove, this);

        this.join_table = __bind(this.join_table, this);

        this.expand_tree_in_table = __bind(this.expand_tree_in_table, this);

        this.compute_data_for_type = __bind(this.compute_data_for_type, this);

        this.json_to_table_get_td_value = __bind(this.json_to_table_get_td_value, this);

        this.json_to_table = __bind(this.json_to_table, this);

        this.json_to_node = __bind(this.json_to_node, this);

        this.json_to_tree = __bind(this.json_to_tree, this);

        this.render_error = __bind(this.render_error, this);

        this.set_view = __bind(this.set_view, this);

        this.set_skip = __bind(this.set_skip, this);

        this.set_limit = __bind(this.set_limit, this);

        this.initialize = __bind(this.initialize, this);
        return ResultView.__super__.constructor.apply(this, arguments);
      }

      ResultView.prototype.className = 'result_view';

      ResultView.prototype.template = Handlebars.compile($('#dataexplorer_result_container-template').html());

      ResultView.prototype.default_template = Handlebars.compile($('#dataexplorer_default_result_container-template').html());

      ResultView.prototype.metadata_template = Handlebars.compile($('#dataexplorer-metadata-template').html());

      ResultView.prototype.option_template = Handlebars.compile($('#dataexplorer-option_page-template').html());

      ResultView.prototype.error_template = Handlebars.compile($('#dataexplorer-error-template').html());

      ResultView.prototype.template_no_result = Handlebars.compile($('#dataexplorer_result_empty-template').html());

      ResultView.prototype.template_json_tree = {
        'container': Handlebars.compile($('#dataexplorer_result_json_tree_container-template').html()),
        'span': Handlebars.compile($('#dataexplorer_result_json_tree_span-template').html()),
        'span_with_quotes': Handlebars.compile($('#dataexplorer_result_json_tree_span_with_quotes-template').html()),
        'url': Handlebars.compile($('#dataexplorer_result_json_tree_url-template').html()),
        'email': Handlebars.compile($('#dataexplorer_result_json_tree_email-template').html()),
        'object': Handlebars.compile($('#dataexplorer_result_json_tree_object-template').html()),
        'array': Handlebars.compile($('#dataexplorer_result_json_tree_array-template').html())
      };

      ResultView.prototype.template_json_table = {
        'container': Handlebars.compile($('#dataexplorer_result_json_table_container-template').html()),
        'tr_attr': Handlebars.compile($('#dataexplorer_result_json_table_tr_attr-template').html()),
        'td_attr': Handlebars.compile($('#dataexplorer_result_json_table_td_attr-template').html()),
        'tr_value': Handlebars.compile($('#dataexplorer_result_json_table_tr_value-template').html()),
        'td_value': Handlebars.compile($('#dataexplorer_result_json_table_td_value-template').html()),
        'td_value_content': Handlebars.compile($('#dataexplorer_result_json_table_td_value_content-template').html()),
        'data_inline': Handlebars.compile($('#dataexplorer_result_json_table_data_inline-template').html())
      };

      ResultView.prototype.events = {
        'click .link_to_raw_view': 'expand_raw_textarea',
        'click .jt_arrow': 'toggle_collapse',
        'mousedown td': 'handle_mousedown',
        'click .jta_arrow_v': 'expand_tree_in_table',
        'click .jta_arrow_h': 'expand_table_in_table'
      };

      ResultView.prototype.current_result = [];

      ResultView.prototype.initialize = function(limit) {
        this.set_limit(limit);
        this.set_skip(0);
        this.set_view('tree');
        $(window).mousemove(this.handle_mousemove);
        return $(window).mouseup(this.handle_mouseup);
      };

      ResultView.prototype.set_limit = function(limit) {
        return this.limit = limit;
      };

      ResultView.prototype.set_skip = function(skip) {
        return this.skip = skip;
      };

      ResultView.prototype.set_view = function(view) {
        return this.view = view;
      };

      ResultView.prototype.render_error = function(query, err) {
        var _ref;
        this.$el.html(this.error_template({
          query: query,
          error: err.toString(),
          forgot_run: (err.type != null) && err.type === 'undefined_method' && (((_ref = err['arguments']) != null ? _ref[0] : void 0) != null) && err['arguments'][0] === 'next'
        }));
        return this;
      };

      ResultView.prototype.json_to_tree = function(result) {
        return this.template_json_tree.container({
          tree: this.json_to_node(result)
        });
      };

      ResultView.prototype.json_to_node = function(value) {
        var data, element, key, last_key, output, sub_values, value_type, _i, _len;
        value_type = typeof value;
        output = '';
        if (value === null) {
          return this.template_json_tree.span({
            classname: 'jt_null',
            value: 'null'
          });
        } else if ((value.constructor != null) && value.constructor === Array) {
          if (value.length === 0) {
            return '[ ]';
          } else {
            sub_values = [];
            for (_i = 0, _len = value.length; _i < _len; _i++) {
              element = value[_i];
              sub_values.push({
                value: this.json_to_node(element)
              });
              if (typeof element === 'string' && (/^(http|https):\/\/[^\s]+$/i.test(element) || /^[a-z0-9._-]+@[a-z0-9]+.[a-z0-9._-]{2,4}/i.test(element))) {
                sub_values[sub_values.length - 1]['no_comma'] = true;
              }
            }
            sub_values[sub_values.length - 1]['no_comma'] = true;
            return this.template_json_tree.array({
              values: sub_values
            });
          }
        } else if (value_type === 'object') {
          sub_values = [];
          for (key in value) {
            last_key = key;
            sub_values.push({
              key: key,
              value: this.json_to_node(value[key])
            });
            if (typeof value[key] === 'string' && (/^(http|https):\/\/[^\s]+$/i.test(value[key]) || /^[a-z0-9._-]+@[a-z0-9]+.[a-z0-9._-]{2,4}/i.test(value[key]))) {
              sub_values[sub_values.length - 1]['no_comma'] = true;
            }
          }
          if (sub_values.length !== 0) {
            sub_values[sub_values.length - 1]['no_comma'] = true;
          }
          data = {
            no_values: false,
            values: sub_values
          };
          if (sub_values.length === 0) {
            data.no_value = true;
          }
          return this.template_json_tree.object(data);
        } else if (value_type === 'number') {
          return this.template_json_tree.span({
            classname: 'jt_num',
            value: value
          });
        } else if (value_type === 'string') {
          if (/^(http|https):\/\/[^\s]+$/i.test(value)) {
            return this.template_json_tree.url({
              url: value
            });
          } else if (/^[a-z0-9]+@[a-z0-9]+.[a-z0-9]{2,4}/i.test(value)) {
            return this.template_json_tree.email({
              email: value
            });
          } else {
            return this.template_json_tree.span_with_quotes({
              classname: 'jt_string',
              value: value
            });
          }
        } else if (value_type === 'boolean') {
          return this.template_json_tree.span({
            classname: 'jt_bool',
            value: value ? 'true' : 'false'
          });
        }
      };

      ResultView.prototype.json_to_table = function(result) {
        var element, key, keys_sorted, map, _i, _len;
        if (!((result.constructor != null) && result.constructor === Array)) {
          result = [result];
        }
        map = {};
        for (_i = 0, _len = result.length; _i < _len; _i++) {
          element = result[_i];
          if (jQuery.isPlainObject(element)) {
            for (key in element) {
              if (map[key] != null) {
                map[key]++;
              } else {
                map[key] = 1;
              }
            }
          } else {
            map['_anonymous object'] = Infinity;
          }
        }
        keys_sorted = [];
        for (key in map) {
          keys_sorted.push([key, map[key]]);
        }
        keys_sorted.sort(function(a, b) {
          if (a[1] < b[1]) {
            return 1;
          } else if (a[1] > b[1]) {
            return -1;
          } else {
            if (a[0] < b[0]) {
              return -1;
            } else if (a[0] > b[0]) {
              return 1;
            } else {
              return 0;
            }
          }
        });
        return this.template_json_table.container({
          table_attr: this.json_to_table_get_attr(keys_sorted),
          table_data: this.json_to_table_get_values(result, keys_sorted)
        });
      };

      ResultView.prototype.json_to_table_get_attr = function(keys_sorted) {
        var attr, col, element, _i, _len;
        attr = [];
        for (col = _i = 0, _len = keys_sorted.length; _i < _len; col = ++_i) {
          element = keys_sorted[col];
          attr.push({
            key: element[0],
            col: col
          });
        }
        return this.template_json_table.tr_attr({
          attr: attr
        });
      };

      ResultView.prototype.json_to_table_get_values = function(result, keys_stored) {
        var col, document_list, element, key, key_container, new_document, value, _i, _j, _len, _len1;
        document_list = [];
        for (_i = 0, _len = result.length; _i < _len; _i++) {
          element = result[_i];
          new_document = {};
          new_document.cells = [];
          for (col = _j = 0, _len1 = keys_stored.length; _j < _len1; col = ++_j) {
            key_container = keys_stored[col];
            key = key_container[0];
            if (key === '_anonymous object') {
              value = element;
            } else {
              value = element[key];
            }
            new_document.cells.push(this.json_to_table_get_td_value(value, col));
          }
          document_list.push(new_document);
        }
        return this.template_json_table.tr_value({
          document: document_list
        });
      };

      ResultView.prototype.json_to_table_get_td_value = function(value, col) {
        var data;
        data = this.compute_data_for_type(value, col);
        return this.template_json_table.td_value({
          class_td: 'col-' + col,
          cell_content: this.template_json_table.td_value_content(data)
        });
      };

      ResultView.prototype.compute_data_for_type = function(value, col) {
        var data, value_type;
        data = {
          value: value,
          class_value: 'value-' + col
        };
        value_type = typeof value;
        if (value === null) {
          data['value'] = 'null';
          data['classname'] = 'jta_null';
        } else if (value === void 0) {
          data['value'] = 'undefined';
          data['classname'] = 'jta_undefined';
        } else if ((value.constructor != null) && value.constructor === Array) {
          if (value.length === 0) {
            data['value'] = '[ ]';
            data['classname'] = 'empty array';
          } else {
            data['value'] = '[ ... ]';
            data['data_to_expand'] = JSON.stringify(value);
          }
        } else if (value_type === 'object') {
          data['value'] = '{ ... }';
          data['data_to_expand'] = JSON.stringify(value);
        } else if (value_type === 'number') {
          data['classname'] = 'jta_num';
        } else if (value_type === 'string') {
          if (/^(http|https):\/\/[^\s]+$/i.test(value)) {
            data['classname'] = 'jta_url';
          } else if (/^[a-z0-9]+@[a-z0-9]+.[a-z0-9]{2,4}/i.test(value)) {
            data['classname'] = 'jta_email';
          } else {
            data['classname'] = 'jta_string';
          }
        } else if (value_type === 'boolean') {
          data['classname'] = 'jta_bool';
        }
        return data;
      };

      ResultView.prototype.expand_tree_in_table = function(event) {
        var classname_to_change, data, dom_element, result;
        dom_element = this.$(event.target).parent();
        data = dom_element.data('json_data');
        result = this.json_to_tree(data);
        dom_element.html(result);
        classname_to_change = dom_element.parent().attr('class').split(' ')[0];
        $('.' + classname_to_change).css('max-width', 'none');
        classname_to_change = dom_element.parent().parent().attr('class');
        $('.' + classname_to_change).css('max-width', 'none');
        this.$(event.target).parent().css('max-width', 'none');
        return this.$(event.target).remove();
      };

      ResultView.prototype.expand_table_in_table = function(event) {
        var classcolumn, classname, collection, data, dom_element, i, is_description, join_table, json_to_table_get_td_value, key, keys_sorted, map, parent, template_json_table_td_attr, _i, _ref;
        dom_element = this.$(event.target).parent();
        parent = dom_element.parent();
        classname = dom_element.parent().attr('class').split(' ')[0];
        data = dom_element.data('json_data');
        if ((data.constructor != null) && data.constructor === Array) {
          classcolumn = dom_element.parent().parent().attr('class');
          $('.' + classcolumn).css('max-width', 'none');
          join_table = this.join_table;
          return $('.' + classname).each(function() {
            var new_data;
            $(this).children('.jta_arrow_v').remove();
            new_data = $(this).children('.jta_object').data('json_data');
            if ((new_data != null) && (new_data.constructor != null) && new_data.constructor === Array) {
              $(this).children('.jta_object').html(join_table(new_data));
              $(this).children('.jta_arrow_h').remove();
            }
            return $(this).css('max-width', 'none');
          });
        } else if (typeof data === 'object') {
          classcolumn = dom_element.parent().parent().attr('class');
          map = {};
          $('.' + classname).each(function() {
            var key, new_data;
            new_data = $(this).children('.jta_object').data('json_data');
            if ((new_data != null) && typeof new_data === 'object') {
              for (key in new_data) {
                if (map[key] != null) {
                  map[key]++;
                } else {
                  map[key] = 1;
                }
              }
            }
            return $(this).css('max-width', 'none');
          });
          keys_sorted = [];
          for (key in map) {
            keys_sorted.push([key, map[key]]);
          }
          keys_sorted.sort(function(a, b) {
            if (a[1] < b[1]) {
              return 1;
            } else if (a[1] > b[1]) {
              return -1;
            } else {
              if (a[0] < b[0]) {
                return -1;
              } else if (a[0] > b[0]) {
                return 1;
              } else {
                return 0;
              }
            }
          });
          for (i = _i = _ref = keys_sorted.length - 1; _i >= 0; i = _i += -1) {
            key = keys_sorted[i];
            collection = $('.' + classcolumn);
            is_description = true;
            template_json_table_td_attr = this.template_json_table.td_attr;
            json_to_table_get_td_value = this.json_to_table_get_td_value;
            collection.each(function() {
              var col, full_class, new_data, prefix, value;
              if (is_description) {
                is_description = false;
                prefix = $(this).children('.jta_attr').html();
                $(this).after(template_json_table_td_attr({
                  classtd: classcolumn + '-' + i,
                  key: prefix + '.' + key[0],
                  col: $(this).data('col') + '-' + i
                }));
              } else {
                new_data = $(this).children().children('.jta_object').data('json_data');
                if ((new_data != null) && (new_data[key[0]] != null)) {
                  value = new_data[key[0]];
                }
                full_class = classname + '-' + i;
                col = full_class.slice(full_class.indexOf('-') + 1);
                $(this).after(json_to_table_get_td_value(value, col));
              }
              return true;
            });
          }
          return $('.' + classcolumn).remove();
        }
      };

      ResultView.prototype.join_table = function(data) {
        var data_cell, i, result, value, _i, _len;
        result = '';
        for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
          value = data[i];
          data_cell = this.compute_data_for_type(value, 'float');
          data_cell['is_inline'] = true;
          if (i !== data.length - 1) {
            data_cell['need_comma'] = true;
          }
          result += this.template_json_table.data_inline(data_cell);
        }
        return result;
      };

      ResultView.prototype.mouse_down = false;

      ResultView.prototype.handle_mousedown = function(event) {
        if (event.target.nodeName === 'TD' && event.which === 1) {
          this.event_target = event.target;
          this.col_resizing = event.target.dataset.col;
          this.start_width = this.$(event.target).width();
          this.start_x = event.pageX;
          this.mouse_down = true;
          return this.$('.json_table').toggleClass('resizing', true);
        }
      };

      ResultView.prototype.handle_mousemove = function(event) {
        if (this.mouse_down) {
          $('.col-' + this.col_resizing).css('max-width', this.start_width - this.start_x + event.pageX);
          $('.value-' + this.col_resizing).css('max-width', this.start_width - this.start_x + event.pageX - 20);
          $('.col-' + this.col_resizing).css('width', this.start_width - this.start_x + event.pageX);
          return $('.value-' + this.col_resizing).css('width', this.start_width - this.start_x + event.pageX - 20);
        }
      };

      ResultView.prototype.handle_mouseup = function(event) {
        this.mouse_down = false;
        return this.$('.json_table').toggleClass('resizing', false);
      };

      ResultView.prototype.render_result = function(query, result) {
        this.$el.html(this.template({
          query: query
        }));
        this.$('.tree_view').html(this.json_to_tree(result));
        this.$('.table_view').html(this.json_to_table(result));
        this.$('.raw_view_textarea').html(JSON.stringify(result));
        return this.expand_raw_textarea();
      };

      ResultView.prototype.render_metadata = function(data) {
        var execution_time, execution_time_pretty, has_more_data, limit_value, minutes, query, skip_value;
        limit_value = data.limit_value;
        skip_value = data.skip_value;
        execution_time = data.execution_time;
        query = data.query;
        has_more_data = data.has_more_data;
        if (execution_time != null) {
          if (execution_time < 1000) {
            execution_time_pretty = execution_time + "ms";
          } else if (execution_time < 60 * 1000) {
            execution_time_pretty = (execution_time / 1000).toFixed(2) + "s";
          } else {
            minutes = Math.floor(execution_time / (60 * 1000));
            execution_time_pretty = minutes + "min " + ((execution_time - minutes * 60 * 1000) / 1000).toFixed(2) + "s";
          }
        }
        data = {
          skip_value: skip_value,
          limit_value: limit_value,
          execution_time: (execution_time_pretty != null ? execution_time_pretty : void 0)
        };
        this.$('.metadata').html(this.metadata_template(data));
        if ((has_more_data != null) && has_more_data === true) {
          return this.$('.more_results').show();
        } else {
          return this.$('.more_results').hide();
        }
      };

      ResultView.prototype.render = function() {
        this.delegateEvents();
        return this;
      };

      ResultView.prototype.render_default = function() {
        return this.$el.html(this.default_template());
      };

      ResultView.prototype.toggle_collapse = function(event) {
        this.$(event.target).nextAll('.jt_collapsible').toggleClass('jt_collapsed');
        this.$(event.target).nextAll('.jt_points').toggleClass('jt_points_collapsed');
        this.$(event.target).nextAll('.jt_b').toggleClass('jt_b_collapsed');
        return this.$(event.target).toggleClass('jt_arrow_hidden');
      };

      ResultView.prototype.handle_keypress = function(event) {
        if (event.which === 13 && !event.shiftKey) {
          event.preventDefault();
          this.$('suggestion_name_list').css('display', 'none');
          return this.$(event.target).blur();
        }
      };

      ResultView.prototype.expand_raw_textarea = function() {
        return setTimeout(this.bootstrap_hack, 0);
      };

      ResultView.prototype.bootstrap_hack = function() {
        this.expand_textarea('raw_view_textarea');
        return this;
      };

      ResultView.prototype.expand_textarea = function(classname) {
        var height;
        if ($('.' + classname).length > 0) {
          height = $('.' + classname)[0].scrollHeight;
          return $('.' + classname).height(height);
        }
      };

      ResultView.prototype.destroy = function() {
        $(document).unbind('mousemove', this.handle_mousemove);
        return $(document).unbind('mouseup', this.handle_mouseup);
      };

      return ResultView;

    })(Backbone.View);
  });

}).call(this);
