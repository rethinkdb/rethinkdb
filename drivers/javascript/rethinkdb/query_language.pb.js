// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_language.proto

/**
 * @fileoverview Generated Protocol Buffer code for file query_language.proto.
 */

goog.provide('TableRef');
goog.provide('VarTermTuple');
goog.provide('Term');
goog.provide('Term.TermType');
goog.provide('Term.Let');
goog.provide('Term.Call');
goog.provide('Term.If');
goog.provide('Term.GetByKey');
goog.provide('Term.Table');
goog.provide('Builtin');
goog.provide('Builtin.BuiltinType');
goog.provide('Builtin.Comparison');
goog.provide('Builtin.Filter');
goog.provide('Builtin.Map');
goog.provide('Builtin.ConcatMap');
goog.provide('Builtin.OrderBy');
goog.provide('Builtin.GroupedMapReduce');
goog.provide('Builtin.Range');
goog.provide('Reduction');
goog.provide('Mapping');
goog.provide('Predicate');
goog.provide('ReadQuery');
goog.provide('WriteQuery');
goog.provide('WriteQuery.WriteQueryType');
goog.provide('WriteQuery.Update');
goog.provide('WriteQuery.Delete');
goog.provide('WriteQuery.Mutate');
goog.provide('WriteQuery.Insert');
goog.provide('WriteQuery.ForEach');
goog.provide('WriteQuery.PointUpdate');
goog.provide('WriteQuery.PointDelete');
goog.provide('WriteQuery.PointMutate');
goog.provide('MetaQuery');
goog.provide('MetaQuery.MetaQueryType');
goog.provide('MetaQuery.CreateTable');
goog.provide('Query');
goog.provide('Query.QueryType');
goog.provide('Response');
goog.provide('Response.StatusCode');
goog.provide('Response.Backtrace');

goog.require('goog.proto2.Message');



/**
 * Message TableRef.
 * @constructor
 * @extends {goog.proto2.Message}
 */
TableRef = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(TableRef, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!TableRef} The cloned message.
 * @override
 */
TableRef.prototype.clone;


/**
 * Gets the value of the db_name field.
 * @return {?string} The value.
 */
TableRef.prototype.getDbName = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the db_name field or the default value if not set.
 * @return {string} The value.
 */
TableRef.prototype.getDbNameOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the db_name field.
 * @param {string} value The value.
 */
TableRef.prototype.setDbName = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the db_name field has a value.
 */
TableRef.prototype.hasDbName = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the db_name field.
 */
TableRef.prototype.dbNameCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the db_name field.
 */
TableRef.prototype.clearDbName = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the table_name field.
 * @return {?string} The value.
 */
TableRef.prototype.getTableName = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the table_name field or the default value if not set.
 * @return {string} The value.
 */
TableRef.prototype.getTableNameOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the table_name field.
 * @param {string} value The value.
 */
TableRef.prototype.setTableName = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the table_name field has a value.
 */
TableRef.prototype.hasTableName = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the table_name field.
 */
TableRef.prototype.tableNameCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the table_name field.
 */
TableRef.prototype.clearTableName = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the use_outdated field.
 * @return {?boolean} The value.
 */
TableRef.prototype.getUseOutdated = function() {
  return /** @type {?boolean} */ (this.get$Value(3));
};


/**
 * Gets the value of the use_outdated field or the default value if not set.
 * @return {boolean} The value.
 */
TableRef.prototype.getUseOutdatedOrDefault = function() {
  return /** @type {boolean} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the use_outdated field.
 * @param {boolean} value The value.
 */
TableRef.prototype.setUseOutdated = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the use_outdated field has a value.
 */
TableRef.prototype.hasUseOutdated = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the use_outdated field.
 */
TableRef.prototype.useOutdatedCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the use_outdated field.
 */
TableRef.prototype.clearUseOutdated = function() {
  this.clear$Field(3);
};

/**
 * Message VarTermTuple.
 * @constructor
 * @extends {goog.proto2.Message}
 */
VarTermTuple = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(VarTermTuple, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!VarTermTuple} The cloned message.
 * @override
 */
VarTermTuple.prototype.clone;


/**
 * Gets the value of the var field.
 * @return {?string} The value.
 */
VarTermTuple.prototype.getVar = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the var field or the default value if not set.
 * @return {string} The value.
 */
VarTermTuple.prototype.getVarOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the var field.
 * @param {string} value The value.
 */
VarTermTuple.prototype.setVar = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the var field has a value.
 */
VarTermTuple.prototype.hasVar = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the var field.
 */
VarTermTuple.prototype.varCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the var field.
 */
VarTermTuple.prototype.clearVar = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the term field.
 * @return {Term} The value.
 */
VarTermTuple.prototype.getTerm = function() {
  return /** @type {Term} */ (this.get$Value(2));
};


/**
 * Gets the value of the term field or the default value if not set.
 * @return {!Term} The value.
 */
VarTermTuple.prototype.getTermOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the term field.
 * @param {!Term} value The value.
 */
VarTermTuple.prototype.setTerm = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the term field has a value.
 */
VarTermTuple.prototype.hasTerm = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the term field.
 */
VarTermTuple.prototype.termCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the term field.
 */
VarTermTuple.prototype.clearTerm = function() {
  this.clear$Field(2);
};

/**
 * Message Term.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Term = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Term, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Term} The cloned message.
 * @override
 */
Term.prototype.clone;


/**
 * Gets the value of the type field.
 * @return {?Term.TermType} The value.
 */
Term.prototype.getType = function() {
  return /** @type {?Term.TermType} */ (this.get$Value(1));
};


/**
 * Gets the value of the type field or the default value if not set.
 * @return {Term.TermType} The value.
 */
Term.prototype.getTypeOrDefault = function() {
  return /** @type {Term.TermType} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the type field.
 * @param {Term.TermType} value The value.
 */
Term.prototype.setType = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the type field has a value.
 */
Term.prototype.hasType = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the type field.
 */
Term.prototype.typeCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the type field.
 */
Term.prototype.clearType = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the var field.
 * @return {?string} The value.
 */
Term.prototype.getVar = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the var field or the default value if not set.
 * @return {string} The value.
 */
Term.prototype.getVarOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the var field.
 * @param {string} value The value.
 */
Term.prototype.setVar = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the var field has a value.
 */
Term.prototype.hasVar = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the var field.
 */
Term.prototype.varCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the var field.
 */
Term.prototype.clearVar = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the let field.
 * @return {Term.Let} The value.
 */
Term.prototype.getLet = function() {
  return /** @type {Term.Let} */ (this.get$Value(3));
};


/**
 * Gets the value of the let field or the default value if not set.
 * @return {!Term.Let} The value.
 */
Term.prototype.getLetOrDefault = function() {
  return /** @type {!Term.Let} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the let field.
 * @param {!Term.Let} value The value.
 */
Term.prototype.setLet = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the let field has a value.
 */
Term.prototype.hasLet = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the let field.
 */
Term.prototype.letCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the let field.
 */
Term.prototype.clearLet = function() {
  this.clear$Field(3);
};


/**
 * Gets the value of the call field.
 * @return {Term.Call} The value.
 */
Term.prototype.getCall = function() {
  return /** @type {Term.Call} */ (this.get$Value(4));
};


/**
 * Gets the value of the call field or the default value if not set.
 * @return {!Term.Call} The value.
 */
Term.prototype.getCallOrDefault = function() {
  return /** @type {!Term.Call} */ (this.get$ValueOrDefault(4));
};


/**
 * Sets the value of the call field.
 * @param {!Term.Call} value The value.
 */
Term.prototype.setCall = function(value) {
  this.set$Value(4, value);
};


/**
 * @return {boolean} Whether the call field has a value.
 */
Term.prototype.hasCall = function() {
  return this.has$Value(4);
};


/**
 * @return {number} The number of values in the call field.
 */
Term.prototype.callCount = function() {
  return this.count$Values(4);
};


/**
 * Clears the values in the call field.
 */
Term.prototype.clearCall = function() {
  this.clear$Field(4);
};


/**
 * Gets the value of the if_ field.
 * @return {Term.If} The value.
 */
Term.prototype.getIf = function() {
  return /** @type {Term.If} */ (this.get$Value(5));
};


/**
 * Gets the value of the if_ field or the default value if not set.
 * @return {!Term.If} The value.
 */
Term.prototype.getIfOrDefault = function() {
  return /** @type {!Term.If} */ (this.get$ValueOrDefault(5));
};


/**
 * Sets the value of the if_ field.
 * @param {!Term.If} value The value.
 */
Term.prototype.setIf = function(value) {
  this.set$Value(5, value);
};


/**
 * @return {boolean} Whether the if_ field has a value.
 */
Term.prototype.hasIf = function() {
  return this.has$Value(5);
};


/**
 * @return {number} The number of values in the if_ field.
 */
Term.prototype.ifCount = function() {
  return this.count$Values(5);
};


/**
 * Clears the values in the if_ field.
 */
Term.prototype.clearIf = function() {
  this.clear$Field(5);
};


/**
 * Gets the value of the error field.
 * @return {?string} The value.
 */
Term.prototype.getError = function() {
  return /** @type {?string} */ (this.get$Value(6));
};


/**
 * Gets the value of the error field or the default value if not set.
 * @return {string} The value.
 */
Term.prototype.getErrorOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(6));
};


/**
 * Sets the value of the error field.
 * @param {string} value The value.
 */
Term.prototype.setError = function(value) {
  this.set$Value(6, value);
};


/**
 * @return {boolean} Whether the error field has a value.
 */
Term.prototype.hasError = function() {
  return this.has$Value(6);
};


/**
 * @return {number} The number of values in the error field.
 */
Term.prototype.errorCount = function() {
  return this.count$Values(6);
};


/**
 * Clears the values in the error field.
 */
Term.prototype.clearError = function() {
  this.clear$Field(6);
};


/**
 * Gets the value of the number field.
 * @return {?number} The value.
 */
Term.prototype.getNumber = function() {
  return /** @type {?number} */ (this.get$Value(7));
};


/**
 * Gets the value of the number field or the default value if not set.
 * @return {number} The value.
 */
Term.prototype.getNumberOrDefault = function() {
  return /** @type {number} */ (this.get$ValueOrDefault(7));
};


/**
 * Sets the value of the number field.
 * @param {number} value The value.
 */
Term.prototype.setNumber = function(value) {
  this.set$Value(7, value);
};


/**
 * @return {boolean} Whether the number field has a value.
 */
Term.prototype.hasNumber = function() {
  return this.has$Value(7);
};


/**
 * @return {number} The number of values in the number field.
 */
Term.prototype.numberCount = function() {
  return this.count$Values(7);
};


/**
 * Clears the values in the number field.
 */
Term.prototype.clearNumber = function() {
  this.clear$Field(7);
};


/**
 * Gets the value of the valuestring field.
 * @return {?string} The value.
 */
Term.prototype.getValuestring = function() {
  return /** @type {?string} */ (this.get$Value(8));
};


/**
 * Gets the value of the valuestring field or the default value if not set.
 * @return {string} The value.
 */
Term.prototype.getValuestringOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(8));
};


/**
 * Sets the value of the valuestring field.
 * @param {string} value The value.
 */
Term.prototype.setValuestring = function(value) {
  this.set$Value(8, value);
};


/**
 * @return {boolean} Whether the valuestring field has a value.
 */
Term.prototype.hasValuestring = function() {
  return this.has$Value(8);
};


/**
 * @return {number} The number of values in the valuestring field.
 */
Term.prototype.valuestringCount = function() {
  return this.count$Values(8);
};


/**
 * Clears the values in the valuestring field.
 */
Term.prototype.clearValuestring = function() {
  this.clear$Field(8);
};


/**
 * Gets the value of the jsonstring field.
 * @return {?string} The value.
 */
Term.prototype.getJsonstring = function() {
  return /** @type {?string} */ (this.get$Value(9));
};


/**
 * Gets the value of the jsonstring field or the default value if not set.
 * @return {string} The value.
 */
Term.prototype.getJsonstringOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(9));
};


/**
 * Sets the value of the jsonstring field.
 * @param {string} value The value.
 */
Term.prototype.setJsonstring = function(value) {
  this.set$Value(9, value);
};


/**
 * @return {boolean} Whether the jsonstring field has a value.
 */
Term.prototype.hasJsonstring = function() {
  return this.has$Value(9);
};


/**
 * @return {number} The number of values in the jsonstring field.
 */
Term.prototype.jsonstringCount = function() {
  return this.count$Values(9);
};


/**
 * Clears the values in the jsonstring field.
 */
Term.prototype.clearJsonstring = function() {
  this.clear$Field(9);
};


/**
 * Gets the value of the valuebool field.
 * @return {?boolean} The value.
 */
Term.prototype.getValuebool = function() {
  return /** @type {?boolean} */ (this.get$Value(10));
};


/**
 * Gets the value of the valuebool field or the default value if not set.
 * @return {boolean} The value.
 */
Term.prototype.getValueboolOrDefault = function() {
  return /** @type {boolean} */ (this.get$ValueOrDefault(10));
};


/**
 * Sets the value of the valuebool field.
 * @param {boolean} value The value.
 */
Term.prototype.setValuebool = function(value) {
  this.set$Value(10, value);
};


/**
 * @return {boolean} Whether the valuebool field has a value.
 */
Term.prototype.hasValuebool = function() {
  return this.has$Value(10);
};


/**
 * @return {number} The number of values in the valuebool field.
 */
Term.prototype.valueboolCount = function() {
  return this.count$Values(10);
};


/**
 * Clears the values in the valuebool field.
 */
Term.prototype.clearValuebool = function() {
  this.clear$Field(10);
};


/**
 * Gets the value of the array field at the index given.
 * @param {number} index The index to lookup.
 * @return {Term} The value.
 */
Term.prototype.getArray = function(index) {
  return /** @type {Term} */ (this.get$Value(11, index));
};


/**
 * Gets the value of the array field at the index given or the default value if not set.
 * @param {number} index The index to lookup.
 * @return {!Term} The value.
 */
Term.prototype.getArrayOrDefault = function(index) {
  return /** @type {!Term} */ (this.get$ValueOrDefault(11, index));
};


/**
 * Adds a value to the array field.
 * @param {!Term} value The value to add.
 */
Term.prototype.addArray = function(value) {
  this.add$Value(11, value);
};


/**
 * Returns the array of values in the array field.
 * @return {!Array.<!Term>} The values in the field.
 */
Term.prototype.arrayArray = function() {
  return /** @type {!Array.<!Term>} */ (this.array$Values(11));
};


/**
 * @return {boolean} Whether the array field has a value.
 */
Term.prototype.hasArray = function() {
  return this.has$Value(11);
};


/**
 * @return {number} The number of values in the array field.
 */
Term.prototype.arrayCount = function() {
  return this.count$Values(11);
};


/**
 * Clears the values in the array field.
 */
Term.prototype.clearArray = function() {
  this.clear$Field(11);
};


/**
 * Gets the value of the object field at the index given.
 * @param {number} index The index to lookup.
 * @return {VarTermTuple} The value.
 */
Term.prototype.getObject = function(index) {
  return /** @type {VarTermTuple} */ (this.get$Value(12, index));
};


/**
 * Gets the value of the object field at the index given or the default value if not set.
 * @param {number} index The index to lookup.
 * @return {!VarTermTuple} The value.
 */
Term.prototype.getObjectOrDefault = function(index) {
  return /** @type {!VarTermTuple} */ (this.get$ValueOrDefault(12, index));
};


/**
 * Adds a value to the object field.
 * @param {!VarTermTuple} value The value to add.
 */
Term.prototype.addObject = function(value) {
  this.add$Value(12, value);
};


/**
 * Returns the array of values in the object field.
 * @return {!Array.<!VarTermTuple>} The values in the field.
 */
Term.prototype.objectArray = function() {
  return /** @type {!Array.<!VarTermTuple>} */ (this.array$Values(12));
};


/**
 * @return {boolean} Whether the object field has a value.
 */
Term.prototype.hasObject = function() {
  return this.has$Value(12);
};


/**
 * @return {number} The number of values in the object field.
 */
Term.prototype.objectCount = function() {
  return this.count$Values(12);
};


/**
 * Clears the values in the object field.
 */
Term.prototype.clearObject = function() {
  this.clear$Field(12);
};


/**
 * Gets the value of the get_by_key field.
 * @return {Term.GetByKey} The value.
 */
Term.prototype.getGetByKey = function() {
  return /** @type {Term.GetByKey} */ (this.get$Value(14));
};


/**
 * Gets the value of the get_by_key field or the default value if not set.
 * @return {!Term.GetByKey} The value.
 */
Term.prototype.getGetByKeyOrDefault = function() {
  return /** @type {!Term.GetByKey} */ (this.get$ValueOrDefault(14));
};


/**
 * Sets the value of the get_by_key field.
 * @param {!Term.GetByKey} value The value.
 */
Term.prototype.setGetByKey = function(value) {
  this.set$Value(14, value);
};


/**
 * @return {boolean} Whether the get_by_key field has a value.
 */
Term.prototype.hasGetByKey = function() {
  return this.has$Value(14);
};


/**
 * @return {number} The number of values in the get_by_key field.
 */
Term.prototype.getByKeyCount = function() {
  return this.count$Values(14);
};


/**
 * Clears the values in the get_by_key field.
 */
Term.prototype.clearGetByKey = function() {
  this.clear$Field(14);
};


/**
 * Gets the value of the table field.
 * @return {Term.Table} The value.
 */
Term.prototype.getTable = function() {
  return /** @type {Term.Table} */ (this.get$Value(15));
};


/**
 * Gets the value of the table field or the default value if not set.
 * @return {!Term.Table} The value.
 */
Term.prototype.getTableOrDefault = function() {
  return /** @type {!Term.Table} */ (this.get$ValueOrDefault(15));
};


/**
 * Sets the value of the table field.
 * @param {!Term.Table} value The value.
 */
Term.prototype.setTable = function(value) {
  this.set$Value(15, value);
};


/**
 * @return {boolean} Whether the table field has a value.
 */
Term.prototype.hasTable = function() {
  return this.has$Value(15);
};


/**
 * @return {number} The number of values in the table field.
 */
Term.prototype.tableCount = function() {
  return this.count$Values(15);
};


/**
 * Clears the values in the table field.
 */
Term.prototype.clearTable = function() {
  this.clear$Field(15);
};


/**
 * Gets the value of the javascript field.
 * @return {?string} The value.
 */
Term.prototype.getJavascript = function() {
  return /** @type {?string} */ (this.get$Value(16));
};


/**
 * Gets the value of the javascript field or the default value if not set.
 * @return {string} The value.
 */
Term.prototype.getJavascriptOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(16));
};


/**
 * Sets the value of the javascript field.
 * @param {string} value The value.
 */
Term.prototype.setJavascript = function(value) {
  this.set$Value(16, value);
};


/**
 * @return {boolean} Whether the javascript field has a value.
 */
Term.prototype.hasJavascript = function() {
  return this.has$Value(16);
};


/**
 * @return {number} The number of values in the javascript field.
 */
Term.prototype.javascriptCount = function() {
  return this.count$Values(16);
};


/**
 * Clears the values in the javascript field.
 */
Term.prototype.clearJavascript = function() {
  this.clear$Field(16);
};


/**
 * Enumeration TermType.
 * @enum {number}
 */
Term.TermType = {
  JSON_NULL: 0,
  VAR: 1,
  LET: 2,
  CALL: 3,
  IF: 4,
  ERROR: 5,
  NUMBER: 6,
  STRING: 7,
  JSON: 8,
  BOOL: 9,
  ARRAY: 10,
  OBJECT: 11,
  GETBYKEY: 12,
  TABLE: 13,
  JAVASCRIPT: 14,
  IMPLICIT_VAR: 15
};



/**
 * Message Let.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Term.Let = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Term.Let, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Term.Let} The cloned message.
 * @override
 */
Term.Let.prototype.clone;


/**
 * Gets the value of the binds field at the index given.
 * @param {number} index The index to lookup.
 * @return {VarTermTuple} The value.
 */
Term.Let.prototype.getBinds = function(index) {
  return /** @type {VarTermTuple} */ (this.get$Value(1, index));
};


/**
 * Gets the value of the binds field at the index given or the default value if not set.
 * @param {number} index The index to lookup.
 * @return {!VarTermTuple} The value.
 */
Term.Let.prototype.getBindsOrDefault = function(index) {
  return /** @type {!VarTermTuple} */ (this.get$ValueOrDefault(1, index));
};


/**
 * Adds a value to the binds field.
 * @param {!VarTermTuple} value The value to add.
 */
Term.Let.prototype.addBinds = function(value) {
  this.add$Value(1, value);
};


/**
 * Returns the array of values in the binds field.
 * @return {!Array.<!VarTermTuple>} The values in the field.
 */
Term.Let.prototype.bindsArray = function() {
  return /** @type {!Array.<!VarTermTuple>} */ (this.array$Values(1));
};


/**
 * @return {boolean} Whether the binds field has a value.
 */
Term.Let.prototype.hasBinds = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the binds field.
 */
Term.Let.prototype.bindsCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the binds field.
 */
Term.Let.prototype.clearBinds = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the expr field.
 * @return {Term} The value.
 */
Term.Let.prototype.getExpr = function() {
  return /** @type {Term} */ (this.get$Value(2));
};


/**
 * Gets the value of the expr field or the default value if not set.
 * @return {!Term} The value.
 */
Term.Let.prototype.getExprOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the expr field.
 * @param {!Term} value The value.
 */
Term.Let.prototype.setExpr = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the expr field has a value.
 */
Term.Let.prototype.hasExpr = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the expr field.
 */
Term.Let.prototype.exprCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the expr field.
 */
Term.Let.prototype.clearExpr = function() {
  this.clear$Field(2);
};



/**
 * Message Call.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Term.Call = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Term.Call, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Term.Call} The cloned message.
 * @override
 */
Term.Call.prototype.clone;


/**
 * Gets the value of the builtin field.
 * @return {Builtin} The value.
 */
Term.Call.prototype.getBuiltin = function() {
  return /** @type {Builtin} */ (this.get$Value(1));
};


/**
 * Gets the value of the builtin field or the default value if not set.
 * @return {!Builtin} The value.
 */
Term.Call.prototype.getBuiltinOrDefault = function() {
  return /** @type {!Builtin} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the builtin field.
 * @param {!Builtin} value The value.
 */
Term.Call.prototype.setBuiltin = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the builtin field has a value.
 */
Term.Call.prototype.hasBuiltin = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the builtin field.
 */
Term.Call.prototype.builtinCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the builtin field.
 */
Term.Call.prototype.clearBuiltin = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the args field at the index given.
 * @param {number} index The index to lookup.
 * @return {Term} The value.
 */
Term.Call.prototype.getArgs = function(index) {
  return /** @type {Term} */ (this.get$Value(2, index));
};


/**
 * Gets the value of the args field at the index given or the default value if not set.
 * @param {number} index The index to lookup.
 * @return {!Term} The value.
 */
Term.Call.prototype.getArgsOrDefault = function(index) {
  return /** @type {!Term} */ (this.get$ValueOrDefault(2, index));
};


/**
 * Adds a value to the args field.
 * @param {!Term} value The value to add.
 */
Term.Call.prototype.addArgs = function(value) {
  this.add$Value(2, value);
};


/**
 * Returns the array of values in the args field.
 * @return {!Array.<!Term>} The values in the field.
 */
Term.Call.prototype.argsArray = function() {
  return /** @type {!Array.<!Term>} */ (this.array$Values(2));
};


/**
 * @return {boolean} Whether the args field has a value.
 */
Term.Call.prototype.hasArgs = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the args field.
 */
Term.Call.prototype.argsCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the args field.
 */
Term.Call.prototype.clearArgs = function() {
  this.clear$Field(2);
};



/**
 * Message If.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Term.If = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Term.If, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Term.If} The cloned message.
 * @override
 */
Term.If.prototype.clone;


/**
 * Gets the value of the test field.
 * @return {Term} The value.
 */
Term.If.prototype.getTest = function() {
  return /** @type {Term} */ (this.get$Value(1));
};


/**
 * Gets the value of the test field or the default value if not set.
 * @return {!Term} The value.
 */
Term.If.prototype.getTestOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the test field.
 * @param {!Term} value The value.
 */
Term.If.prototype.setTest = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the test field has a value.
 */
Term.If.prototype.hasTest = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the test field.
 */
Term.If.prototype.testCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the test field.
 */
Term.If.prototype.clearTest = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the true_branch field.
 * @return {Term} The value.
 */
Term.If.prototype.getTrueBranch = function() {
  return /** @type {Term} */ (this.get$Value(2));
};


/**
 * Gets the value of the true_branch field or the default value if not set.
 * @return {!Term} The value.
 */
Term.If.prototype.getTrueBranchOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the true_branch field.
 * @param {!Term} value The value.
 */
Term.If.prototype.setTrueBranch = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the true_branch field has a value.
 */
Term.If.prototype.hasTrueBranch = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the true_branch field.
 */
Term.If.prototype.trueBranchCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the true_branch field.
 */
Term.If.prototype.clearTrueBranch = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the false_branch field.
 * @return {Term} The value.
 */
Term.If.prototype.getFalseBranch = function() {
  return /** @type {Term} */ (this.get$Value(3));
};


/**
 * Gets the value of the false_branch field or the default value if not set.
 * @return {!Term} The value.
 */
Term.If.prototype.getFalseBranchOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the false_branch field.
 * @param {!Term} value The value.
 */
Term.If.prototype.setFalseBranch = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the false_branch field has a value.
 */
Term.If.prototype.hasFalseBranch = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the false_branch field.
 */
Term.If.prototype.falseBranchCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the false_branch field.
 */
Term.If.prototype.clearFalseBranch = function() {
  this.clear$Field(3);
};



/**
 * Message GetByKey.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Term.GetByKey = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Term.GetByKey, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Term.GetByKey} The cloned message.
 * @override
 */
Term.GetByKey.prototype.clone;


/**
 * Gets the value of the table_ref field.
 * @return {TableRef} The value.
 */
Term.GetByKey.prototype.getTableRef = function() {
  return /** @type {TableRef} */ (this.get$Value(1));
};


/**
 * Gets the value of the table_ref field or the default value if not set.
 * @return {!TableRef} The value.
 */
Term.GetByKey.prototype.getTableRefOrDefault = function() {
  return /** @type {!TableRef} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the table_ref field.
 * @param {!TableRef} value The value.
 */
Term.GetByKey.prototype.setTableRef = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the table_ref field has a value.
 */
Term.GetByKey.prototype.hasTableRef = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the table_ref field.
 */
Term.GetByKey.prototype.tableRefCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the table_ref field.
 */
Term.GetByKey.prototype.clearTableRef = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the attrname field.
 * @return {?string} The value.
 */
Term.GetByKey.prototype.getAttrname = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the attrname field or the default value if not set.
 * @return {string} The value.
 */
Term.GetByKey.prototype.getAttrnameOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the attrname field.
 * @param {string} value The value.
 */
Term.GetByKey.prototype.setAttrname = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the attrname field has a value.
 */
Term.GetByKey.prototype.hasAttrname = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the attrname field.
 */
Term.GetByKey.prototype.attrnameCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the attrname field.
 */
Term.GetByKey.prototype.clearAttrname = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the key field.
 * @return {Term} The value.
 */
Term.GetByKey.prototype.getKey = function() {
  return /** @type {Term} */ (this.get$Value(3));
};


/**
 * Gets the value of the key field or the default value if not set.
 * @return {!Term} The value.
 */
Term.GetByKey.prototype.getKeyOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the key field.
 * @param {!Term} value The value.
 */
Term.GetByKey.prototype.setKey = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the key field has a value.
 */
Term.GetByKey.prototype.hasKey = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the key field.
 */
Term.GetByKey.prototype.keyCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the key field.
 */
Term.GetByKey.prototype.clearKey = function() {
  this.clear$Field(3);
};



/**
 * Message Table.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Term.Table = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Term.Table, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Term.Table} The cloned message.
 * @override
 */
Term.Table.prototype.clone;


/**
 * Gets the value of the table_ref field.
 * @return {TableRef} The value.
 */
Term.Table.prototype.getTableRef = function() {
  return /** @type {TableRef} */ (this.get$Value(1));
};


/**
 * Gets the value of the table_ref field or the default value if not set.
 * @return {!TableRef} The value.
 */
Term.Table.prototype.getTableRefOrDefault = function() {
  return /** @type {!TableRef} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the table_ref field.
 * @param {!TableRef} value The value.
 */
Term.Table.prototype.setTableRef = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the table_ref field has a value.
 */
Term.Table.prototype.hasTableRef = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the table_ref field.
 */
Term.Table.prototype.tableRefCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the table_ref field.
 */
Term.Table.prototype.clearTableRef = function() {
  this.clear$Field(1);
};



/**
 * Message Builtin.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Builtin = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Builtin, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Builtin} The cloned message.
 * @override
 */
Builtin.prototype.clone;


/**
 * Gets the value of the type field.
 * @return {?Builtin.BuiltinType} The value.
 */
Builtin.prototype.getType = function() {
  return /** @type {?Builtin.BuiltinType} */ (this.get$Value(1));
};


/**
 * Gets the value of the type field or the default value if not set.
 * @return {Builtin.BuiltinType} The value.
 */
Builtin.prototype.getTypeOrDefault = function() {
  return /** @type {Builtin.BuiltinType} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the type field.
 * @param {Builtin.BuiltinType} value The value.
 */
Builtin.prototype.setType = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the type field has a value.
 */
Builtin.prototype.hasType = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the type field.
 */
Builtin.prototype.typeCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the type field.
 */
Builtin.prototype.clearType = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the attr field.
 * @return {?string} The value.
 */
Builtin.prototype.getAttr = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the attr field or the default value if not set.
 * @return {string} The value.
 */
Builtin.prototype.getAttrOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the attr field.
 * @param {string} value The value.
 */
Builtin.prototype.setAttr = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the attr field has a value.
 */
Builtin.prototype.hasAttr = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the attr field.
 */
Builtin.prototype.attrCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the attr field.
 */
Builtin.prototype.clearAttr = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the attrs field at the index given.
 * @param {number} index The index to lookup.
 * @return {?string} The value.
 */
Builtin.prototype.getAttrs = function(index) {
  return /** @type {?string} */ (this.get$Value(3, index));
};


/**
 * Gets the value of the attrs field at the index given or the default value if not set.
 * @param {number} index The index to lookup.
 * @return {string} The value.
 */
Builtin.prototype.getAttrsOrDefault = function(index) {
  return /** @type {string} */ (this.get$ValueOrDefault(3, index));
};


/**
 * Adds a value to the attrs field.
 * @param {string} value The value to add.
 */
Builtin.prototype.addAttrs = function(value) {
  this.add$Value(3, value);
};


/**
 * Returns the array of values in the attrs field.
 * @return {!Array.<string>} The values in the field.
 */
Builtin.prototype.attrsArray = function() {
  return /** @type {!Array.<string>} */ (this.array$Values(3));
};


/**
 * @return {boolean} Whether the attrs field has a value.
 */
Builtin.prototype.hasAttrs = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the attrs field.
 */
Builtin.prototype.attrsCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the attrs field.
 */
Builtin.prototype.clearAttrs = function() {
  this.clear$Field(3);
};


/**
 * Gets the value of the comparison field.
 * @return {?Builtin.Comparison} The value.
 */
Builtin.prototype.getComparison = function() {
  return /** @type {?Builtin.Comparison} */ (this.get$Value(4));
};


/**
 * Gets the value of the comparison field or the default value if not set.
 * @return {Builtin.Comparison} The value.
 */
Builtin.prototype.getComparisonOrDefault = function() {
  return /** @type {Builtin.Comparison} */ (this.get$ValueOrDefault(4));
};


/**
 * Sets the value of the comparison field.
 * @param {Builtin.Comparison} value The value.
 */
Builtin.prototype.setComparison = function(value) {
  this.set$Value(4, value);
};


/**
 * @return {boolean} Whether the comparison field has a value.
 */
Builtin.prototype.hasComparison = function() {
  return this.has$Value(4);
};


/**
 * @return {number} The number of values in the comparison field.
 */
Builtin.prototype.comparisonCount = function() {
  return this.count$Values(4);
};


/**
 * Clears the values in the comparison field.
 */
Builtin.prototype.clearComparison = function() {
  this.clear$Field(4);
};


/**
 * Gets the value of the filter field.
 * @return {Builtin.Filter} The value.
 */
Builtin.prototype.getFilter = function() {
  return /** @type {Builtin.Filter} */ (this.get$Value(5));
};


/**
 * Gets the value of the filter field or the default value if not set.
 * @return {!Builtin.Filter} The value.
 */
Builtin.prototype.getFilterOrDefault = function() {
  return /** @type {!Builtin.Filter} */ (this.get$ValueOrDefault(5));
};


/**
 * Sets the value of the filter field.
 * @param {!Builtin.Filter} value The value.
 */
Builtin.prototype.setFilter = function(value) {
  this.set$Value(5, value);
};


/**
 * @return {boolean} Whether the filter field has a value.
 */
Builtin.prototype.hasFilter = function() {
  return this.has$Value(5);
};


/**
 * @return {number} The number of values in the filter field.
 */
Builtin.prototype.filterCount = function() {
  return this.count$Values(5);
};


/**
 * Clears the values in the filter field.
 */
Builtin.prototype.clearFilter = function() {
  this.clear$Field(5);
};


/**
 * Gets the value of the map field.
 * @return {Builtin.Map} The value.
 */
Builtin.prototype.getMap = function() {
  return /** @type {Builtin.Map} */ (this.get$Value(6));
};


/**
 * Gets the value of the map field or the default value if not set.
 * @return {!Builtin.Map} The value.
 */
Builtin.prototype.getMapOrDefault = function() {
  return /** @type {!Builtin.Map} */ (this.get$ValueOrDefault(6));
};


/**
 * Sets the value of the map field.
 * @param {!Builtin.Map} value The value.
 */
Builtin.prototype.setMap = function(value) {
  this.set$Value(6, value);
};


/**
 * @return {boolean} Whether the map field has a value.
 */
Builtin.prototype.hasMap = function() {
  return this.has$Value(6);
};


/**
 * @return {number} The number of values in the map field.
 */
Builtin.prototype.mapCount = function() {
  return this.count$Values(6);
};


/**
 * Clears the values in the map field.
 */
Builtin.prototype.clearMap = function() {
  this.clear$Field(6);
};


/**
 * Gets the value of the concat_map field.
 * @return {Builtin.ConcatMap} The value.
 */
Builtin.prototype.getConcatMap = function() {
  return /** @type {Builtin.ConcatMap} */ (this.get$Value(7));
};


/**
 * Gets the value of the concat_map field or the default value if not set.
 * @return {!Builtin.ConcatMap} The value.
 */
Builtin.prototype.getConcatMapOrDefault = function() {
  return /** @type {!Builtin.ConcatMap} */ (this.get$ValueOrDefault(7));
};


/**
 * Sets the value of the concat_map field.
 * @param {!Builtin.ConcatMap} value The value.
 */
Builtin.prototype.setConcatMap = function(value) {
  this.set$Value(7, value);
};


/**
 * @return {boolean} Whether the concat_map field has a value.
 */
Builtin.prototype.hasConcatMap = function() {
  return this.has$Value(7);
};


/**
 * @return {number} The number of values in the concat_map field.
 */
Builtin.prototype.concatMapCount = function() {
  return this.count$Values(7);
};


/**
 * Clears the values in the concat_map field.
 */
Builtin.prototype.clearConcatMap = function() {
  this.clear$Field(7);
};


/**
 * Gets the value of the order_by field at the index given.
 * @param {number} index The index to lookup.
 * @return {Builtin.OrderBy} The value.
 */
Builtin.prototype.getOrderBy = function(index) {
  return /** @type {Builtin.OrderBy} */ (this.get$Value(8, index));
};


/**
 * Gets the value of the order_by field at the index given or the default value if not set.
 * @param {number} index The index to lookup.
 * @return {!Builtin.OrderBy} The value.
 */
Builtin.prototype.getOrderByOrDefault = function(index) {
  return /** @type {!Builtin.OrderBy} */ (this.get$ValueOrDefault(8, index));
};


/**
 * Adds a value to the order_by field.
 * @param {!Builtin.OrderBy} value The value to add.
 */
Builtin.prototype.addOrderBy = function(value) {
  this.add$Value(8, value);
};


/**
 * Returns the array of values in the order_by field.
 * @return {!Array.<!Builtin.OrderBy>} The values in the field.
 */
Builtin.prototype.orderByArray = function() {
  return /** @type {!Array.<!Builtin.OrderBy>} */ (this.array$Values(8));
};


/**
 * @return {boolean} Whether the order_by field has a value.
 */
Builtin.prototype.hasOrderBy = function() {
  return this.has$Value(8);
};


/**
 * @return {number} The number of values in the order_by field.
 */
Builtin.prototype.orderByCount = function() {
  return this.count$Values(8);
};


/**
 * Clears the values in the order_by field.
 */
Builtin.prototype.clearOrderBy = function() {
  this.clear$Field(8);
};


/**
 * Gets the value of the reduce field.
 * @return {Reduction} The value.
 */
Builtin.prototype.getReduce = function() {
  return /** @type {Reduction} */ (this.get$Value(9));
};


/**
 * Gets the value of the reduce field or the default value if not set.
 * @return {!Reduction} The value.
 */
Builtin.prototype.getReduceOrDefault = function() {
  return /** @type {!Reduction} */ (this.get$ValueOrDefault(9));
};


/**
 * Sets the value of the reduce field.
 * @param {!Reduction} value The value.
 */
Builtin.prototype.setReduce = function(value) {
  this.set$Value(9, value);
};


/**
 * @return {boolean} Whether the reduce field has a value.
 */
Builtin.prototype.hasReduce = function() {
  return this.has$Value(9);
};


/**
 * @return {number} The number of values in the reduce field.
 */
Builtin.prototype.reduceCount = function() {
  return this.count$Values(9);
};


/**
 * Clears the values in the reduce field.
 */
Builtin.prototype.clearReduce = function() {
  this.clear$Field(9);
};


/**
 * Gets the value of the grouped_map_reduce field.
 * @return {Builtin.GroupedMapReduce} The value.
 */
Builtin.prototype.getGroupedMapReduce = function() {
  return /** @type {Builtin.GroupedMapReduce} */ (this.get$Value(10));
};


/**
 * Gets the value of the grouped_map_reduce field or the default value if not set.
 * @return {!Builtin.GroupedMapReduce} The value.
 */
Builtin.prototype.getGroupedMapReduceOrDefault = function() {
  return /** @type {!Builtin.GroupedMapReduce} */ (this.get$ValueOrDefault(10));
};


/**
 * Sets the value of the grouped_map_reduce field.
 * @param {!Builtin.GroupedMapReduce} value The value.
 */
Builtin.prototype.setGroupedMapReduce = function(value) {
  this.set$Value(10, value);
};


/**
 * @return {boolean} Whether the grouped_map_reduce field has a value.
 */
Builtin.prototype.hasGroupedMapReduce = function() {
  return this.has$Value(10);
};


/**
 * @return {number} The number of values in the grouped_map_reduce field.
 */
Builtin.prototype.groupedMapReduceCount = function() {
  return this.count$Values(10);
};


/**
 * Clears the values in the grouped_map_reduce field.
 */
Builtin.prototype.clearGroupedMapReduce = function() {
  this.clear$Field(10);
};


/**
 * Gets the value of the range field.
 * @return {Builtin.Range} The value.
 */
Builtin.prototype.getRange = function() {
  return /** @type {Builtin.Range} */ (this.get$Value(11));
};


/**
 * Gets the value of the range field or the default value if not set.
 * @return {!Builtin.Range} The value.
 */
Builtin.prototype.getRangeOrDefault = function() {
  return /** @type {!Builtin.Range} */ (this.get$ValueOrDefault(11));
};


/**
 * Sets the value of the range field.
 * @param {!Builtin.Range} value The value.
 */
Builtin.prototype.setRange = function(value) {
  this.set$Value(11, value);
};


/**
 * @return {boolean} Whether the range field has a value.
 */
Builtin.prototype.hasRange = function() {
  return this.has$Value(11);
};


/**
 * @return {number} The number of values in the range field.
 */
Builtin.prototype.rangeCount = function() {
  return this.count$Values(11);
};


/**
 * Clears the values in the range field.
 */
Builtin.prototype.clearRange = function() {
  this.clear$Field(11);
};


/**
 * Enumeration BuiltinType.
 * @enum {number}
 */
Builtin.BuiltinType = {
  NOT: 1,
  GETATTR: 2,
  IMPLICIT_GETATTR: 3,
  HASATTR: 4,
  IMPLICIT_HASATTR: 5,
  PICKATTRS: 6,
  IMPLICIT_PICKATTRS: 7,
  MAPMERGE: 8,
  ARRAYAPPEND: 9,
  SLICE: 11,
  ADD: 14,
  SUBTRACT: 15,
  MULTIPLY: 16,
  DIVIDE: 17,
  MODULO: 18,
  COMPARE: 19,
  FILTER: 20,
  MAP: 21,
  CONCATMAP: 22,
  ORDERBY: 23,
  DISTINCT: 24,
  LENGTH: 26,
  UNION: 27,
  NTH: 28,
  STREAMTOARRAY: 29,
  ARRAYTOSTREAM: 30,
  REDUCE: 31,
  GROUPEDMAPREDUCE: 32,
  ANY: 35,
  ALL: 36,
  RANGE: 37,
  IMPLICIT_WITHOUT: 38,
  WITHOUT: 39
};




/**
 * Enumeration Comparison.
 * @enum {number}
 */
Builtin.Comparison = {
  EQ: 1,
  NE: 2,
  LT: 3,
  LE: 4,
  GT: 5,
  GE: 6
};



/**
 * Message Filter.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Builtin.Filter = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Builtin.Filter, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Builtin.Filter} The cloned message.
 * @override
 */
Builtin.Filter.prototype.clone;


/**
 * Gets the value of the predicate field.
 * @return {Predicate} The value.
 */
Builtin.Filter.prototype.getPredicate = function() {
  return /** @type {Predicate} */ (this.get$Value(1));
};


/**
 * Gets the value of the predicate field or the default value if not set.
 * @return {!Predicate} The value.
 */
Builtin.Filter.prototype.getPredicateOrDefault = function() {
  return /** @type {!Predicate} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the predicate field.
 * @param {!Predicate} value The value.
 */
Builtin.Filter.prototype.setPredicate = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the predicate field has a value.
 */
Builtin.Filter.prototype.hasPredicate = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the predicate field.
 */
Builtin.Filter.prototype.predicateCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the predicate field.
 */
Builtin.Filter.prototype.clearPredicate = function() {
  this.clear$Field(1);
};



/**
 * Message Map.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Builtin.Map = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Builtin.Map, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Builtin.Map} The cloned message.
 * @override
 */
Builtin.Map.prototype.clone;


/**
 * Gets the value of the mapping field.
 * @return {Mapping} The value.
 */
Builtin.Map.prototype.getMapping = function() {
  return /** @type {Mapping} */ (this.get$Value(1));
};


/**
 * Gets the value of the mapping field or the default value if not set.
 * @return {!Mapping} The value.
 */
Builtin.Map.prototype.getMappingOrDefault = function() {
  return /** @type {!Mapping} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the mapping field.
 * @param {!Mapping} value The value.
 */
Builtin.Map.prototype.setMapping = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the mapping field has a value.
 */
Builtin.Map.prototype.hasMapping = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the mapping field.
 */
Builtin.Map.prototype.mappingCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the mapping field.
 */
Builtin.Map.prototype.clearMapping = function() {
  this.clear$Field(1);
};



/**
 * Message ConcatMap.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Builtin.ConcatMap = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Builtin.ConcatMap, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Builtin.ConcatMap} The cloned message.
 * @override
 */
Builtin.ConcatMap.prototype.clone;


/**
 * Gets the value of the mapping field.
 * @return {Mapping} The value.
 */
Builtin.ConcatMap.prototype.getMapping = function() {
  return /** @type {Mapping} */ (this.get$Value(1));
};


/**
 * Gets the value of the mapping field or the default value if not set.
 * @return {!Mapping} The value.
 */
Builtin.ConcatMap.prototype.getMappingOrDefault = function() {
  return /** @type {!Mapping} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the mapping field.
 * @param {!Mapping} value The value.
 */
Builtin.ConcatMap.prototype.setMapping = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the mapping field has a value.
 */
Builtin.ConcatMap.prototype.hasMapping = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the mapping field.
 */
Builtin.ConcatMap.prototype.mappingCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the mapping field.
 */
Builtin.ConcatMap.prototype.clearMapping = function() {
  this.clear$Field(1);
};



/**
 * Message OrderBy.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Builtin.OrderBy = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Builtin.OrderBy, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Builtin.OrderBy} The cloned message.
 * @override
 */
Builtin.OrderBy.prototype.clone;


/**
 * Gets the value of the attr field.
 * @return {?string} The value.
 */
Builtin.OrderBy.prototype.getAttr = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the attr field or the default value if not set.
 * @return {string} The value.
 */
Builtin.OrderBy.prototype.getAttrOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the attr field.
 * @param {string} value The value.
 */
Builtin.OrderBy.prototype.setAttr = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the attr field has a value.
 */
Builtin.OrderBy.prototype.hasAttr = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the attr field.
 */
Builtin.OrderBy.prototype.attrCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the attr field.
 */
Builtin.OrderBy.prototype.clearAttr = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the ascending field.
 * @return {?boolean} The value.
 */
Builtin.OrderBy.prototype.getAscending = function() {
  return /** @type {?boolean} */ (this.get$Value(2));
};


/**
 * Gets the value of the ascending field or the default value if not set.
 * @return {boolean} The value.
 */
Builtin.OrderBy.prototype.getAscendingOrDefault = function() {
  return /** @type {boolean} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the ascending field.
 * @param {boolean} value The value.
 */
Builtin.OrderBy.prototype.setAscending = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the ascending field has a value.
 */
Builtin.OrderBy.prototype.hasAscending = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the ascending field.
 */
Builtin.OrderBy.prototype.ascendingCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the ascending field.
 */
Builtin.OrderBy.prototype.clearAscending = function() {
  this.clear$Field(2);
};



/**
 * Message GroupedMapReduce.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Builtin.GroupedMapReduce = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Builtin.GroupedMapReduce, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Builtin.GroupedMapReduce} The cloned message.
 * @override
 */
Builtin.GroupedMapReduce.prototype.clone;


/**
 * Gets the value of the group_mapping field.
 * @return {Mapping} The value.
 */
Builtin.GroupedMapReduce.prototype.getGroupMapping = function() {
  return /** @type {Mapping} */ (this.get$Value(1));
};


/**
 * Gets the value of the group_mapping field or the default value if not set.
 * @return {!Mapping} The value.
 */
Builtin.GroupedMapReduce.prototype.getGroupMappingOrDefault = function() {
  return /** @type {!Mapping} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the group_mapping field.
 * @param {!Mapping} value The value.
 */
Builtin.GroupedMapReduce.prototype.setGroupMapping = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the group_mapping field has a value.
 */
Builtin.GroupedMapReduce.prototype.hasGroupMapping = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the group_mapping field.
 */
Builtin.GroupedMapReduce.prototype.groupMappingCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the group_mapping field.
 */
Builtin.GroupedMapReduce.prototype.clearGroupMapping = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the value_mapping field.
 * @return {Mapping} The value.
 */
Builtin.GroupedMapReduce.prototype.getValueMapping = function() {
  return /** @type {Mapping} */ (this.get$Value(2));
};


/**
 * Gets the value of the value_mapping field or the default value if not set.
 * @return {!Mapping} The value.
 */
Builtin.GroupedMapReduce.prototype.getValueMappingOrDefault = function() {
  return /** @type {!Mapping} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the value_mapping field.
 * @param {!Mapping} value The value.
 */
Builtin.GroupedMapReduce.prototype.setValueMapping = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the value_mapping field has a value.
 */
Builtin.GroupedMapReduce.prototype.hasValueMapping = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the value_mapping field.
 */
Builtin.GroupedMapReduce.prototype.valueMappingCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the value_mapping field.
 */
Builtin.GroupedMapReduce.prototype.clearValueMapping = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the reduction field.
 * @return {Reduction} The value.
 */
Builtin.GroupedMapReduce.prototype.getReduction = function() {
  return /** @type {Reduction} */ (this.get$Value(3));
};


/**
 * Gets the value of the reduction field or the default value if not set.
 * @return {!Reduction} The value.
 */
Builtin.GroupedMapReduce.prototype.getReductionOrDefault = function() {
  return /** @type {!Reduction} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the reduction field.
 * @param {!Reduction} value The value.
 */
Builtin.GroupedMapReduce.prototype.setReduction = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the reduction field has a value.
 */
Builtin.GroupedMapReduce.prototype.hasReduction = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the reduction field.
 */
Builtin.GroupedMapReduce.prototype.reductionCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the reduction field.
 */
Builtin.GroupedMapReduce.prototype.clearReduction = function() {
  this.clear$Field(3);
};



/**
 * Message Range.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Builtin.Range = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Builtin.Range, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Builtin.Range} The cloned message.
 * @override
 */
Builtin.Range.prototype.clone;


/**
 * Gets the value of the attrname field.
 * @return {?string} The value.
 */
Builtin.Range.prototype.getAttrname = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the attrname field or the default value if not set.
 * @return {string} The value.
 */
Builtin.Range.prototype.getAttrnameOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the attrname field.
 * @param {string} value The value.
 */
Builtin.Range.prototype.setAttrname = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the attrname field has a value.
 */
Builtin.Range.prototype.hasAttrname = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the attrname field.
 */
Builtin.Range.prototype.attrnameCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the attrname field.
 */
Builtin.Range.prototype.clearAttrname = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the lowerbound field.
 * @return {Term} The value.
 */
Builtin.Range.prototype.getLowerbound = function() {
  return /** @type {Term} */ (this.get$Value(2));
};


/**
 * Gets the value of the lowerbound field or the default value if not set.
 * @return {!Term} The value.
 */
Builtin.Range.prototype.getLowerboundOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the lowerbound field.
 * @param {!Term} value The value.
 */
Builtin.Range.prototype.setLowerbound = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the lowerbound field has a value.
 */
Builtin.Range.prototype.hasLowerbound = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the lowerbound field.
 */
Builtin.Range.prototype.lowerboundCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the lowerbound field.
 */
Builtin.Range.prototype.clearLowerbound = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the upperbound field.
 * @return {Term} The value.
 */
Builtin.Range.prototype.getUpperbound = function() {
  return /** @type {Term} */ (this.get$Value(3));
};


/**
 * Gets the value of the upperbound field or the default value if not set.
 * @return {!Term} The value.
 */
Builtin.Range.prototype.getUpperboundOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the upperbound field.
 * @param {!Term} value The value.
 */
Builtin.Range.prototype.setUpperbound = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the upperbound field has a value.
 */
Builtin.Range.prototype.hasUpperbound = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the upperbound field.
 */
Builtin.Range.prototype.upperboundCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the upperbound field.
 */
Builtin.Range.prototype.clearUpperbound = function() {
  this.clear$Field(3);
};



/**
 * Message Reduction.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Reduction = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Reduction, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Reduction} The cloned message.
 * @override
 */
Reduction.prototype.clone;


/**
 * Gets the value of the base field.
 * @return {Term} The value.
 */
Reduction.prototype.getBase = function() {
  return /** @type {Term} */ (this.get$Value(1));
};


/**
 * Gets the value of the base field or the default value if not set.
 * @return {!Term} The value.
 */
Reduction.prototype.getBaseOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the base field.
 * @param {!Term} value The value.
 */
Reduction.prototype.setBase = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the base field has a value.
 */
Reduction.prototype.hasBase = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the base field.
 */
Reduction.prototype.baseCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the base field.
 */
Reduction.prototype.clearBase = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the var1 field.
 * @return {?string} The value.
 */
Reduction.prototype.getVar1 = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the var1 field or the default value if not set.
 * @return {string} The value.
 */
Reduction.prototype.getVar1OrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the var1 field.
 * @param {string} value The value.
 */
Reduction.prototype.setVar1 = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the var1 field has a value.
 */
Reduction.prototype.hasVar1 = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the var1 field.
 */
Reduction.prototype.var1Count = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the var1 field.
 */
Reduction.prototype.clearVar1 = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the var2 field.
 * @return {?string} The value.
 */
Reduction.prototype.getVar2 = function() {
  return /** @type {?string} */ (this.get$Value(3));
};


/**
 * Gets the value of the var2 field or the default value if not set.
 * @return {string} The value.
 */
Reduction.prototype.getVar2OrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the var2 field.
 * @param {string} value The value.
 */
Reduction.prototype.setVar2 = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the var2 field has a value.
 */
Reduction.prototype.hasVar2 = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the var2 field.
 */
Reduction.prototype.var2Count = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the var2 field.
 */
Reduction.prototype.clearVar2 = function() {
  this.clear$Field(3);
};


/**
 * Gets the value of the body field.
 * @return {Term} The value.
 */
Reduction.prototype.getBody = function() {
  return /** @type {Term} */ (this.get$Value(4));
};


/**
 * Gets the value of the body field or the default value if not set.
 * @return {!Term} The value.
 */
Reduction.prototype.getBodyOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(4));
};


/**
 * Sets the value of the body field.
 * @param {!Term} value The value.
 */
Reduction.prototype.setBody = function(value) {
  this.set$Value(4, value);
};


/**
 * @return {boolean} Whether the body field has a value.
 */
Reduction.prototype.hasBody = function() {
  return this.has$Value(4);
};


/**
 * @return {number} The number of values in the body field.
 */
Reduction.prototype.bodyCount = function() {
  return this.count$Values(4);
};


/**
 * Clears the values in the body field.
 */
Reduction.prototype.clearBody = function() {
  this.clear$Field(4);
};

/**
 * Message Mapping.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Mapping = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Mapping, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Mapping} The cloned message.
 * @override
 */
Mapping.prototype.clone;


/**
 * Gets the value of the arg field.
 * @return {?string} The value.
 */
Mapping.prototype.getArg = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the arg field or the default value if not set.
 * @return {string} The value.
 */
Mapping.prototype.getArgOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the arg field.
 * @param {string} value The value.
 */
Mapping.prototype.setArg = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the arg field has a value.
 */
Mapping.prototype.hasArg = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the arg field.
 */
Mapping.prototype.argCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the arg field.
 */
Mapping.prototype.clearArg = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the body field.
 * @return {Term} The value.
 */
Mapping.prototype.getBody = function() {
  return /** @type {Term} */ (this.get$Value(2));
};


/**
 * Gets the value of the body field or the default value if not set.
 * @return {!Term} The value.
 */
Mapping.prototype.getBodyOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the body field.
 * @param {!Term} value The value.
 */
Mapping.prototype.setBody = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the body field has a value.
 */
Mapping.prototype.hasBody = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the body field.
 */
Mapping.prototype.bodyCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the body field.
 */
Mapping.prototype.clearBody = function() {
  this.clear$Field(2);
};

/**
 * Message Predicate.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Predicate = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Predicate, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Predicate} The cloned message.
 * @override
 */
Predicate.prototype.clone;


/**
 * Gets the value of the arg field.
 * @return {?string} The value.
 */
Predicate.prototype.getArg = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the arg field or the default value if not set.
 * @return {string} The value.
 */
Predicate.prototype.getArgOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the arg field.
 * @param {string} value The value.
 */
Predicate.prototype.setArg = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the arg field has a value.
 */
Predicate.prototype.hasArg = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the arg field.
 */
Predicate.prototype.argCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the arg field.
 */
Predicate.prototype.clearArg = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the body field.
 * @return {Term} The value.
 */
Predicate.prototype.getBody = function() {
  return /** @type {Term} */ (this.get$Value(2));
};


/**
 * Gets the value of the body field or the default value if not set.
 * @return {!Term} The value.
 */
Predicate.prototype.getBodyOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the body field.
 * @param {!Term} value The value.
 */
Predicate.prototype.setBody = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the body field has a value.
 */
Predicate.prototype.hasBody = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the body field.
 */
Predicate.prototype.bodyCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the body field.
 */
Predicate.prototype.clearBody = function() {
  this.clear$Field(2);
};

/**
 * Message ReadQuery.
 * @constructor
 * @extends {goog.proto2.Message}
 */
ReadQuery = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(ReadQuery, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!ReadQuery} The cloned message.
 * @override
 */
ReadQuery.prototype.clone;


/**
 * Gets the value of the term field.
 * @return {Term} The value.
 */
ReadQuery.prototype.getTerm = function() {
  return /** @type {Term} */ (this.get$Value(1));
};


/**
 * Gets the value of the term field or the default value if not set.
 * @return {!Term} The value.
 */
ReadQuery.prototype.getTermOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the term field.
 * @param {!Term} value The value.
 */
ReadQuery.prototype.setTerm = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the term field has a value.
 */
ReadQuery.prototype.hasTerm = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the term field.
 */
ReadQuery.prototype.termCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the term field.
 */
ReadQuery.prototype.clearTerm = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the max_chunk_size field.
 * @return {?string} The value.
 */
ReadQuery.prototype.getMaxChunkSize = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the max_chunk_size field or the default value if not set.
 * @return {string} The value.
 */
ReadQuery.prototype.getMaxChunkSizeOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the max_chunk_size field.
 * @param {string} value The value.
 */
ReadQuery.prototype.setMaxChunkSize = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the max_chunk_size field has a value.
 */
ReadQuery.prototype.hasMaxChunkSize = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the max_chunk_size field.
 */
ReadQuery.prototype.maxChunkSizeCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the max_chunk_size field.
 */
ReadQuery.prototype.clearMaxChunkSize = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the max_age field.
 * @return {?string} The value.
 */
ReadQuery.prototype.getMaxAge = function() {
  return /** @type {?string} */ (this.get$Value(3));
};


/**
 * Gets the value of the max_age field or the default value if not set.
 * @return {string} The value.
 */
ReadQuery.prototype.getMaxAgeOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the max_age field.
 * @param {string} value The value.
 */
ReadQuery.prototype.setMaxAge = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the max_age field has a value.
 */
ReadQuery.prototype.hasMaxAge = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the max_age field.
 */
ReadQuery.prototype.maxAgeCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the max_age field.
 */
ReadQuery.prototype.clearMaxAge = function() {
  this.clear$Field(3);
};

/**
 * Message WriteQuery.
 * @constructor
 * @extends {goog.proto2.Message}
 */
WriteQuery = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(WriteQuery, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!WriteQuery} The cloned message.
 * @override
 */
WriteQuery.prototype.clone;


/**
 * Gets the value of the type field.
 * @return {?WriteQuery.WriteQueryType} The value.
 */
WriteQuery.prototype.getType = function() {
  return /** @type {?WriteQuery.WriteQueryType} */ (this.get$Value(1));
};


/**
 * Gets the value of the type field or the default value if not set.
 * @return {WriteQuery.WriteQueryType} The value.
 */
WriteQuery.prototype.getTypeOrDefault = function() {
  return /** @type {WriteQuery.WriteQueryType} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the type field.
 * @param {WriteQuery.WriteQueryType} value The value.
 */
WriteQuery.prototype.setType = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the type field has a value.
 */
WriteQuery.prototype.hasType = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the type field.
 */
WriteQuery.prototype.typeCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the type field.
 */
WriteQuery.prototype.clearType = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the atomic field.
 * @return {?boolean} The value.
 */
WriteQuery.prototype.getAtomic = function() {
  return /** @type {?boolean} */ (this.get$Value(11));
};


/**
 * Gets the value of the atomic field or the default value if not set.
 * @return {boolean} The value.
 */
WriteQuery.prototype.getAtomicOrDefault = function() {
  return /** @type {boolean} */ (this.get$ValueOrDefault(11));
};


/**
 * Sets the value of the atomic field.
 * @param {boolean} value The value.
 */
WriteQuery.prototype.setAtomic = function(value) {
  this.set$Value(11, value);
};


/**
 * @return {boolean} Whether the atomic field has a value.
 */
WriteQuery.prototype.hasAtomic = function() {
  return this.has$Value(11);
};


/**
 * @return {number} The number of values in the atomic field.
 */
WriteQuery.prototype.atomicCount = function() {
  return this.count$Values(11);
};


/**
 * Clears the values in the atomic field.
 */
WriteQuery.prototype.clearAtomic = function() {
  this.clear$Field(11);
};


/**
 * Gets the value of the update field.
 * @return {WriteQuery.Update} The value.
 */
WriteQuery.prototype.getUpdate = function() {
  return /** @type {WriteQuery.Update} */ (this.get$Value(2));
};


/**
 * Gets the value of the update field or the default value if not set.
 * @return {!WriteQuery.Update} The value.
 */
WriteQuery.prototype.getUpdateOrDefault = function() {
  return /** @type {!WriteQuery.Update} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the update field.
 * @param {!WriteQuery.Update} value The value.
 */
WriteQuery.prototype.setUpdate = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the update field has a value.
 */
WriteQuery.prototype.hasUpdate = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the update field.
 */
WriteQuery.prototype.updateCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the update field.
 */
WriteQuery.prototype.clearUpdate = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the delete field.
 * @return {WriteQuery.Delete} The value.
 */
WriteQuery.prototype.getDelete = function() {
  return /** @type {WriteQuery.Delete} */ (this.get$Value(3));
};


/**
 * Gets the value of the delete field or the default value if not set.
 * @return {!WriteQuery.Delete} The value.
 */
WriteQuery.prototype.getDeleteOrDefault = function() {
  return /** @type {!WriteQuery.Delete} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the delete field.
 * @param {!WriteQuery.Delete} value The value.
 */
WriteQuery.prototype.setDelete = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the delete field has a value.
 */
WriteQuery.prototype.hasDelete = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the delete field.
 */
WriteQuery.prototype.deleteCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the delete field.
 */
WriteQuery.prototype.clearDelete = function() {
  this.clear$Field(3);
};


/**
 * Gets the value of the mutate field.
 * @return {WriteQuery.Mutate} The value.
 */
WriteQuery.prototype.getMutate = function() {
  return /** @type {WriteQuery.Mutate} */ (this.get$Value(4));
};


/**
 * Gets the value of the mutate field or the default value if not set.
 * @return {!WriteQuery.Mutate} The value.
 */
WriteQuery.prototype.getMutateOrDefault = function() {
  return /** @type {!WriteQuery.Mutate} */ (this.get$ValueOrDefault(4));
};


/**
 * Sets the value of the mutate field.
 * @param {!WriteQuery.Mutate} value The value.
 */
WriteQuery.prototype.setMutate = function(value) {
  this.set$Value(4, value);
};


/**
 * @return {boolean} Whether the mutate field has a value.
 */
WriteQuery.prototype.hasMutate = function() {
  return this.has$Value(4);
};


/**
 * @return {number} The number of values in the mutate field.
 */
WriteQuery.prototype.mutateCount = function() {
  return this.count$Values(4);
};


/**
 * Clears the values in the mutate field.
 */
WriteQuery.prototype.clearMutate = function() {
  this.clear$Field(4);
};


/**
 * Gets the value of the insert field.
 * @return {WriteQuery.Insert} The value.
 */
WriteQuery.prototype.getInsert = function() {
  return /** @type {WriteQuery.Insert} */ (this.get$Value(5));
};


/**
 * Gets the value of the insert field or the default value if not set.
 * @return {!WriteQuery.Insert} The value.
 */
WriteQuery.prototype.getInsertOrDefault = function() {
  return /** @type {!WriteQuery.Insert} */ (this.get$ValueOrDefault(5));
};


/**
 * Sets the value of the insert field.
 * @param {!WriteQuery.Insert} value The value.
 */
WriteQuery.prototype.setInsert = function(value) {
  this.set$Value(5, value);
};


/**
 * @return {boolean} Whether the insert field has a value.
 */
WriteQuery.prototype.hasInsert = function() {
  return this.has$Value(5);
};


/**
 * @return {number} The number of values in the insert field.
 */
WriteQuery.prototype.insertCount = function() {
  return this.count$Values(5);
};


/**
 * Clears the values in the insert field.
 */
WriteQuery.prototype.clearInsert = function() {
  this.clear$Field(5);
};


/**
 * Gets the value of the for_each field.
 * @return {WriteQuery.ForEach} The value.
 */
WriteQuery.prototype.getForEach = function() {
  return /** @type {WriteQuery.ForEach} */ (this.get$Value(7));
};


/**
 * Gets the value of the for_each field or the default value if not set.
 * @return {!WriteQuery.ForEach} The value.
 */
WriteQuery.prototype.getForEachOrDefault = function() {
  return /** @type {!WriteQuery.ForEach} */ (this.get$ValueOrDefault(7));
};


/**
 * Sets the value of the for_each field.
 * @param {!WriteQuery.ForEach} value The value.
 */
WriteQuery.prototype.setForEach = function(value) {
  this.set$Value(7, value);
};


/**
 * @return {boolean} Whether the for_each field has a value.
 */
WriteQuery.prototype.hasForEach = function() {
  return this.has$Value(7);
};


/**
 * @return {number} The number of values in the for_each field.
 */
WriteQuery.prototype.forEachCount = function() {
  return this.count$Values(7);
};


/**
 * Clears the values in the for_each field.
 */
WriteQuery.prototype.clearForEach = function() {
  this.clear$Field(7);
};


/**
 * Gets the value of the point_update field.
 * @return {WriteQuery.PointUpdate} The value.
 */
WriteQuery.prototype.getPointUpdate = function() {
  return /** @type {WriteQuery.PointUpdate} */ (this.get$Value(8));
};


/**
 * Gets the value of the point_update field or the default value if not set.
 * @return {!WriteQuery.PointUpdate} The value.
 */
WriteQuery.prototype.getPointUpdateOrDefault = function() {
  return /** @type {!WriteQuery.PointUpdate} */ (this.get$ValueOrDefault(8));
};


/**
 * Sets the value of the point_update field.
 * @param {!WriteQuery.PointUpdate} value The value.
 */
WriteQuery.prototype.setPointUpdate = function(value) {
  this.set$Value(8, value);
};


/**
 * @return {boolean} Whether the point_update field has a value.
 */
WriteQuery.prototype.hasPointUpdate = function() {
  return this.has$Value(8);
};


/**
 * @return {number} The number of values in the point_update field.
 */
WriteQuery.prototype.pointUpdateCount = function() {
  return this.count$Values(8);
};


/**
 * Clears the values in the point_update field.
 */
WriteQuery.prototype.clearPointUpdate = function() {
  this.clear$Field(8);
};


/**
 * Gets the value of the point_delete field.
 * @return {WriteQuery.PointDelete} The value.
 */
WriteQuery.prototype.getPointDelete = function() {
  return /** @type {WriteQuery.PointDelete} */ (this.get$Value(9));
};


/**
 * Gets the value of the point_delete field or the default value if not set.
 * @return {!WriteQuery.PointDelete} The value.
 */
WriteQuery.prototype.getPointDeleteOrDefault = function() {
  return /** @type {!WriteQuery.PointDelete} */ (this.get$ValueOrDefault(9));
};


/**
 * Sets the value of the point_delete field.
 * @param {!WriteQuery.PointDelete} value The value.
 */
WriteQuery.prototype.setPointDelete = function(value) {
  this.set$Value(9, value);
};


/**
 * @return {boolean} Whether the point_delete field has a value.
 */
WriteQuery.prototype.hasPointDelete = function() {
  return this.has$Value(9);
};


/**
 * @return {number} The number of values in the point_delete field.
 */
WriteQuery.prototype.pointDeleteCount = function() {
  return this.count$Values(9);
};


/**
 * Clears the values in the point_delete field.
 */
WriteQuery.prototype.clearPointDelete = function() {
  this.clear$Field(9);
};


/**
 * Gets the value of the point_mutate field.
 * @return {WriteQuery.PointMutate} The value.
 */
WriteQuery.prototype.getPointMutate = function() {
  return /** @type {WriteQuery.PointMutate} */ (this.get$Value(10));
};


/**
 * Gets the value of the point_mutate field or the default value if not set.
 * @return {!WriteQuery.PointMutate} The value.
 */
WriteQuery.prototype.getPointMutateOrDefault = function() {
  return /** @type {!WriteQuery.PointMutate} */ (this.get$ValueOrDefault(10));
};


/**
 * Sets the value of the point_mutate field.
 * @param {!WriteQuery.PointMutate} value The value.
 */
WriteQuery.prototype.setPointMutate = function(value) {
  this.set$Value(10, value);
};


/**
 * @return {boolean} Whether the point_mutate field has a value.
 */
WriteQuery.prototype.hasPointMutate = function() {
  return this.has$Value(10);
};


/**
 * @return {number} The number of values in the point_mutate field.
 */
WriteQuery.prototype.pointMutateCount = function() {
  return this.count$Values(10);
};


/**
 * Clears the values in the point_mutate field.
 */
WriteQuery.prototype.clearPointMutate = function() {
  this.clear$Field(10);
};


/**
 * Enumeration WriteQueryType.
 * @enum {number}
 */
WriteQuery.WriteQueryType = {
  UPDATE: 1,
  DELETE: 2,
  MUTATE: 3,
  INSERT: 4,
  FOREACH: 6,
  POINTUPDATE: 7,
  POINTDELETE: 8,
  POINTMUTATE: 9
};



/**
 * Message Update.
 * @constructor
 * @extends {goog.proto2.Message}
 */
WriteQuery.Update = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(WriteQuery.Update, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!WriteQuery.Update} The cloned message.
 * @override
 */
WriteQuery.Update.prototype.clone;


/**
 * Gets the value of the view field.
 * @return {Term} The value.
 */
WriteQuery.Update.prototype.getView = function() {
  return /** @type {Term} */ (this.get$Value(1));
};


/**
 * Gets the value of the view field or the default value if not set.
 * @return {!Term} The value.
 */
WriteQuery.Update.prototype.getViewOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the view field.
 * @param {!Term} value The value.
 */
WriteQuery.Update.prototype.setView = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the view field has a value.
 */
WriteQuery.Update.prototype.hasView = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the view field.
 */
WriteQuery.Update.prototype.viewCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the view field.
 */
WriteQuery.Update.prototype.clearView = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the mapping field.
 * @return {Mapping} The value.
 */
WriteQuery.Update.prototype.getMapping = function() {
  return /** @type {Mapping} */ (this.get$Value(2));
};


/**
 * Gets the value of the mapping field or the default value if not set.
 * @return {!Mapping} The value.
 */
WriteQuery.Update.prototype.getMappingOrDefault = function() {
  return /** @type {!Mapping} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the mapping field.
 * @param {!Mapping} value The value.
 */
WriteQuery.Update.prototype.setMapping = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the mapping field has a value.
 */
WriteQuery.Update.prototype.hasMapping = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the mapping field.
 */
WriteQuery.Update.prototype.mappingCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the mapping field.
 */
WriteQuery.Update.prototype.clearMapping = function() {
  this.clear$Field(2);
};



/**
 * Message Delete.
 * @constructor
 * @extends {goog.proto2.Message}
 */
WriteQuery.Delete = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(WriteQuery.Delete, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!WriteQuery.Delete} The cloned message.
 * @override
 */
WriteQuery.Delete.prototype.clone;


/**
 * Gets the value of the view field.
 * @return {Term} The value.
 */
WriteQuery.Delete.prototype.getView = function() {
  return /** @type {Term} */ (this.get$Value(1));
};


/**
 * Gets the value of the view field or the default value if not set.
 * @return {!Term} The value.
 */
WriteQuery.Delete.prototype.getViewOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the view field.
 * @param {!Term} value The value.
 */
WriteQuery.Delete.prototype.setView = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the view field has a value.
 */
WriteQuery.Delete.prototype.hasView = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the view field.
 */
WriteQuery.Delete.prototype.viewCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the view field.
 */
WriteQuery.Delete.prototype.clearView = function() {
  this.clear$Field(1);
};



/**
 * Message Mutate.
 * @constructor
 * @extends {goog.proto2.Message}
 */
WriteQuery.Mutate = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(WriteQuery.Mutate, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!WriteQuery.Mutate} The cloned message.
 * @override
 */
WriteQuery.Mutate.prototype.clone;


/**
 * Gets the value of the view field.
 * @return {Term} The value.
 */
WriteQuery.Mutate.prototype.getView = function() {
  return /** @type {Term} */ (this.get$Value(1));
};


/**
 * Gets the value of the view field or the default value if not set.
 * @return {!Term} The value.
 */
WriteQuery.Mutate.prototype.getViewOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the view field.
 * @param {!Term} value The value.
 */
WriteQuery.Mutate.prototype.setView = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the view field has a value.
 */
WriteQuery.Mutate.prototype.hasView = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the view field.
 */
WriteQuery.Mutate.prototype.viewCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the view field.
 */
WriteQuery.Mutate.prototype.clearView = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the mapping field.
 * @return {Mapping} The value.
 */
WriteQuery.Mutate.prototype.getMapping = function() {
  return /** @type {Mapping} */ (this.get$Value(2));
};


/**
 * Gets the value of the mapping field or the default value if not set.
 * @return {!Mapping} The value.
 */
WriteQuery.Mutate.prototype.getMappingOrDefault = function() {
  return /** @type {!Mapping} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the mapping field.
 * @param {!Mapping} value The value.
 */
WriteQuery.Mutate.prototype.setMapping = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the mapping field has a value.
 */
WriteQuery.Mutate.prototype.hasMapping = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the mapping field.
 */
WriteQuery.Mutate.prototype.mappingCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the mapping field.
 */
WriteQuery.Mutate.prototype.clearMapping = function() {
  this.clear$Field(2);
};



/**
 * Message Insert.
 * @constructor
 * @extends {goog.proto2.Message}
 */
WriteQuery.Insert = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(WriteQuery.Insert, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!WriteQuery.Insert} The cloned message.
 * @override
 */
WriteQuery.Insert.prototype.clone;


/**
 * Gets the value of the table_ref field.
 * @return {TableRef} The value.
 */
WriteQuery.Insert.prototype.getTableRef = function() {
  return /** @type {TableRef} */ (this.get$Value(1));
};


/**
 * Gets the value of the table_ref field or the default value if not set.
 * @return {!TableRef} The value.
 */
WriteQuery.Insert.prototype.getTableRefOrDefault = function() {
  return /** @type {!TableRef} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the table_ref field.
 * @param {!TableRef} value The value.
 */
WriteQuery.Insert.prototype.setTableRef = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the table_ref field has a value.
 */
WriteQuery.Insert.prototype.hasTableRef = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the table_ref field.
 */
WriteQuery.Insert.prototype.tableRefCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the table_ref field.
 */
WriteQuery.Insert.prototype.clearTableRef = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the terms field at the index given.
 * @param {number} index The index to lookup.
 * @return {Term} The value.
 */
WriteQuery.Insert.prototype.getTerms = function(index) {
  return /** @type {Term} */ (this.get$Value(2, index));
};


/**
 * Gets the value of the terms field at the index given or the default value if not set.
 * @param {number} index The index to lookup.
 * @return {!Term} The value.
 */
WriteQuery.Insert.prototype.getTermsOrDefault = function(index) {
  return /** @type {!Term} */ (this.get$ValueOrDefault(2, index));
};


/**
 * Adds a value to the terms field.
 * @param {!Term} value The value to add.
 */
WriteQuery.Insert.prototype.addTerms = function(value) {
  this.add$Value(2, value);
};


/**
 * Returns the array of values in the terms field.
 * @return {!Array.<!Term>} The values in the field.
 */
WriteQuery.Insert.prototype.termsArray = function() {
  return /** @type {!Array.<!Term>} */ (this.array$Values(2));
};


/**
 * @return {boolean} Whether the terms field has a value.
 */
WriteQuery.Insert.prototype.hasTerms = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the terms field.
 */
WriteQuery.Insert.prototype.termsCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the terms field.
 */
WriteQuery.Insert.prototype.clearTerms = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the overwrite field.
 * @return {?boolean} The value.
 */
WriteQuery.Insert.prototype.getOverwrite = function() {
  return /** @type {?boolean} */ (this.get$Value(3));
};


/**
 * Gets the value of the overwrite field or the default value if not set.
 * @return {boolean} The value.
 */
WriteQuery.Insert.prototype.getOverwriteOrDefault = function() {
  return /** @type {boolean} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the overwrite field.
 * @param {boolean} value The value.
 */
WriteQuery.Insert.prototype.setOverwrite = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the overwrite field has a value.
 */
WriteQuery.Insert.prototype.hasOverwrite = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the overwrite field.
 */
WriteQuery.Insert.prototype.overwriteCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the overwrite field.
 */
WriteQuery.Insert.prototype.clearOverwrite = function() {
  this.clear$Field(3);
};



/**
 * Message ForEach.
 * @constructor
 * @extends {goog.proto2.Message}
 */
WriteQuery.ForEach = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(WriteQuery.ForEach, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!WriteQuery.ForEach} The cloned message.
 * @override
 */
WriteQuery.ForEach.prototype.clone;


/**
 * Gets the value of the stream field.
 * @return {Term} The value.
 */
WriteQuery.ForEach.prototype.getStream = function() {
  return /** @type {Term} */ (this.get$Value(1));
};


/**
 * Gets the value of the stream field or the default value if not set.
 * @return {!Term} The value.
 */
WriteQuery.ForEach.prototype.getStreamOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the stream field.
 * @param {!Term} value The value.
 */
WriteQuery.ForEach.prototype.setStream = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the stream field has a value.
 */
WriteQuery.ForEach.prototype.hasStream = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the stream field.
 */
WriteQuery.ForEach.prototype.streamCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the stream field.
 */
WriteQuery.ForEach.prototype.clearStream = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the var field.
 * @return {?string} The value.
 */
WriteQuery.ForEach.prototype.getVar = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the var field or the default value if not set.
 * @return {string} The value.
 */
WriteQuery.ForEach.prototype.getVarOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the var field.
 * @param {string} value The value.
 */
WriteQuery.ForEach.prototype.setVar = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the var field has a value.
 */
WriteQuery.ForEach.prototype.hasVar = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the var field.
 */
WriteQuery.ForEach.prototype.varCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the var field.
 */
WriteQuery.ForEach.prototype.clearVar = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the queries field at the index given.
 * @param {number} index The index to lookup.
 * @return {WriteQuery} The value.
 */
WriteQuery.ForEach.prototype.getQueries = function(index) {
  return /** @type {WriteQuery} */ (this.get$Value(3, index));
};


/**
 * Gets the value of the queries field at the index given or the default value if not set.
 * @param {number} index The index to lookup.
 * @return {!WriteQuery} The value.
 */
WriteQuery.ForEach.prototype.getQueriesOrDefault = function(index) {
  return /** @type {!WriteQuery} */ (this.get$ValueOrDefault(3, index));
};


/**
 * Adds a value to the queries field.
 * @param {!WriteQuery} value The value to add.
 */
WriteQuery.ForEach.prototype.addQueries = function(value) {
  this.add$Value(3, value);
};


/**
 * Returns the array of values in the queries field.
 * @return {!Array.<!WriteQuery>} The values in the field.
 */
WriteQuery.ForEach.prototype.queriesArray = function() {
  return /** @type {!Array.<!WriteQuery>} */ (this.array$Values(3));
};


/**
 * @return {boolean} Whether the queries field has a value.
 */
WriteQuery.ForEach.prototype.hasQueries = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the queries field.
 */
WriteQuery.ForEach.prototype.queriesCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the queries field.
 */
WriteQuery.ForEach.prototype.clearQueries = function() {
  this.clear$Field(3);
};



/**
 * Message PointUpdate.
 * @constructor
 * @extends {goog.proto2.Message}
 */
WriteQuery.PointUpdate = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(WriteQuery.PointUpdate, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!WriteQuery.PointUpdate} The cloned message.
 * @override
 */
WriteQuery.PointUpdate.prototype.clone;


/**
 * Gets the value of the table_ref field.
 * @return {TableRef} The value.
 */
WriteQuery.PointUpdate.prototype.getTableRef = function() {
  return /** @type {TableRef} */ (this.get$Value(1));
};


/**
 * Gets the value of the table_ref field or the default value if not set.
 * @return {!TableRef} The value.
 */
WriteQuery.PointUpdate.prototype.getTableRefOrDefault = function() {
  return /** @type {!TableRef} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the table_ref field.
 * @param {!TableRef} value The value.
 */
WriteQuery.PointUpdate.prototype.setTableRef = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the table_ref field has a value.
 */
WriteQuery.PointUpdate.prototype.hasTableRef = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the table_ref field.
 */
WriteQuery.PointUpdate.prototype.tableRefCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the table_ref field.
 */
WriteQuery.PointUpdate.prototype.clearTableRef = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the attrname field.
 * @return {?string} The value.
 */
WriteQuery.PointUpdate.prototype.getAttrname = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the attrname field or the default value if not set.
 * @return {string} The value.
 */
WriteQuery.PointUpdate.prototype.getAttrnameOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the attrname field.
 * @param {string} value The value.
 */
WriteQuery.PointUpdate.prototype.setAttrname = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the attrname field has a value.
 */
WriteQuery.PointUpdate.prototype.hasAttrname = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the attrname field.
 */
WriteQuery.PointUpdate.prototype.attrnameCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the attrname field.
 */
WriteQuery.PointUpdate.prototype.clearAttrname = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the key field.
 * @return {Term} The value.
 */
WriteQuery.PointUpdate.prototype.getKey = function() {
  return /** @type {Term} */ (this.get$Value(3));
};


/**
 * Gets the value of the key field or the default value if not set.
 * @return {!Term} The value.
 */
WriteQuery.PointUpdate.prototype.getKeyOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the key field.
 * @param {!Term} value The value.
 */
WriteQuery.PointUpdate.prototype.setKey = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the key field has a value.
 */
WriteQuery.PointUpdate.prototype.hasKey = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the key field.
 */
WriteQuery.PointUpdate.prototype.keyCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the key field.
 */
WriteQuery.PointUpdate.prototype.clearKey = function() {
  this.clear$Field(3);
};


/**
 * Gets the value of the mapping field.
 * @return {Mapping} The value.
 */
WriteQuery.PointUpdate.prototype.getMapping = function() {
  return /** @type {Mapping} */ (this.get$Value(4));
};


/**
 * Gets the value of the mapping field or the default value if not set.
 * @return {!Mapping} The value.
 */
WriteQuery.PointUpdate.prototype.getMappingOrDefault = function() {
  return /** @type {!Mapping} */ (this.get$ValueOrDefault(4));
};


/**
 * Sets the value of the mapping field.
 * @param {!Mapping} value The value.
 */
WriteQuery.PointUpdate.prototype.setMapping = function(value) {
  this.set$Value(4, value);
};


/**
 * @return {boolean} Whether the mapping field has a value.
 */
WriteQuery.PointUpdate.prototype.hasMapping = function() {
  return this.has$Value(4);
};


/**
 * @return {number} The number of values in the mapping field.
 */
WriteQuery.PointUpdate.prototype.mappingCount = function() {
  return this.count$Values(4);
};


/**
 * Clears the values in the mapping field.
 */
WriteQuery.PointUpdate.prototype.clearMapping = function() {
  this.clear$Field(4);
};



/**
 * Message PointDelete.
 * @constructor
 * @extends {goog.proto2.Message}
 */
WriteQuery.PointDelete = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(WriteQuery.PointDelete, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!WriteQuery.PointDelete} The cloned message.
 * @override
 */
WriteQuery.PointDelete.prototype.clone;


/**
 * Gets the value of the table_ref field.
 * @return {TableRef} The value.
 */
WriteQuery.PointDelete.prototype.getTableRef = function() {
  return /** @type {TableRef} */ (this.get$Value(1));
};


/**
 * Gets the value of the table_ref field or the default value if not set.
 * @return {!TableRef} The value.
 */
WriteQuery.PointDelete.prototype.getTableRefOrDefault = function() {
  return /** @type {!TableRef} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the table_ref field.
 * @param {!TableRef} value The value.
 */
WriteQuery.PointDelete.prototype.setTableRef = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the table_ref field has a value.
 */
WriteQuery.PointDelete.prototype.hasTableRef = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the table_ref field.
 */
WriteQuery.PointDelete.prototype.tableRefCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the table_ref field.
 */
WriteQuery.PointDelete.prototype.clearTableRef = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the attrname field.
 * @return {?string} The value.
 */
WriteQuery.PointDelete.prototype.getAttrname = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the attrname field or the default value if not set.
 * @return {string} The value.
 */
WriteQuery.PointDelete.prototype.getAttrnameOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the attrname field.
 * @param {string} value The value.
 */
WriteQuery.PointDelete.prototype.setAttrname = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the attrname field has a value.
 */
WriteQuery.PointDelete.prototype.hasAttrname = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the attrname field.
 */
WriteQuery.PointDelete.prototype.attrnameCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the attrname field.
 */
WriteQuery.PointDelete.prototype.clearAttrname = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the key field.
 * @return {Term} The value.
 */
WriteQuery.PointDelete.prototype.getKey = function() {
  return /** @type {Term} */ (this.get$Value(3));
};


/**
 * Gets the value of the key field or the default value if not set.
 * @return {!Term} The value.
 */
WriteQuery.PointDelete.prototype.getKeyOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the key field.
 * @param {!Term} value The value.
 */
WriteQuery.PointDelete.prototype.setKey = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the key field has a value.
 */
WriteQuery.PointDelete.prototype.hasKey = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the key field.
 */
WriteQuery.PointDelete.prototype.keyCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the key field.
 */
WriteQuery.PointDelete.prototype.clearKey = function() {
  this.clear$Field(3);
};



/**
 * Message PointMutate.
 * @constructor
 * @extends {goog.proto2.Message}
 */
WriteQuery.PointMutate = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(WriteQuery.PointMutate, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!WriteQuery.PointMutate} The cloned message.
 * @override
 */
WriteQuery.PointMutate.prototype.clone;


/**
 * Gets the value of the table_ref field.
 * @return {TableRef} The value.
 */
WriteQuery.PointMutate.prototype.getTableRef = function() {
  return /** @type {TableRef} */ (this.get$Value(1));
};


/**
 * Gets the value of the table_ref field or the default value if not set.
 * @return {!TableRef} The value.
 */
WriteQuery.PointMutate.prototype.getTableRefOrDefault = function() {
  return /** @type {!TableRef} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the table_ref field.
 * @param {!TableRef} value The value.
 */
WriteQuery.PointMutate.prototype.setTableRef = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the table_ref field has a value.
 */
WriteQuery.PointMutate.prototype.hasTableRef = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the table_ref field.
 */
WriteQuery.PointMutate.prototype.tableRefCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the table_ref field.
 */
WriteQuery.PointMutate.prototype.clearTableRef = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the attrname field.
 * @return {?string} The value.
 */
WriteQuery.PointMutate.prototype.getAttrname = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the attrname field or the default value if not set.
 * @return {string} The value.
 */
WriteQuery.PointMutate.prototype.getAttrnameOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the attrname field.
 * @param {string} value The value.
 */
WriteQuery.PointMutate.prototype.setAttrname = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the attrname field has a value.
 */
WriteQuery.PointMutate.prototype.hasAttrname = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the attrname field.
 */
WriteQuery.PointMutate.prototype.attrnameCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the attrname field.
 */
WriteQuery.PointMutate.prototype.clearAttrname = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the key field.
 * @return {Term} The value.
 */
WriteQuery.PointMutate.prototype.getKey = function() {
  return /** @type {Term} */ (this.get$Value(3));
};


/**
 * Gets the value of the key field or the default value if not set.
 * @return {!Term} The value.
 */
WriteQuery.PointMutate.prototype.getKeyOrDefault = function() {
  return /** @type {!Term} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the key field.
 * @param {!Term} value The value.
 */
WriteQuery.PointMutate.prototype.setKey = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the key field has a value.
 */
WriteQuery.PointMutate.prototype.hasKey = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the key field.
 */
WriteQuery.PointMutate.prototype.keyCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the key field.
 */
WriteQuery.PointMutate.prototype.clearKey = function() {
  this.clear$Field(3);
};


/**
 * Gets the value of the mapping field.
 * @return {Mapping} The value.
 */
WriteQuery.PointMutate.prototype.getMapping = function() {
  return /** @type {Mapping} */ (this.get$Value(4));
};


/**
 * Gets the value of the mapping field or the default value if not set.
 * @return {!Mapping} The value.
 */
WriteQuery.PointMutate.prototype.getMappingOrDefault = function() {
  return /** @type {!Mapping} */ (this.get$ValueOrDefault(4));
};


/**
 * Sets the value of the mapping field.
 * @param {!Mapping} value The value.
 */
WriteQuery.PointMutate.prototype.setMapping = function(value) {
  this.set$Value(4, value);
};


/**
 * @return {boolean} Whether the mapping field has a value.
 */
WriteQuery.PointMutate.prototype.hasMapping = function() {
  return this.has$Value(4);
};


/**
 * @return {number} The number of values in the mapping field.
 */
WriteQuery.PointMutate.prototype.mappingCount = function() {
  return this.count$Values(4);
};


/**
 * Clears the values in the mapping field.
 */
WriteQuery.PointMutate.prototype.clearMapping = function() {
  this.clear$Field(4);
};



/**
 * Message MetaQuery.
 * @constructor
 * @extends {goog.proto2.Message}
 */
MetaQuery = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(MetaQuery, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!MetaQuery} The cloned message.
 * @override
 */
MetaQuery.prototype.clone;


/**
 * Gets the value of the type field.
 * @return {?MetaQuery.MetaQueryType} The value.
 */
MetaQuery.prototype.getType = function() {
  return /** @type {?MetaQuery.MetaQueryType} */ (this.get$Value(1));
};


/**
 * Gets the value of the type field or the default value if not set.
 * @return {MetaQuery.MetaQueryType} The value.
 */
MetaQuery.prototype.getTypeOrDefault = function() {
  return /** @type {MetaQuery.MetaQueryType} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the type field.
 * @param {MetaQuery.MetaQueryType} value The value.
 */
MetaQuery.prototype.setType = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the type field has a value.
 */
MetaQuery.prototype.hasType = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the type field.
 */
MetaQuery.prototype.typeCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the type field.
 */
MetaQuery.prototype.clearType = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the db_name field.
 * @return {?string} The value.
 */
MetaQuery.prototype.getDbName = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the db_name field or the default value if not set.
 * @return {string} The value.
 */
MetaQuery.prototype.getDbNameOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the db_name field.
 * @param {string} value The value.
 */
MetaQuery.prototype.setDbName = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the db_name field has a value.
 */
MetaQuery.prototype.hasDbName = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the db_name field.
 */
MetaQuery.prototype.dbNameCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the db_name field.
 */
MetaQuery.prototype.clearDbName = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the create_table field.
 * @return {MetaQuery.CreateTable} The value.
 */
MetaQuery.prototype.getCreateTable = function() {
  return /** @type {MetaQuery.CreateTable} */ (this.get$Value(3));
};


/**
 * Gets the value of the create_table field or the default value if not set.
 * @return {!MetaQuery.CreateTable} The value.
 */
MetaQuery.prototype.getCreateTableOrDefault = function() {
  return /** @type {!MetaQuery.CreateTable} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the create_table field.
 * @param {!MetaQuery.CreateTable} value The value.
 */
MetaQuery.prototype.setCreateTable = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the create_table field has a value.
 */
MetaQuery.prototype.hasCreateTable = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the create_table field.
 */
MetaQuery.prototype.createTableCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the create_table field.
 */
MetaQuery.prototype.clearCreateTable = function() {
  this.clear$Field(3);
};


/**
 * Gets the value of the drop_table field.
 * @return {TableRef} The value.
 */
MetaQuery.prototype.getDropTable = function() {
  return /** @type {TableRef} */ (this.get$Value(4));
};


/**
 * Gets the value of the drop_table field or the default value if not set.
 * @return {!TableRef} The value.
 */
MetaQuery.prototype.getDropTableOrDefault = function() {
  return /** @type {!TableRef} */ (this.get$ValueOrDefault(4));
};


/**
 * Sets the value of the drop_table field.
 * @param {!TableRef} value The value.
 */
MetaQuery.prototype.setDropTable = function(value) {
  this.set$Value(4, value);
};


/**
 * @return {boolean} Whether the drop_table field has a value.
 */
MetaQuery.prototype.hasDropTable = function() {
  return this.has$Value(4);
};


/**
 * @return {number} The number of values in the drop_table field.
 */
MetaQuery.prototype.dropTableCount = function() {
  return this.count$Values(4);
};


/**
 * Clears the values in the drop_table field.
 */
MetaQuery.prototype.clearDropTable = function() {
  this.clear$Field(4);
};


/**
 * Enumeration MetaQueryType.
 * @enum {number}
 */
MetaQuery.MetaQueryType = {
  CREATE_DB: 1,
  DROP_DB: 2,
  LIST_DBS: 3,
  CREATE_TABLE: 4,
  DROP_TABLE: 5,
  LIST_TABLES: 6
};



/**
 * Message CreateTable.
 * @constructor
 * @extends {goog.proto2.Message}
 */
MetaQuery.CreateTable = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(MetaQuery.CreateTable, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!MetaQuery.CreateTable} The cloned message.
 * @override
 */
MetaQuery.CreateTable.prototype.clone;


/**
 * Gets the value of the datacenter field.
 * @return {?string} The value.
 */
MetaQuery.CreateTable.prototype.getDatacenter = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the datacenter field or the default value if not set.
 * @return {string} The value.
 */
MetaQuery.CreateTable.prototype.getDatacenterOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the datacenter field.
 * @param {string} value The value.
 */
MetaQuery.CreateTable.prototype.setDatacenter = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the datacenter field has a value.
 */
MetaQuery.CreateTable.prototype.hasDatacenter = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the datacenter field.
 */
MetaQuery.CreateTable.prototype.datacenterCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the datacenter field.
 */
MetaQuery.CreateTable.prototype.clearDatacenter = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the table_ref field.
 * @return {TableRef} The value.
 */
MetaQuery.CreateTable.prototype.getTableRef = function() {
  return /** @type {TableRef} */ (this.get$Value(3));
};


/**
 * Gets the value of the table_ref field or the default value if not set.
 * @return {!TableRef} The value.
 */
MetaQuery.CreateTable.prototype.getTableRefOrDefault = function() {
  return /** @type {!TableRef} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the table_ref field.
 * @param {!TableRef} value The value.
 */
MetaQuery.CreateTable.prototype.setTableRef = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the table_ref field has a value.
 */
MetaQuery.CreateTable.prototype.hasTableRef = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the table_ref field.
 */
MetaQuery.CreateTable.prototype.tableRefCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the table_ref field.
 */
MetaQuery.CreateTable.prototype.clearTableRef = function() {
  this.clear$Field(3);
};


/**
 * Gets the value of the primary_key field.
 * @return {?string} The value.
 */
MetaQuery.CreateTable.prototype.getPrimaryKey = function() {
  return /** @type {?string} */ (this.get$Value(4));
};


/**
 * Gets the value of the primary_key field or the default value if not set.
 * @return {string} The value.
 */
MetaQuery.CreateTable.prototype.getPrimaryKeyOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(4));
};


/**
 * Sets the value of the primary_key field.
 * @param {string} value The value.
 */
MetaQuery.CreateTable.prototype.setPrimaryKey = function(value) {
  this.set$Value(4, value);
};


/**
 * @return {boolean} Whether the primary_key field has a value.
 */
MetaQuery.CreateTable.prototype.hasPrimaryKey = function() {
  return this.has$Value(4);
};


/**
 * @return {number} The number of values in the primary_key field.
 */
MetaQuery.CreateTable.prototype.primaryKeyCount = function() {
  return this.count$Values(4);
};


/**
 * Clears the values in the primary_key field.
 */
MetaQuery.CreateTable.prototype.clearPrimaryKey = function() {
  this.clear$Field(4);
};


/**
 * Gets the value of the cache_size field.
 * @return {?string} The value.
 */
MetaQuery.CreateTable.prototype.getCacheSize = function() {
  return /** @type {?string} */ (this.get$Value(5));
};


/**
 * Gets the value of the cache_size field or the default value if not set.
 * @return {string} The value.
 */
MetaQuery.CreateTable.prototype.getCacheSizeOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(5));
};


/**
 * Sets the value of the cache_size field.
 * @param {string} value The value.
 */
MetaQuery.CreateTable.prototype.setCacheSize = function(value) {
  this.set$Value(5, value);
};


/**
 * @return {boolean} Whether the cache_size field has a value.
 */
MetaQuery.CreateTable.prototype.hasCacheSize = function() {
  return this.has$Value(5);
};


/**
 * @return {number} The number of values in the cache_size field.
 */
MetaQuery.CreateTable.prototype.cacheSizeCount = function() {
  return this.count$Values(5);
};


/**
 * Clears the values in the cache_size field.
 */
MetaQuery.CreateTable.prototype.clearCacheSize = function() {
  this.clear$Field(5);
};



/**
 * Message Query.
 * @constructor
 * @extends {goog.proto2.Message}
 * @export
 */
Query = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Query, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Query} The cloned message.
 * @override
 */
Query.prototype.clone;


/**
 * Gets the value of the type field.
 * @return {?Query.QueryType} The value.
 */
Query.prototype.getType = function() {
  return /** @type {?Query.QueryType} */ (this.get$Value(1));
};


/**
 * Gets the value of the type field or the default value if not set.
 * @return {Query.QueryType} The value.
 */
Query.prototype.getTypeOrDefault = function() {
  return /** @type {Query.QueryType} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the type field.
 * @param {Query.QueryType} value The value.
 */
Query.prototype.setType = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the type field has a value.
 */
Query.prototype.hasType = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the type field.
 */
Query.prototype.typeCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the type field.
 */
Query.prototype.clearType = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the token field.
 * @return {?string} The value.
 */
Query.prototype.getToken = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the token field or the default value if not set.
 * @return {string} The value.
 */
Query.prototype.getTokenOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the token field.
 * @param {string} value The value.
 */
Query.prototype.setToken = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the token field has a value.
 */
Query.prototype.hasToken = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the token field.
 */
Query.prototype.tokenCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the token field.
 */
Query.prototype.clearToken = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the read_query field.
 * @return {ReadQuery} The value.
 */
Query.prototype.getReadQuery = function() {
  return /** @type {ReadQuery} */ (this.get$Value(3));
};


/**
 * Gets the value of the read_query field or the default value if not set.
 * @return {!ReadQuery} The value.
 */
Query.prototype.getReadQueryOrDefault = function() {
  return /** @type {!ReadQuery} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the read_query field.
 * @param {!ReadQuery} value The value.
 */
Query.prototype.setReadQuery = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the read_query field has a value.
 */
Query.prototype.hasReadQuery = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the read_query field.
 */
Query.prototype.readQueryCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the read_query field.
 */
Query.prototype.clearReadQuery = function() {
  this.clear$Field(3);
};


/**
 * Gets the value of the write_query field.
 * @return {WriteQuery} The value.
 */
Query.prototype.getWriteQuery = function() {
  return /** @type {WriteQuery} */ (this.get$Value(4));
};


/**
 * Gets the value of the write_query field or the default value if not set.
 * @return {!WriteQuery} The value.
 */
Query.prototype.getWriteQueryOrDefault = function() {
  return /** @type {!WriteQuery} */ (this.get$ValueOrDefault(4));
};


/**
 * Sets the value of the write_query field.
 * @param {!WriteQuery} value The value.
 */
Query.prototype.setWriteQuery = function(value) {
  this.set$Value(4, value);
};


/**
 * @return {boolean} Whether the write_query field has a value.
 */
Query.prototype.hasWriteQuery = function() {
  return this.has$Value(4);
};


/**
 * @return {number} The number of values in the write_query field.
 */
Query.prototype.writeQueryCount = function() {
  return this.count$Values(4);
};


/**
 * Clears the values in the write_query field.
 */
Query.prototype.clearWriteQuery = function() {
  this.clear$Field(4);
};


/**
 * Gets the value of the meta_query field.
 * @return {MetaQuery} The value.
 */
Query.prototype.getMetaQuery = function() {
  return /** @type {MetaQuery} */ (this.get$Value(5));
};


/**
 * Gets the value of the meta_query field or the default value if not set.
 * @return {!MetaQuery} The value.
 */
Query.prototype.getMetaQueryOrDefault = function() {
  return /** @type {!MetaQuery} */ (this.get$ValueOrDefault(5));
};


/**
 * Sets the value of the meta_query field.
 * @param {!MetaQuery} value The value.
 */
Query.prototype.setMetaQuery = function(value) {
  this.set$Value(5, value);
};


/**
 * @return {boolean} Whether the meta_query field has a value.
 */
Query.prototype.hasMetaQuery = function() {
  return this.has$Value(5);
};


/**
 * @return {number} The number of values in the meta_query field.
 */
Query.prototype.metaQueryCount = function() {
  return this.count$Values(5);
};


/**
 * Clears the values in the meta_query field.
 */
Query.prototype.clearMetaQuery = function() {
  this.clear$Field(5);
};


/**
 * Enumeration QueryType.
 * @enum {number}
 */
Query.QueryType = {
  READ: 1,
  WRITE: 2,
  CONTINUE: 3,
  STOP: 4,
  META: 5
};



/**
 * Message Response.
 * @constructor
 * @extends {goog.proto2.Message}
 * @export
 */
Response = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Response, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Response} The cloned message.
 * @override
 */
Response.prototype.clone;


/**
 * Gets the value of the status_code field.
 * @return {?Response.StatusCode} The value.
 */
Response.prototype.getStatusCode = function() {
  return /** @type {?Response.StatusCode} */ (this.get$Value(1));
};


/**
 * Gets the value of the status_code field or the default value if not set.
 * @return {Response.StatusCode} The value.
 */
Response.prototype.getStatusCodeOrDefault = function() {
  return /** @type {Response.StatusCode} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the status_code field.
 * @param {Response.StatusCode} value The value.
 */
Response.prototype.setStatusCode = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the status_code field has a value.
 */
Response.prototype.hasStatusCode = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the status_code field.
 */
Response.prototype.statusCodeCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the status_code field.
 */
Response.prototype.clearStatusCode = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the token field.
 * @return {?string} The value.
 */
Response.prototype.getToken = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the token field or the default value if not set.
 * @return {string} The value.
 */
Response.prototype.getTokenOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the token field.
 * @param {string} value The value.
 */
Response.prototype.setToken = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the token field has a value.
 */
Response.prototype.hasToken = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the token field.
 */
Response.prototype.tokenCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the token field.
 */
Response.prototype.clearToken = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the response field at the index given.
 * @param {number} index The index to lookup.
 * @return {?string} The value.
 */
Response.prototype.getResponse = function(index) {
  return /** @type {?string} */ (this.get$Value(3, index));
};


/**
 * Gets the value of the response field at the index given or the default value if not set.
 * @param {number} index The index to lookup.
 * @return {string} The value.
 */
Response.prototype.getResponseOrDefault = function(index) {
  return /** @type {string} */ (this.get$ValueOrDefault(3, index));
};


/**
 * Adds a value to the response field.
 * @param {string} value The value to add.
 */
Response.prototype.addResponse = function(value) {
  this.add$Value(3, value);
};


/**
 * Returns the array of values in the response field.
 * @return {!Array.<string>} The values in the field.
 */
Response.prototype.responseArray = function() {
  return /** @type {!Array.<string>} */ (this.array$Values(3));
};


/**
 * @return {boolean} Whether the response field has a value.
 */
Response.prototype.hasResponse = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the response field.
 */
Response.prototype.responseCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the response field.
 */
Response.prototype.clearResponse = function() {
  this.clear$Field(3);
};


/**
 * Gets the value of the error_message field.
 * @return {?string} The value.
 */
Response.prototype.getErrorMessage = function() {
  return /** @type {?string} */ (this.get$Value(4));
};


/**
 * Gets the value of the error_message field or the default value if not set.
 * @return {string} The value.
 */
Response.prototype.getErrorMessageOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(4));
};


/**
 * Sets the value of the error_message field.
 * @param {string} value The value.
 */
Response.prototype.setErrorMessage = function(value) {
  this.set$Value(4, value);
};


/**
 * @return {boolean} Whether the error_message field has a value.
 */
Response.prototype.hasErrorMessage = function() {
  return this.has$Value(4);
};


/**
 * @return {number} The number of values in the error_message field.
 */
Response.prototype.errorMessageCount = function() {
  return this.count$Values(4);
};


/**
 * Clears the values in the error_message field.
 */
Response.prototype.clearErrorMessage = function() {
  this.clear$Field(4);
};


/**
 * Gets the value of the backtrace field.
 * @return {Response.Backtrace} The value.
 */
Response.prototype.getBacktrace = function() {
  return /** @type {Response.Backtrace} */ (this.get$Value(5));
};


/**
 * Gets the value of the backtrace field or the default value if not set.
 * @return {!Response.Backtrace} The value.
 */
Response.prototype.getBacktraceOrDefault = function() {
  return /** @type {!Response.Backtrace} */ (this.get$ValueOrDefault(5));
};


/**
 * Sets the value of the backtrace field.
 * @param {!Response.Backtrace} value The value.
 */
Response.prototype.setBacktrace = function(value) {
  this.set$Value(5, value);
};


/**
 * @return {boolean} Whether the backtrace field has a value.
 */
Response.prototype.hasBacktrace = function() {
  return this.has$Value(5);
};


/**
 * @return {number} The number of values in the backtrace field.
 */
Response.prototype.backtraceCount = function() {
  return this.count$Values(5);
};


/**
 * Clears the values in the backtrace field.
 */
Response.prototype.clearBacktrace = function() {
  this.clear$Field(5);
};


/**
 * Enumeration StatusCode.
 * @enum {number}
 */
Response.StatusCode = {
  SUCCESS_EMPTY: 0,
  SUCCESS_JSON: 1,
  SUCCESS_PARTIAL: 2,
  SUCCESS_STREAM: 3,
  BROKEN_CLIENT: 101,
  BAD_QUERY: 102,
  RUNTIME_ERROR: 103
};



/**
 * Message Backtrace.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Response.Backtrace = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Response.Backtrace, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Response.Backtrace} The cloned message.
 * @override
 */
Response.Backtrace.prototype.clone;


/**
 * Gets the value of the frame field at the index given.
 * @param {number} index The index to lookup.
 * @return {?string} The value.
 */
Response.Backtrace.prototype.getFrame = function(index) {
  return /** @type {?string} */ (this.get$Value(1, index));
};


/**
 * Gets the value of the frame field at the index given or the default value if not set.
 * @param {number} index The index to lookup.
 * @return {string} The value.
 */
Response.Backtrace.prototype.getFrameOrDefault = function(index) {
  return /** @type {string} */ (this.get$ValueOrDefault(1, index));
};


/**
 * Adds a value to the frame field.
 * @param {string} value The value to add.
 */
Response.Backtrace.prototype.addFrame = function(value) {
  this.add$Value(1, value);
};


/**
 * Returns the array of values in the frame field.
 * @return {!Array.<string>} The values in the field.
 */
Response.Backtrace.prototype.frameArray = function() {
  return /** @type {!Array.<string>} */ (this.array$Values(1));
};


/**
 * @return {boolean} Whether the frame field has a value.
 */
Response.Backtrace.prototype.hasFrame = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the frame field.
 */
Response.Backtrace.prototype.frameCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the frame field.
 */
Response.Backtrace.prototype.clearFrame = function() {
  this.clear$Field(1);
};





goog.proto2.Message.set$Metadata(TableRef, {
  0: {
    name: 'TableRef',
    fullName: 'TableRef'
  },
  1: {
    name: 'db_name',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  2: {
    name: 'table_name',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  3: {
    name: 'use_outdated',
    fieldType: goog.proto2.Message.FieldType.BOOL,
    defaultValue: 0,
    type: Boolean
  }
});


goog.proto2.Message.set$Metadata(VarTermTuple, {
  0: {
    name: 'VarTermTuple',
    fullName: 'VarTermTuple'
  },
  1: {
    name: 'var',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  2: {
    name: 'term',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  }
});


goog.proto2.Message.set$Metadata(Term, {
  0: {
    name: 'Term',
    fullName: 'Term'
  },
  1: {
    name: 'type',
    fieldType: goog.proto2.Message.FieldType.ENUM,
    defaultValue: Term.TermType.JSON_NULL,
    type: Term.TermType
  },
  2: {
    name: 'var',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  3: {
    name: 'let',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term.Let
  },
  4: {
    name: 'call',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term.Call
  },
  5: {
    name: 'if_',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term.If
  },
  6: {
    name: 'error',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  7: {
    name: 'number',
    fieldType: goog.proto2.Message.FieldType.DOUBLE,
    type: Number
  },
  8: {
    name: 'valuestring',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  9: {
    name: 'jsonstring',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  10: {
    name: 'valuebool',
    fieldType: goog.proto2.Message.FieldType.BOOL,
    type: Boolean
  },
  11: {
    name: 'array',
    repeated: true,
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  },
  12: {
    name: 'object',
    repeated: true,
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: VarTermTuple
  },
  14: {
    name: 'get_by_key',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term.GetByKey
  },
  15: {
    name: 'table',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term.Table
  },
  16: {
    name: 'javascript',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  }
});


goog.proto2.Message.set$Metadata(Term.Let, {
  0: {
    name: 'Let',
    containingType: Term,
    fullName: 'Term.Let'
  },
  1: {
    name: 'binds',
    repeated: true,
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: VarTermTuple
  },
  2: {
    name: 'expr',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  }
});


goog.proto2.Message.set$Metadata(Term.Call, {
  0: {
    name: 'Call',
    containingType: Term,
    fullName: 'Term.Call'
  },
  1: {
    name: 'builtin',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Builtin
  },
  2: {
    name: 'args',
    repeated: true,
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  }
});


goog.proto2.Message.set$Metadata(Term.If, {
  0: {
    name: 'If',
    containingType: Term,
    fullName: 'Term.If'
  },
  1: {
    name: 'test',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  },
  2: {
    name: 'true_branch',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  },
  3: {
    name: 'false_branch',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  }
});


goog.proto2.Message.set$Metadata(Term.GetByKey, {
  0: {
    name: 'GetByKey',
    containingType: Term,
    fullName: 'Term.GetByKey'
  },
  1: {
    name: 'table_ref',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: TableRef
  },
  2: {
    name: 'attrname',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  3: {
    name: 'key',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  }
});


goog.proto2.Message.set$Metadata(Term.Table, {
  0: {
    name: 'Table',
    containingType: Term,
    fullName: 'Term.Table'
  },
  1: {
    name: 'table_ref',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: TableRef
  }
});


goog.proto2.Message.set$Metadata(Builtin, {
  0: {
    name: 'Builtin',
    fullName: 'Builtin'
  },
  1: {
    name: 'type',
    fieldType: goog.proto2.Message.FieldType.ENUM,
    defaultValue: Builtin.BuiltinType.NOT,
    type: Builtin.BuiltinType
  },
  2: {
    name: 'attr',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  3: {
    name: 'attrs',
    repeated: true,
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  4: {
    name: 'comparison',
    fieldType: goog.proto2.Message.FieldType.ENUM,
    defaultValue: Builtin.Comparison.EQ,
    type: Builtin.Comparison
  },
  5: {
    name: 'filter',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Builtin.Filter
  },
  6: {
    name: 'map',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Builtin.Map
  },
  7: {
    name: 'concat_map',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Builtin.ConcatMap
  },
  8: {
    name: 'order_by',
    repeated: true,
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Builtin.OrderBy
  },
  9: {
    name: 'reduce',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Reduction
  },
  10: {
    name: 'grouped_map_reduce',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Builtin.GroupedMapReduce
  },
  11: {
    name: 'range',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Builtin.Range
  }
});


goog.proto2.Message.set$Metadata(Builtin.Filter, {
  0: {
    name: 'Filter',
    containingType: Builtin,
    fullName: 'Builtin.Filter'
  },
  1: {
    name: 'predicate',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Predicate
  }
});


goog.proto2.Message.set$Metadata(Builtin.Map, {
  0: {
    name: 'Map',
    containingType: Builtin,
    fullName: 'Builtin.Map'
  },
  1: {
    name: 'mapping',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Mapping
  }
});


goog.proto2.Message.set$Metadata(Builtin.ConcatMap, {
  0: {
    name: 'ConcatMap',
    containingType: Builtin,
    fullName: 'Builtin.ConcatMap'
  },
  1: {
    name: 'mapping',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Mapping
  }
});


goog.proto2.Message.set$Metadata(Builtin.OrderBy, {
  0: {
    name: 'OrderBy',
    containingType: Builtin,
    fullName: 'Builtin.OrderBy'
  },
  1: {
    name: 'attr',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  2: {
    name: 'ascending',
    fieldType: goog.proto2.Message.FieldType.BOOL,
    defaultValue: 1,
    type: Boolean
  }
});


goog.proto2.Message.set$Metadata(Builtin.GroupedMapReduce, {
  0: {
    name: 'GroupedMapReduce',
    containingType: Builtin,
    fullName: 'Builtin.GroupedMapReduce'
  },
  1: {
    name: 'group_mapping',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Mapping
  },
  2: {
    name: 'value_mapping',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Mapping
  },
  3: {
    name: 'reduction',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Reduction
  }
});


goog.proto2.Message.set$Metadata(Builtin.Range, {
  0: {
    name: 'Range',
    containingType: Builtin,
    fullName: 'Builtin.Range'
  },
  1: {
    name: 'attrname',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  2: {
    name: 'lowerbound',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  },
  3: {
    name: 'upperbound',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  }
});


goog.proto2.Message.set$Metadata(Reduction, {
  0: {
    name: 'Reduction',
    fullName: 'Reduction'
  },
  1: {
    name: 'base',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  },
  2: {
    name: 'var1',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  3: {
    name: 'var2',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  4: {
    name: 'body',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  }
});


goog.proto2.Message.set$Metadata(Mapping, {
  0: {
    name: 'Mapping',
    fullName: 'Mapping'
  },
  1: {
    name: 'arg',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  2: {
    name: 'body',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  }
});


goog.proto2.Message.set$Metadata(Predicate, {
  0: {
    name: 'Predicate',
    fullName: 'Predicate'
  },
  1: {
    name: 'arg',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  2: {
    name: 'body',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  }
});


goog.proto2.Message.set$Metadata(ReadQuery, {
  0: {
    name: 'ReadQuery',
    fullName: 'ReadQuery'
  },
  1: {
    name: 'term',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  },
  2: {
    name: 'max_chunk_size',
    fieldType: goog.proto2.Message.FieldType.INT64,
    type: String
  },
  3: {
    name: 'max_age',
    fieldType: goog.proto2.Message.FieldType.INT64,
    type: String
  }
});


goog.proto2.Message.set$Metadata(WriteQuery, {
  0: {
    name: 'WriteQuery',
    fullName: 'WriteQuery'
  },
  1: {
    name: 'type',
    fieldType: goog.proto2.Message.FieldType.ENUM,
    defaultValue: WriteQuery.WriteQueryType.UPDATE,
    type: WriteQuery.WriteQueryType
  },
  11: {
    name: 'atomic',
    fieldType: goog.proto2.Message.FieldType.BOOL,
    defaultValue: 1,
    type: Boolean
  },
  2: {
    name: 'update',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: WriteQuery.Update
  },
  3: {
    name: 'delete',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: WriteQuery.Delete
  },
  4: {
    name: 'mutate',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: WriteQuery.Mutate
  },
  5: {
    name: 'insert',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: WriteQuery.Insert
  },
  7: {
    name: 'for_each',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: WriteQuery.ForEach
  },
  8: {
    name: 'point_update',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: WriteQuery.PointUpdate
  },
  9: {
    name: 'point_delete',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: WriteQuery.PointDelete
  },
  10: {
    name: 'point_mutate',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: WriteQuery.PointMutate
  }
});


goog.proto2.Message.set$Metadata(WriteQuery.Update, {
  0: {
    name: 'Update',
    containingType: WriteQuery,
    fullName: 'WriteQuery.Update'
  },
  1: {
    name: 'view',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  },
  2: {
    name: 'mapping',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Mapping
  }
});


goog.proto2.Message.set$Metadata(WriteQuery.Delete, {
  0: {
    name: 'Delete',
    containingType: WriteQuery,
    fullName: 'WriteQuery.Delete'
  },
  1: {
    name: 'view',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  }
});


goog.proto2.Message.set$Metadata(WriteQuery.Mutate, {
  0: {
    name: 'Mutate',
    containingType: WriteQuery,
    fullName: 'WriteQuery.Mutate'
  },
  1: {
    name: 'view',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  },
  2: {
    name: 'mapping',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Mapping
  }
});


goog.proto2.Message.set$Metadata(WriteQuery.Insert, {
  0: {
    name: 'Insert',
    containingType: WriteQuery,
    fullName: 'WriteQuery.Insert'
  },
  1: {
    name: 'table_ref',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: TableRef
  },
  2: {
    name: 'terms',
    repeated: true,
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  },
  3: {
    name: 'overwrite',
    fieldType: goog.proto2.Message.FieldType.BOOL,
    defaultValue: 0,
    type: Boolean
  }
});


goog.proto2.Message.set$Metadata(WriteQuery.ForEach, {
  0: {
    name: 'ForEach',
    containingType: WriteQuery,
    fullName: 'WriteQuery.ForEach'
  },
  1: {
    name: 'stream',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  },
  2: {
    name: 'var',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  3: {
    name: 'queries',
    repeated: true,
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: WriteQuery
  }
});


goog.proto2.Message.set$Metadata(WriteQuery.PointUpdate, {
  0: {
    name: 'PointUpdate',
    containingType: WriteQuery,
    fullName: 'WriteQuery.PointUpdate'
  },
  1: {
    name: 'table_ref',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: TableRef
  },
  2: {
    name: 'attrname',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  3: {
    name: 'key',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  },
  4: {
    name: 'mapping',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Mapping
  }
});


goog.proto2.Message.set$Metadata(WriteQuery.PointDelete, {
  0: {
    name: 'PointDelete',
    containingType: WriteQuery,
    fullName: 'WriteQuery.PointDelete'
  },
  1: {
    name: 'table_ref',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: TableRef
  },
  2: {
    name: 'attrname',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  3: {
    name: 'key',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  }
});


goog.proto2.Message.set$Metadata(WriteQuery.PointMutate, {
  0: {
    name: 'PointMutate',
    containingType: WriteQuery,
    fullName: 'WriteQuery.PointMutate'
  },
  1: {
    name: 'table_ref',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: TableRef
  },
  2: {
    name: 'attrname',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  3: {
    name: 'key',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Term
  },
  4: {
    name: 'mapping',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Mapping
  }
});


goog.proto2.Message.set$Metadata(MetaQuery, {
  0: {
    name: 'MetaQuery',
    fullName: 'MetaQuery'
  },
  1: {
    name: 'type',
    fieldType: goog.proto2.Message.FieldType.ENUM,
    defaultValue: MetaQuery.MetaQueryType.CREATE_DB,
    type: MetaQuery.MetaQueryType
  },
  2: {
    name: 'db_name',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  3: {
    name: 'create_table',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: MetaQuery.CreateTable
  },
  4: {
    name: 'drop_table',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: TableRef
  }
});


goog.proto2.Message.set$Metadata(MetaQuery.CreateTable, {
  0: {
    name: 'CreateTable',
    containingType: MetaQuery,
    fullName: 'MetaQuery.CreateTable'
  },
  1: {
    name: 'datacenter',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  3: {
    name: 'table_ref',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: TableRef
  },
  4: {
    name: 'primary_key',
    fieldType: goog.proto2.Message.FieldType.STRING,
    defaultValue: 'id',
    type: String
  },
  5: {
    name: 'cache_size',
    fieldType: goog.proto2.Message.FieldType.INT64,
    defaultValue: '1073741824',
    type: String
  }
});


goog.proto2.Message.set$Metadata(Query, {
  0: {
    name: 'Query',
    fullName: 'Query'
  },
  1: {
    name: 'type',
    fieldType: goog.proto2.Message.FieldType.ENUM,
    defaultValue: Query.QueryType.READ,
    type: Query.QueryType
  },
  2: {
    name: 'token',
    fieldType: goog.proto2.Message.FieldType.INT64,
    type: String
  },
  3: {
    name: 'read_query',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: ReadQuery
  },
  4: {
    name: 'write_query',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: WriteQuery
  },
  5: {
    name: 'meta_query',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: MetaQuery
  }
});


goog.proto2.Message.set$Metadata(Response, {
  0: {
    name: 'Response',
    fullName: 'Response'
  },
  1: {
    name: 'status_code',
    fieldType: goog.proto2.Message.FieldType.ENUM,
    defaultValue: Response.StatusCode.SUCCESS_EMPTY,
    type: Response.StatusCode
  },
  2: {
    name: 'token',
    fieldType: goog.proto2.Message.FieldType.INT64,
    type: String
  },
  3: {
    name: 'response',
    repeated: true,
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  4: {
    name: 'error_message',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  5: {
    name: 'backtrace',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: Response.Backtrace
  }
});


goog.proto2.Message.set$Metadata(Response.Backtrace, {
  0: {
    name: 'Backtrace',
    containingType: Response,
    fullName: 'Response.Backtrace'
  },
  1: {
    name: 'frame',
    repeated: true,
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  }
});
