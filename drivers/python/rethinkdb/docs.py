# This file was generated by _scripts/gen_python.py from the rethinkdb documentation in http://github.com/rethinkdb/docs
# hash: "b11c38d355729bf3a2e2ed5629f011ca437da098"


import rethinkdb

rethinkdb.net.Connection.close.__func__.__doc__ = u'Close an open connection. Closing a connection waits until all\noutstanding requests have finished and then frees any open resources\nassociated with the connection.  If `noreply_wait` is set to `false`,\nall outstanding requests are canceled immediately.\n\nClosing a connection cancels all outstanding requests and frees the\nmemory associated with any open cursors.\n\n*Example* Close an open connection, waiting for noreply writes to finish.\n\n>>> conn.close()\n\n*Example* Close an open connection immediately.\n\n>>> conn.close(noreply_wait=False)\n'
rethinkdb.connect.__doc__ = u"Create a new connection to the database server. The keyword arguments are:\n\n- `host`: host of the RethinkDB instance. The default value is `localhost`.\n- `port`: the driver port, by default `28015`.\n- `db`: the database used if not explicitly specified in a query, by default `test`.\n- `auth_key`: the authentification key, by default the empty string.\n- `timeout`: timeout period for the connection to be opened, by default `20` (seconds).\n\nCreate a new connection to the database server.\n\nIf the connection cannot be established, a `RqlDriverError` exception\nwill be thrown.\n\n*Example* Opens a connection using the default host and port but\nspecifying the default database.\n\n>>> conn = r.connect(db='marvel')\n"
rethinkdb.net.Connection.noreply_wait.__func__.__doc__ = u'`noreply_wait` ensures that previous queries with the `noreply` flag have been processed\nby the server. Note that this guarantee only applies to queries run on the given connection.\n\n*Example* We have previously run queries with the `noreply` argument set to `True`. Now\nwait until the server has processed them.\n\n>>> conn.noreply_wait()\n\n'
rethinkdb.__doc__ = u'The top-level ReQL namespace.\n\n*Example:* Setup your top-level namespace.\n\n>>> import rethinkdb as r\n\n'
rethinkdb.net.Connection.reconnect.__func__.__doc__ = u'Close and reopen a connection. Closing a connection waits until all\noutstanding requests have finished.  If `noreply_wait` is set to\n`false`, all outstanding requests are canceled immediately.\n\n*Example* Cancel outstanding requests/queries that are no longer needed.\n\n>>> conn.reconnect(noreply_wait=False)\n'
rethinkdb.net.Connection.repl.__func__.__doc__ = u"Set the default connection to make REPL use easier. Allows calling\n`.run()` on queries without specifying a connection.\n\nConnection objects are not thread-safe and REPL connections should not\nbe used in multi-threaded environments.\n\n*Example:* Set the default connection for the REPL, then call\n`run()` without specifying the connection.\n\n>>> r.connect(db='marvel').repl()\n... r.table('heroes').run()\n"
rethinkdb.ast.RqlQuery.run.__func__.__doc__ = u'Run a query on a connection, returning either a single JSON result or\na cursor, depending on the query.\n\n*Example* Run a query on the connection `conn` and print out every\nrow in the result.\n\n>>> for doc in r.table(\'marvel\').run(conn):\n...     print doc\n\n*Example* If you are OK with potentially out of date data from all\nthe tables involved in this query and want potentially faster reads,\npass a flag allowing out of date data in an options object. Settings\nfor individual tables will supercede this global setting for all\ntables in the query.\n\n>>> r.table(\'marvel\').run(conn, use_outdated=True)\n\n*Example* If you just want to send a write and forget about it, you\ncan set `noreply` to true in the options. In this case `run` will\nreturn immediately.\n\n>>> r.table(\'marvel\').run(conn, noreply=True)\n\n*Example* If you want to specify whether to wait for a write to be\nwritten to disk (overriding the table\'s default settings), you can set\n`durability` to `\'hard\'` or `\'soft\'` in the options.\n\n>>> r.table(\'marvel\')\n...     .insert({ \'superhero\': \'Iron Man\', \'superpower\': \'Arc Reactor\' })\n...     .run(conn, noreply=True, durability=\'soft\')\n\n*Example* If you do not want a time object to be converted to a\nnative date object, you can pass a `time_format` flag to prevent it\n(valid flags are "raw" and "native"). This query returns an object\nwith two fields (`epoch_time` and `$reql_type$`) instead of a native date\nobject.\n\n>>> r.now().run(conn, time_format="raw")\n\n'
rethinkdb.net.Connection.use.__func__.__doc__ = u"Change the default database on this connection.\n\n*Example* Change the default database so that we don't need to\nspecify the database when referencing a table.\n\n>>> conn.use('marvel')\n... r.table('heroes').run(conn) # refers to r.db('marvel').table('heroes')\n"
rethinkdb.ast.RqlQuery.contains.__func__.__doc__ = u"Returns whether or not a sequence contains all the specified values, or if functions are\nprovided instead, returns whether or not a sequence contains values matching all the\nspecified functions.\n\n*Example* Has Iron Man ever fought Superman?\n\n>>> r.table('marvel').get('ironman')['opponents'].contains('superman').run(conn)\n\n*Example* Has Iron Man ever defeated Superman in battle?\n\n>>> r.table('marvel').get('ironman')['battles'].contains(lambda battle:\n...     (battle['winner'] == 'ironman') & (battle['loser'] == 'superman')\n... ).run(conn)\n\n"
rethinkdb.ast.RqlQuery.count.__func__.__doc__ = u"Count the number of elements in the sequence. With a single argument, count the number\nof elements equal to it. If the argument is a function, it is equivalent to calling\nfilter before count.\n\n*Example:* Just how many super heroes are there?\n\n>>> (r.table('marvel').count() + r.table('dc').count()).run(conn)\n\n*Example:* Just how many super heroes have defeated the Sphinx?\n\n>>> r.table('marvel').count(r.row['monstersKilled'].contains('Sphinx')).run(conn)\n\n"
rethinkdb.ast.RqlQuery.distinct.__func__.__doc__ = u"Remove duplicate elements from the sequence.\n\n*Example* Which unique villains have been vanquished by marvel heroes?\n\n>>> r.table('marvel').concat_map(lambda hero: hero['villainList']).distinct().run(conn)\n"
rethinkdb.ast.RqlQuery.group_by.__func__.__doc__ = u"Groups elements by the values of the given attributes and then applies the given\nreduction. Though similar to `groupedMapReduce`, `groupBy` takes a standardized object\nfor specifying the reduction. Can be used with a number of predefined common reductions.\n\n*Example* Using a predefined reduction we can easily find the average strength of members of each weight class.\n\n>>> r.table('marvel').group_by('weightClass', r.avg('strength')).run(conn)\n\n*Example* Groupings can also be specified on nested attributes.\n\n>>> r.table('marvel').group_by({'abilities' : {'primary' : True}}, r.avg('strength')).run(conn)\n\n*Example* The nested syntax can quickly become verbose so there's a shortcut.\n\n>>> r.table('marvel').group_by({'abilities' : 'primary'}, r.avg('strength')).run(conn)\n\n"
rethinkdb.ast.RqlQuery.grouped_map_reduce.__func__.__doc__ = u"Partition the sequence into groups based on the `grouping` function. The elements of each\ngroup are then mapped using the `mapping` function and reduced using the `reduction`\nfunction.\n\n`grouped_map_reduce` is a generalized form of group by.\n\n*Example* It's only fair that heroes be compared against their weight class.\n\n>>> r.table('marvel').grouped_map_reduce(\n...     lambda hero: hero['weightClass'],  # grouping\n...     lambda hero: hero.pluck('name', 'strength'),  # mapping\n...     lambda acc, hero: r.branch(acc['strength'] < hero['strength'], hero, acc),\n...     {'name':'none', 'strength':0}  # base\n... ).run(conn)\n\n"
rethinkdb.ast.RqlQuery.reduce.__func__.__doc__ = u"Produce a single value from a sequence through repeated application of a reduction\nfunction.\n\nThe reduce function gets invoked repeatedly not only for the input values but also for\nresults of previous reduce invocations. The type and format of the object that is passed\nin to reduce must be the same with the one returned from reduce.\n\n*Example* How many enemies have our heroes defeated?\n\n>>> r.table('marvel').map(r.row['monstersKilled']).reduce(\n...     lambda acc, val: acc + val, 0).run(conn)\n"
rethinkdb.avg.__doc__ = u"Compute the average value of the given attribute for the group.\n\n*Example* What's the average agility of heroes at each strength level?\n\n>>> r.table('marvel').group_by('strength', r.avg('agility')).run(conn)\n"
rethinkdb.sum.__doc__ = u"Compute the sum of the given field in the group.\n\n*Example* How many enemies have been vanquished by heroes at each strength level?\n\n>>> r.table('marvel').group_by('strength', r.sum('enemiesVanquished')).run(conn)\n"
rethinkdb.branch.__doc__ = u"Evaluate one of two control paths based on the value of an expression. branch is effectively an if renamed due to language constraints.\n\nThe type of the result is determined by the type of the branch that gets executed.\n\n*Example* Return the manlier of two heroes:\n\n>>> r.table('marvel').map(r.branch(r.row['victories'] > 100,\n...     r.row['name'] + ' is a superhero',\n...     r.row['name'] + ' is a hero')\n... ).run(conn)\n\n"
rethinkdb.ast.RqlQuery.coerce_to.__func__.__doc__ = u"Converts a value of one type into another.\n\nYou can convert: a selection, sequence, or object into an ARRAY, an array of pairs into an OBJECT, and any DATUM into a STRING.\n\n*Example* Convert a table to an array.\n\n>>> r.table('marvel').coerce_to('array').run(conn)\n\n*Example* Convert an array of pairs into an object.\n\n>>> r.expr([['name', 'Ironman'], ['victories', 2000]]).coerce_to('object').run(conn)\n\n*Example* Convert a number to a string.\n\n>>> r.expr(1).coerce_to('string').run(conn)\n\n"
rethinkdb.ast.RqlQuery.default.__func__.__doc__ = u'Handle non-existence errors. Tries to evaluate and return its first argument. If an\nerror related to the absence of a value is thrown in the process, or if its first\nargument returns `None`, returns its second argument. (Alternatively, the second argument\nmay be a function which will be called with either the text of the non-existence error\nor `None`.)\n\n__Exmple:__ Suppose we want to retrieve the titles and authors of the table `posts`.\nIn the case where the author field is missing or `None`, we want to retrieve the string\n`Anonymous`.\n\n>>> r.table("posts").map(lambda post:\n...     {\n...         "title": post["title"],\n...         "author": post["author"].default("Anonymous")\n...     }\n... ).run(conn)\n\nWe can rewrite the previous query with `r.branch` too.\n\n>>> r.table("posts").map(lambda post:\n...     r.branch(\n...         post.has_fields("author"),\n...         {\n...             "title": post["title"],\n...             "author": post["author"]\n...         },\n...         {\n...             "title": post["title"],\n...             "author": "Anonymous" \n...         }\n...     )\n... ).run(conn)\n\n*Example* The `default` command can be useful to filter documents too. Suppose\nwe want to retrieve all our users who are not grown-ups or whose age is unknown\n(i.e the field `age` is missing or equals `None`). We can do it with this query:\n\n>>> r.table("users").filter(lambda user:\n...     (user["age"] < 18).default(True)\n... ).run(conn)\n\nOne more way to write the previous query is to set the age to be `-1` when the\nfield is missing.\n\n>>> r.table("users").filter(lambda user:\n...     user["age"].default(-1) < 18\n... ).run(conn)\n\nOne last way to do the same query is to use `has_fields`.\n\n>>> r.table("users").filter(lambda user:\n...     user.has_fields("age").not_() | (user["age"] < 18)\n... ).run(conn)\n\nThe body of every `filter` is wrapped in an implicit `.default(False)`. You can overwrite\nthe value `False` by passing an option in filter, so the previous query can also be\nwritten like this.\n\n>>> r.table("users").filter(\n...     lambda user: (user["age"] < 18).default(True),\n...     default=True\n... ).run(conn)\n\n'
rethinkdb.ast.RqlQuery.do.__func__.__doc__ = u"Evaluate the expr in the context of one or more value bindings.\n\nThe type of the result is the type of the value returned from expr.\n\n*Example* The object(s) passed to do() can be bound to name(s). The last argument is the expression to evaluate in the context of the bindings.\n\n>>> r.do(r.table('marvel').get('IronMan'),\n...     lambda ironman: ironman['name']).run(conn)\n\n"
rethinkdb.error.__doc__ = u"Throw a runtime error. If called with no arguments inside the second argument to `default`, re-throw the current error.\n\n*Example* Iron Man can't possibly have lost a battle:\n\n>>> r.table('marvel').get('IronMan').do(\n...     lambda ironman: r.branch(ironman['victories'] < ironman['battles'],\n...                              r.error('impossible code path'),\n...                              ironman)\n... ).run(conn)\n\n"
rethinkdb.expr.__doc__ = u"Construct a ReQL JSON object from a native object.\n\n*Example* Objects wrapped with expr can then be manipulated by ReQL API functions.\n\n>>> r.expr({'a':'b'}).merge({'b':[1,2,3]}).run(conn)\n\n"
rethinkdb.ast.RqlQuery.for_each.__func__.__doc__ = u"Loop over a sequence, evaluating the given write query for each element.\n\n*Example* Now that our heroes have defeated their villains, we can safely remove them from the villain table.\n\n>>> r.table('marvel').for_each(\n...     lambda hero: r.table('villains').get(hero['villainDefeated']).delete()\n... ).run(conn)\n\n"
rethinkdb.ast.RqlQuery.info.__func__.__doc__ = u"Get information about a ReQL value.\n\n*Example* Get information about a table such as primary key, or cache size.\n\n>>> r.table('marvel').info().run(conn)\n\n"
rethinkdb.js.__doc__ = u'Create a javascript expression.\n\n*Example* Concatenate two strings using Javascript\'\n\n>>> r.js("\'str1\' + \'str2\'").run(conn)\n\n*Example* Select all documents where the \'magazines\' field is greater than 5 by running Javascript on the server.\n\n>>> r.table(\'marvel\').filter(\n...     r.js(\'(function (row) { return row.magazines > 5; })\')\n... ).run(conn)\n\n*Example* You may also specify a timeout in seconds (defaults to 5).\n\n>>> r.js(\'while(true) {}\', timeout=1.3).run(conn)\n\n'
rethinkdb.json.__doc__ = u'Parse a JSON string on the server.\n\n*Example* Send an array to the server\'\n\n>>> r.json("[1,2,3]").run(conn)\n\n'
rethinkdb.ast.RqlQuery.type_of.__func__.__doc__ = u'Gets the type of a value.\n\n*Example* Get the type of a string.\n\n>>> r.expr("foo").type_of().run(conn)\n\n'
rethinkdb.ast.RqlQuery.date.__func__.__doc__ = u'Return a new time object only based on the day, month and year (ie. the same day at 00:00).\n\n*Example* Retrieve all the users whose birthday is today\n\n>>> r.table("users").filter(lambda user:\n...     user["birthdate"].date() == r.now().date()\n... ).run(conn)\n\n'
rethinkdb.ast.RqlQuery.day.__func__.__doc__ = u'Return the day of a time object as a number between 1 and 31.\n\n*Example* Return the users born on the 24th of any month.\n\n>>> r.table("users").filter(\n...     r.row["birthdate"].day() == 24\n... )\n\n'
rethinkdb.ast.RqlQuery.day_of_week.__func__.__doc__ = u'Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard). For your convenience, the terms r.monday, r.tuesday etc. are defined and map to the appropriate integer.\n\n*Example* Return today\'s day of week.\n\n>>> r.now().day_of_week().run(conn)\n\n*Example* Retrieve all the users who were born on a Tuesday.\n\n>>> r.table("users").filter{ |user|\n...     user["birthdate"].day_of_week().eq(r.tuesday)\n... }\n\n'
rethinkdb.ast.RqlQuery.day_of_year.__func__.__doc__ = u'Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).\n\n*Example* Retrieve all the users who were born the first day of a year.\n\n>>> r.table("users").filter(\n...     r.row["birthdate"].day_of_year() == 1\n... ).run(conn)\n\n'
rethinkdb.ast.RqlQuery.during.__func__.__doc__ = u'Return if a time is between two other times (by default, inclusive for the start, exclusive for the end).\n\n*Example* Retrieve all the posts that were posted between December 1st, 2013 (inclusive) and December 10th, 2013 (exclusive).\n\n>>> r.table("posts").filter(\n...     r.row[\'date\'].during(r.time(2013, 12, 1, "Z"), r.time(2013, 12, 10, "Z"))\n... ).run(conn)\n\n*Example* Retrieve all the posts that were posted between December 1st, 2013 (exclusive) and December 10th, 2013 (inclusive).\n\n>>> r.table("posts").filter(\n...     r.row[\'date\'].during(r.time(2013, 12, 1, "Z"), r.time(2013, 12, 10, "Z"), left_bound="open", right_bound="closed")\n... ).run(conn)\n\n'
rethinkdb.epoch_time.__doc__ = u'Create a time object based on seconds since epoch. The first argument is a double and\nwill be rounded to three decimal places (millisecond-precision).\n\n*Example* Update the birthdate of the user "John" to November 3rd, 1986.\n\n>>> r.table("user").get("John").update({"birthdate": r.epoch_time(531360000)}).run(conn)\n\n'
rethinkdb.ast.RqlQuery.hours.__func__.__doc__ = u'Return the hour in a time object as a number between 0 and 23.\n\n*Example* Return all the posts submitted after midnight and before 4am.\n\n>>> r.table("posts").filter(lambda post:\n...     post["date"].hours() < 4\n... ).run(conn)\n\n'
rethinkdb.ast.RqlQuery.in_timezone.__func__.__doc__ = u"Return a new time object with a different timezone. While the time stays the same, the results returned by methods such as hours() will change since they take the timezone into account. The timezone argument has to be of the ISO 8601 format.\n\n*Example* Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).\n\n>>> r.now().in_timezone('-08:00').hours().run(conn)\n"
rethinkdb.iso8601.__doc__ = u'Create a time object based on an iso8601 date-time string (e.g.\n\'2013-01-01T01:01:01+00:00\'). We support all valid ISO 8601 formats except for week\ndates. If you pass an ISO 8601 date-time without a time zone, you must specify the time\nzone with the optarg `default_timezone`. Read more about the ISO 8601 format on the\nWikipedia page.\n\n*Example* Update the time of John\'s birth.\n\n>>> r.table("user").get("John").update({"birth": r.iso8601(\'1986-11-03T08:30:00-07:00\')}).run(conn)\n'
rethinkdb.ast.RqlQuery.minutes.__func__.__doc__ = u'Return the minute in a time object as a number between 0 and 59.\n\n*Example* Return all the posts submitted during the first 10 minutes of every hour.\n\n>>> r.table("posts").filter(lambda post:\n...     post["date"].minutes() < 10\n... ).run(conn)\n'
rethinkdb.ast.RqlQuery.month.__func__.__doc__ = u'Return the month of a time object as a number between 1 and 12. For your convenience, the terms r.january, r.february etc. are defined and map to the appropriate integer.\n\n*Example* Retrieve all the users who were born in November.\n\n>>> r.table("users").filter(\n...     r.row["birthdate"].month() == 11\n... )\n\n*Example* Retrieve all the users who were born in November.\n\n>>> r.table("users").filter(\n...     r.row["birthdate"].month() == r.november\n... )\n\n'
rethinkdb.now.__doc__ = u'Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.\n\n*Example* Add a new user with the time at which he subscribed.\n\n>>> r.table("users").insert({\n...     "name": "John",\n...     "subscription_date": r.now()\n... }).run(conn)\n\n'
rethinkdb.ast.RqlQuery.seconds.__func__.__doc__ = u'Return the seconds in a time object as a number between 0 and 59.999 (double precision).\n\n*Example* Return the post submitted during the first 30 seconds of every minute.\n\n>>> r.table("posts").filter(lambda post:\n...     post["date"].seconds() < 30\n... ).run(conn)\n\n'
rethinkdb.time.__doc__ = u'Create a time object for a specific time.\n\nA few restrictions exist on the arguments:\n\n- `year` is an integer between 1400 and 9,999.\n- `month` is an integer between 1 and 12.\n- `day` is an integer between 1 and 31.\n- `hour` is an integer.\n- `minutes` is an integer.\n- `seconds` is a double. Its value will be rounded to three decimal places\n(millisecond-precision).\n- `timezone` can be `\'Z\'` (for UTC) or a string with the format `\xb1[hh]:[mm]`.\n\n*Example* Update the birthdate of the user "John" to November 3rd, 1986 UTC.\n\n>>> r.table("user").get("John").update({"birthdate": r.time(1986, 11, 3, \'Z\')}).run(conn)\n\n'
rethinkdb.ast.RqlQuery.time_of_day.__func__.__doc__ = u'Return the number of seconds elapsed since the beginning of the day stored in the time object.\n\n*Example* Retrieve posts that were submitted before noon.\n\n>>> r.table("posts").filter(\n...     r.row["date"].time_of_day() <= 12*60*60\n... ).run(conn)\n\n'
rethinkdb.ast.RqlQuery.timezone.__func__.__doc__ = u'Return the timezone of the time object.\n\n*Example* Return all the users in the "-07:00" timezone.\n\n>>> r.table("users").filter(lambda user:\n...     user["subscriptionDate"].timezone() == "-07:00"\n... )\n\n'
rethinkdb.ast.RqlQuery.to_epoch_time.__func__.__doc__ = u'Convert a time object to its epoch time.\n\n*Example* Return the current time in an ISO8601 format.\n\n>>> r.now().to_epoch_time()\n\n'
rethinkdb.ast.RqlQuery.to_iso8601.__func__.__doc__ = u'Convert a time object to its iso 8601 format.\n\n*Example* Return the current time in an ISO8601 format.\n\n>>> r.now().to_iso8601()\n\n'
rethinkdb.ast.RqlQuery.year.__func__.__doc__ = u'Return the year of a time object.\n\n*Example* Retrieve all the users born in 1986.\n\n>>> r.table("users").filter(lambda user:\n...     user["birthdate"].year() == 1986\n... ).run(conn)\n\n'
rethinkdb.ast.RqlQuery.append.__func__.__doc__ = u"Append a value to an array.\n\n*Example* Retrieve Iron Man's equipment list with the addition of some new boots.\n\n>>> r.table('marvel').get('IronMan')['equipment'].append('newBoots').run(conn)\n\n"
rethinkdb.ast.RqlQuery.change_at.__func__.__doc__ = u'Change a value in an array at a given index. Returns the modified array.\n\n*Example* Bruce Banner hulks out.\n\n>>> r.expr(["Iron Man", "Bruce", "Spider-Man"]).change_at(1, "Hulk").run(conn)\n'
rethinkdb.ast.RqlQuery.delete_at.__func__.__doc__ = u'Remove an element from an array at a given index. Returns the modified array.\n\n*Example* Hulk decides to leave the avengers.\n\n>>> r.expr(["Iron Man", "Hulk", "Spider-Man"]).delete_at(1).run(conn)\n\n*Example* Hulk and Thor decide to leave the avengers.\n\n>>> r.expr(["Iron Man", "Hulk", "Thor", "Spider-Man"]).delete_at(1,3).run(conn)\n\n'
rethinkdb.ast.RqlQuery.difference.__func__.__doc__ = u"Remove the elements of one array from another array.\n\n*Example* Retrieve Iron Man's equipment list without boots.\n\n>>> r.table('marvel').get('IronMan')['equipment'].difference(['Boots']).run(conn)\n\n"
rethinkdb.ast.RqlQuery.__getitem__.__func__.__doc__ = u"Get a single field from an object. If called on a sequence, gets that field from every\nobject in the sequence, skipping objects that lack it.\n\n*Example:* What was Iron Man's first appearance in a comic?\n\n>>> r.table('marvel').get('IronMan')['firstAppearance'].run(conn)\n"
rethinkdb.ast.RqlQuery.has_fields.__func__.__doc__ = u'Test if an object has all of the specified fields. An object has a field if it has the\nspecified key and that key maps to a non-null value. For instance, the object\n`{\'a\':1,\'b\':2,\'c\': None}` has the fields `a` and `b`.\n\n*Example* Which heroes are married?\n\n>>> r.table(\'marvel\').has_fields(\'spouse\').run(conn)\n\n*Example* Test if a single object has a field.\n\n>>> r.table(\'marvel\').get("IronMan").has_fields(\'spouse\').run(conn)\n\n*Example* You can also test if nested fields exist to get only spouses with powers of their own.\n\n>>> r.table(\'marvel\').has_fields({\'spouse\' : {\'powers\' : True}}).run(conn)\n\n*Example* The nested syntax can quickly get verbose so there\'s a shorthand.\n\n>>> r.table(\'marvel\').has_fields({\'spouse\' : \'powers\'}).run(conn)\n\n'
rethinkdb.ast.RqlQuery.insert_at.__func__.__doc__ = u'Insert a value in to an array at a given index. Returns the modified array.\n\n*Example* Hulk decides to join the avengers.\n\n>>> r.expr(["Iron Man", "Spider-Man"]).insert_at(1, "Hulk").run(conn)\n\n'
rethinkdb.ast.RqlQuery.keys.__func__.__doc__ = u"Return an array containing all of the object's keys.\n\n*Example* Get all the keys of a row.\n\n>>> r.table('marvel').get('ironman').keys().run(conn)\n\n"
rethinkdb.ast.RqlQuery.merge.__func__.__doc__ = u"Merge two objects together to construct a new object with properties from both. Gives preference to attributes from other when there is a conflict.\n\n*Example* Equip IronMan for battle.\n\n>>> r.table('marvel').get('IronMan').merge(\n...     r.table('loadouts').get('alienInvasionKit')\n... ).run(conn)\n\n*Example* Merge can be used recursively to modify object within objects.\n\n>>> r.expr({'weapons' : {'spectacular graviton beam' : {'dmg' : 10, 'cooldown' : 20}}}).merge(\n...     {'weapons' : {'spectacular graviton beam' : {'dmg' : 10}}}\n... ).run(conn)\n\n*Example* To replace a nested object with another object you can use the literal keyword.\n\n>>> r.expr({'weapons' : {'spectacular graviton beam' : {'dmg' : 10, 'cooldown' : 20}}}).merge(\n...     {'weapons' : r.literal({'repulsor rays' : {'dmg' : 3, 'cooldown' : 0}})}\n... ).run(conn)\n\n*Example* Literal can be used to remove keys from an object as well.\n\n>>> r.expr({'weapons' : {'spectacular graviton beam' : {'dmg' : 10, 'cooldown' : 20}}}).merge(\n...     {'weapons' : {'spectacular graviton beam' : r.literal()}}\n... ).run(conn)\n\n"
rethinkdb.ast.RqlQuery.pluck.__func__.__doc__ = u"Plucks out one or more attributes from either an object or a sequence of objects\n(projection).\n\n*Example* We just need information about IronMan's reactor and not the rest of the\ndocument.\n\n>>> r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn)\n\n*Example* For the hero beauty contest we only care about certain qualities.\n\n>>> r.table('marvel').pluck('beauty', 'muscleTone', 'charm').run(conn)\n\n*Example* Pluck can also be used on nested objects.\n\n>>> r.table('marvel').pluck({'abilities' : {'damage' : True, 'mana_cost' : True}, 'weapons' : True}).run(conn)\n\n*Example* The nested syntax can quickly become overly verbose so there's a shorthand\nfor it.\n\n>>> r.table('marvel').pluck({'abilities' : ['damage', 'mana_cost']}, 'weapons').run(conn)\n\n"
rethinkdb.ast.RqlQuery.prepend.__func__.__doc__ = u"Prepend a value to an array.\n\n*Example* Retrieve Iron Man's equipment list with the addition of some new boots.\n\n>>> r.table('marvel').get('IronMan')['equipment'].prepend('newBoots').run(conn)\n"
rethinkdb.row.__doc__ = u"Returns the currently visited document.\n\n*Example* Get all users whose age is greater than 5.\n\n>>> r.table('users').filter(r.row['age'] > 5).run(conn)\n\n*Example* Accessing the attribute 'child' of an embedded document.\n\n>>> r.table('users').filter(r.row['embedded_doc']['child'] > 5).run(conn)\n\n*Example* Add 1 to every element of an array.\n\n>>> r.expr([1, 2, 3]).map(r.row + 1).run(conn)\n\n*Example* For nested queries functions should be used instead of r.row.\n\n>>> r.table('users').filter(\n...     lambda doc: doc['name'] == r.table('prizes').get('winner')\n... ).run(conn)\n\n"
rethinkdb.ast.RqlQuery.set_difference.__func__.__doc__ = u"Remove the elements of one array from another and return them as a set (an array with\ndistinct values).\n\n*Example* Check which pieces of equipment Iron Man has, excluding a fixed list.\n\n>>> r.table('marvel').get('IronMan')['equipment'].set_difference(['newBoots', 'arc_reactor']).run(conn)\n"
rethinkdb.ast.RqlQuery.set_insert.__func__.__doc__ = u"Add a value to an array and return it as a set (an array with distinct values).\n\n*Example* Retrieve Iron Man's equipment list with the addition of some new boots.\n\n>>> r.table('marvel').get('IronMan')['equipment'].set_insert('newBoots').run(conn)\n\n"
rethinkdb.ast.RqlQuery.set_intersection.__func__.__doc__ = u"Intersect two arrays returning values that occur in both of them as a set (an array with\ndistinct values).\n\n*Example* Check which pieces of equipment Iron Man has from a fixed list.\n\n>>> r.table('marvel').get('IronMan')['equipment'].set_intersection(['newBoots', 'arc_reactor']).run(conn)\n\n"
rethinkdb.ast.RqlQuery.set_union.__func__.__doc__ = u"Add a several values to an array and return it as a set (an array with distinct values).\n\n*Example* Retrieve Iron Man's equipment list with the addition of some new boots and an arc reactor.\n\n>>> r.table('marvel').get('IronMan')['equipment'].set_union(['newBoots', 'arc_reactor']).run(conn)\n\n"
rethinkdb.ast.RqlQuery.splice_at.__func__.__doc__ = u'Insert several values in to an array at a given index. Returns the modified array.\n\n*Example* Hulk and Thor decide to join the avengers.\n\n>>> r.expr(["Iron Man", "Spider-Man"]).splice_at(1, ["Hulk", "Thor"]).run(conn)\n'
rethinkdb.ast.RqlQuery.without.__func__.__doc__ = u"The opposite of pluck; takes an object or a sequence of objects, and returns them with\nthe specified paths removed.\n\n*Example* Since we don't need it for this computation we'll save bandwidth and leave\nout the list of IronMan's romantic conquests.\n\n>>> r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn)\n\n*Example* Without their prized weapons, our enemies will quickly be vanquished.\n\n>>> r.table('enemies').without('weapons').run(conn)\n\n*Example* Nested objects can be used to remove the damage subfield from the weapons and abilities fields.\n\n>>> r.table('marvel').without({'weapons' : {'damage' : True}, 'abilities' : {'damage' : True}}).run(conn)\n\n*Example* The nested syntax can quickly become overly verbose so there's a shorthand for it.\n\n>>> r.table('marvel').without({'weapons' : 'damage', 'abilities' : 'damage'}).run(conn)\n\n"
rethinkdb.ast.RqlQuery.eq_join.__func__.__doc__ = u"An efficient join that looks up elements in the right table by primary key.\n\n*Example* Let our heroes join forces to battle evil!\n\n>>> r.table('marvel').eq_join('main_dc_collaborator', r.table('dc')).run(conn)\n\n*Example* The above query is equivalent to this inner join but runs in O(n log(m))\ntime rather than the O(n * m) time the inner join takes.\n\n>>> r.table('marvel').inner_join(r.table('dc'),\n... lambda left, right: left['main_dc_collaborator'] == right['hero_name']).run(conn)\n\n*Example* You can take advantage of a secondary index on the second table by giving\nan optional index parameter.\n\n>>> r.table('marvel').eq_join('main_weapon_origin',\n... r.table('mythical_weapons'), index='origin').run(conn)\n\n*Example* You can pass a function instead of an attribute to join on more\ncomplicated expressions. Here we join to the DC universe collaborator with whom the hero\nhas the most appearances.\n\n>>> r.table('marvel').eq_join(lambda doc:\n...     doc['dc_collaborators'].order_by('appearances')[0]['name'],\n...     r.table('dc')).run(conn)\n"
rethinkdb.ast.RqlQuery.inner_join.__func__.__doc__ = u"Returns the inner product of two sequences (e.g. a table, a filter result) filtered by\nthe predicate. The query compares each row of the left sequence with each row of the\nright sequence to find all pairs of rows which satisfy the predicate. When the predicate\nis satisfied, each matched pair of rows of both sequences are combined into a result row.\n\n*Example* Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose.\n\n>>> r.table('marvel').inner_join(r.table('dc'), lambda marvelRow, dcRow:\n...     marvelRow['strength'] < dcRow['strength']).run(conn)\n"
rethinkdb.ast.RqlQuery.outer_join.__func__.__doc__ = u"Computes a left outer join by retaining each row in the left table even if no match was\nfound in the right table.\n\n*Example* Construct a sequence of documents containing all cross-universe matchups\nwhere a marvel hero would lose, but keep marvel heroes who would never lose a matchup in\nthe sequence.\n\n>>> r.table('marvel').outer_join(r.table('dc'),\n...   lambda marvelRow, dcRow: marvelRow['strength'] < dcRow['strength']).run(conn)\n\n"
rethinkdb.ast.RqlQuery.zip.__func__.__doc__ = u"Used to 'zip' up the result of a join by merging the 'right' fields into 'left' fields of each member of the sequence.\n\n*Example* 'zips up' the sequence by merging the left and right fields produced by a join.\n\n>>> r.table('marvel').eq_join('main_dc_collaborator', r.table('dc')).zip().run(conn)\n"
rethinkdb.db_create.__doc__ = u'Create a database. A RethinkDB database is a collection of tables, similar to\nrelational databases.\n\nIf successful, the operation returns an object: `{"created": 1}`. If a database with the\nsame name already exists the operation throws `RqlRuntimeError`.\n\nNote: that you can only use alphanumeric characters and underscores for the database name.\n\n*Example* Create a database named \'superheroes\'.\n\n>>> r.db_create(\'superheroes\').run(conn)\n\n'
rethinkdb.db_drop.__doc__ = u'Drop a database. The database, all its tables, and corresponding data will be deleted.\n\nIf successful, the operation returns the object `{"dropped": 1}`. If the specified database\ndoesn\'t exist a `RqlRuntimeError` is thrown.\n\n*Example* Drop a database named \'superheroes\'.\n\n>>> r.db_drop(\'superheroes\').run(conn)\n\n'
rethinkdb.db_list.__doc__ = u'List all database names in the system. The result is a list of strings.\n\n*Example* List all databases.\n\n>>> r.db_list().run(conn)\n\n'
rethinkdb.ast.Table.index_create.__func__.__doc__ = u"Create a new secondary index on this table.\n\n*Example* To efficiently query our heros by code name we have to create a secondary\nindex.\n\n>>> r.table('dc').index_create('code_name').run(conn)\n\n*Example* You can also create a secondary index based on an arbitrary function on the document.\n\n>>> r.table('dc').index_create('power_rating',\n... lambda hero: hero['combat_power'] + (2 * hero['compassion_power'])\n... ).run(conn)\n\n*Example* A compound index can be created by returning an array of values to use as\nthe secondary index key.\n\n>>> r.table('dc').index_create('parental_planets',\n... lambda hero: [hero['mothers_home_planet'], hero['fathers_home_planet']]\n... ).run(conn)\n\n*Example* A multi index can be created by passing an optional multi argument. Multi\nindexes functions should return arrays and allow you to query based on whether a value\nis present in the returned array. The example would allow us to get heroes who possess a\nspecific ability (the field 'abilities' is an array).\n\n>>> r.table('dc').index_create('abilities', multi=True).run(conn)\n\n"
rethinkdb.ast.Table.index_drop.__func__.__doc__ = u"Delete a previously created secondary index of this table.\n\n*Example* Drop a secondary index named 'code_name'.\n\n>>> r.table('dc').index_drop('code_name').run(conn)\n\n"
rethinkdb.ast.Table.index_list.__func__.__doc__ = u"List all the secondary indexes of this table.\n\n*Example* List the available secondary indexes for this table.\n\n>>> r.table('marvel').index_list().run(conn)\n"
rethinkdb.ast.Table.index_status.__func__.__doc__ = u"Get the status of the specified indexes on this table, or the status\nof all indexes on this table if no indexes are specified.\n\n*Example* Get the status of all the indexes on `test`:\n\n>>> r.table('test').index_status().run(conn)\n\n*Example* Get the status of the `timestamp` index:\n\n>>> r.table('test').index_status('timestamp').run(conn)\n"
rethinkdb.ast.Table.index_wait.__func__.__doc__ = u"Wait for the specified indexes on this table to be ready, or for all\nindexes on this table to be ready if no indexes are specified.\n\n*Example* Wait for all indexes on the table `test` to be ready:\n\n>>> r.table('test').index_wait().run(conn)\n\n*Example* Wait for the index `timestamp` to be ready:\n\n>>> r.table('test').index_wait('timestamp').run(conn)\n"
rethinkdb.ast.DB.table_create.__func__.__doc__ = u"Create a table. A RethinkDB table is a collection of JSON documents.\n\nIf successful, the operation returns an object: `{created: 1}`. If a table with the same\nname already exists, the operation throws `RqlRuntimeError`.\n\nNote: that you can only use alphanumeric characters and underscores for the table name.\n\nWhen creating a table you can specify the following options:\n\n- `primary_key`: the name of the primary key. The default primary key is id;\n- `durability`: if set to `soft`, this enables _soft durability_ on this table:\nwrites will be acknowledged by the server immediately and flushed to disk in the\nbackground. Default is `hard` (acknowledgement of writes happens after data has been\nwritten to disk);\n- `cache_size`: set the cache size (in bytes) to be used by the table. The\ndefault is 1073741824 (1024MB);\n- `datacenter`: the name of the datacenter this table should be assigned to.\n\n*Example* Create a table named 'dc_universe' with the default settings.\n\n>>> r.db('test').table_create('dc_universe').run(conn)\n\n*Example* Create a table named 'dc_universe' using the field 'name' as primary key.\n\n>>> r.db('test').table_create('dc_universe', primary_key='name').run(conn)\n\n*Example* Create a table to log the very fast actions of the heroes.\n\n>>> r.db('test').table_create('hero_actions', durability='soft').run(conn)\n\n"
rethinkdb.ast.DB.table_drop.__func__.__doc__ = u'Drop a table. The table and all its data will be deleted.\n\nIf succesful, the operation returns an object: {"dropped": 1}. If the specified table\ndoesn\'t exist a `RqlRuntimeError` is thrown.\n\n*Example* Drop a table named \'dc_universe\'.\n\n>>> r.db(\'test\').table_drop(\'dc_universe\').run(conn)\n\n'
rethinkdb.ast.DB.table_list.__func__.__doc__ = u"List all table names in a database. The result is a list of strings.\n\n*Example* List all tables of the 'test' database.\n\n>>> r.db('test').table_list().run(conn)\n... \n"
rethinkdb.ast.RqlQuery.__add__.__func__.__doc__ = u'Sum two numbers, concatenate two strings, or concatenate 2 arrays.\n\n*Example:* It\'s as easy as 2 + 2 = 4.\n\n>>> (r.expr(2) + 2).run(conn)\n\n*Example:* Strings can be concatenated too.\n\n>>> (r.expr("foo") + "bar").run(conn)\n\n*Example:* Arrays can be concatenated too.\n\n>>> (r.expr(["foo", "bar"]) + ["buzz"]).run(conn)\n\n*Example:* Create a date one year from now.\n\n>>> r.now() + 365*24*60*60\n\n'
rethinkdb.add.__doc__ = u'Sum two numbers, concatenate two strings, or concatenate 2 arrays.\n\n*Example:* It\'s as easy as 2 + 2 = 4.\n\n>>> (r.expr(2) + 2).run(conn)\n\n*Example:* Strings can be concatenated too.\n\n>>> (r.expr("foo") + "bar").run(conn)\n\n*Example:* Arrays can be concatenated too.\n\n>>> (r.expr(["foo", "bar"]) + ["buzz"]).run(conn)\n\n*Example:* Create a date one year from now.\n\n>>> r.now() + 365*24*60*60\n\n'
rethinkdb.ast.RqlQuery.__and__.__func__.__doc__ = u'Compute the logical and of two values.\n\n*Example:* True and false anded is false?\n\n>>> (r.expr(True) & False).run(conn)\n'
rethinkdb.all.__doc__ = u'Compute the logical and of two values.\n\n*Example:* True and false anded is false?\n\n>>> (r.expr(True) & False).run(conn)\n'
rethinkdb.ast.RqlQuery.__div__.__func__.__doc__ = u"Divide two numbers.\n\n*Example:* It's as easy as 2 / 2 = 1.\n\n>>> (r.expr(2) / 2).run(conn)\n"
rethinkdb.div.__doc__ = u"Divide two numbers.\n\n*Example:* It's as easy as 2 / 2 = 1.\n\n>>> (r.expr(2) / 2).run(conn)\n"
rethinkdb.ast.RqlQuery.__eq__.__func__.__doc__ = u'Compute the logical and of two values.\n\n*Example:* True and false anded is false?\n\n>>> (r.expr(True) & False).run(conn)\n'
rethinkdb.ast.RqlQuery.__ge__.__func__.__doc__ = u'Test if the first value is greater than or equal to other.\n\n*Example:* Is 2 greater than or equal to 2?\n\n>>> (r.expr(2) >= 2).run(conn)\n\n'
rethinkdb.ast.RqlQuery.__gt__.__func__.__doc__ = u'Test if two values are not equal.\n\n*Example:* Does 2 not equal 2?\n\n>>> (r.expr(2) != 2).run(conn)\n\n'
rethinkdb.ast.RqlQuery.__le__.__func__.__doc__ = u'Test if the first value is less than or equal to other.\n\n*Example:* Is 2 less than or equal to 2?\n\n>>> (r.expr(2) <= 2).run(conn)\n\n'
rethinkdb.ast.RqlQuery.__lt__.__func__.__doc__ = u'Test if the first value is less than other.\n\n*Example:* Is 2 less than 2?\n\n>>> (r.expr(2) < 2).run(conn)\n\n'
rethinkdb.ast.RqlQuery.__mod__.__func__.__doc__ = u"Find the remainder when dividing two numbers.\n\n*Example:* It's as easy as 2 % 2 = 0.\n\n>>> (r.expr(2) % 2).run(conn)\n\n`\n"
rethinkdb.mod.__doc__ = u"Find the remainder when dividing two numbers.\n\n*Example:* It's as easy as 2 % 2 = 0.\n\n>>> (r.expr(2) % 2).run(conn)\n\n`\n"
rethinkdb.ast.RqlQuery.__mul__.__func__.__doc__ = u'Multiply two numbers, or make a periodic array.\n\n*Example:* It\'s as easy as 2 * 2 = 4.\n\n>>> (r.expr(2) * 2).run(conn)\n\n*Example:* Arrays can be multiplied by numbers as well.\n\n>>> (r.expr(["This", "is", "the", "song", "that", "never", "ends."]) * 100).run(conn)\n\n'
rethinkdb.mul.__doc__ = u'Multiply two numbers, or make a periodic array.\n\n*Example:* It\'s as easy as 2 * 2 = 4.\n\n>>> (r.expr(2) * 2).run(conn)\n\n*Example:* Arrays can be multiplied by numbers as well.\n\n>>> (r.expr(["This", "is", "the", "song", "that", "never", "ends."]) * 100).run(conn)\n\n'
rethinkdb.ast.RqlQuery.__ne__.__func__.__doc__ = u'Test if two values are not equal.\n\n*Example:* Does 2 not equal 2?\n\n>>> (r.expr(2) != 2).run(conn)\n\n'
rethinkdb.ast.RqlQuery.__invert__.__func__.__doc__ = u'Compute the logical inverse (not).\n\n*Example:* Not true is false.\n\n>>> (~r.expr(True)).run(conn)\n\nNote the parentheses around the query. If you execute\n\n>>> ~r.expr(True).run(conn)\n\nYou will get back `-2` because the query executed is `r.expr(True)` which returns `True`,\nand because `~True` evaluates to `-2` in Python.\n\n*Example:* The previous query can be rewritten with `not_`\n\n>>> r.expr(True).not_().run(conn)\n'
rethinkdb.ast.RqlQuery.not_.__func__.__doc__ = u'Compute the logical inverse (not).\n\n*Example:* Not true is false.\n\n>>> (~r.expr(True)).run(conn)\n\nNote the parentheses around the query. If you execute\n\n>>> ~r.expr(True).run(conn)\n\nYou will get back `-2` because the query executed is `r.expr(True)` which returns `True`,\nand because `~True` evaluates to `-2` in Python.\n\n*Example:* The previous query can be rewritten with `not_`\n\n>>> r.expr(True).not_().run(conn)\n'
rethinkdb.not_.__doc__ = u'Compute the logical inverse (not).\n\n*Example:* Not true is false.\n\n>>> (~r.expr(True)).run(conn)\n\nNote the parentheses around the query. If you execute\n\n>>> ~r.expr(True).run(conn)\n\nYou will get back `-2` because the query executed is `r.expr(True)` which returns `True`,\nand because `~True` evaluates to `-2` in Python.\n\n*Example:* The previous query can be rewritten with `not_`\n\n>>> r.expr(True).not_().run(conn)\n'
rethinkdb.ast.RqlQuery.__or__.__func__.__doc__ = u'Compute the logical and of two values.\n\n*Example:* True and false anded is false?\n\n>>> (r.expr(True) & False).run(conn)\n'
rethinkdb.any.__doc__ = u'Compute the logical and of two values.\n\n*Example:* True and false anded is false?\n\n>>> (r.expr(True) & False).run(conn)\n'
rethinkdb.ast.RqlQuery.__sub__.__func__.__doc__ = u"Subtract two numbers.\n\n*Example:* It's as easy as 2 - 2 = 0.\n\n>>> (r.expr(2) - 2).run(conn)\n\n*Example:* Create a date one year ago today.\n\n>>> r.now() - 365*24*60*60\n\n*Example:* Retrieve how many seconds elapsed between today and date\n\n>>> r.now() - date\n\n"
rethinkdb.sub.__doc__ = u"Subtract two numbers.\n\n*Example:* It's as easy as 2 - 2 = 0.\n\n>>> (r.expr(2) - 2).run(conn)\n\n*Example:* Create a date one year ago today.\n\n>>> r.now() - 365*24*60*60\n\n*Example:* Retrieve how many seconds elapsed between today and date\n\n>>> r.now() - date\n\n"
rethinkdb.ast.Table.between.__func__.__doc__ = u'Get all documents between two keys. Accepts three optional arguments: `index`,\n`left_bound`, and `right_bound`. If `index` is set to the name of a secondary index,\n`between` will return all documents where that index\'s value is in the specified range\n(it uses the primary key by default). `left_bound` or `right_bound` may be set to `open`\nor `closed` to indicate whether or not to include that endpoint of the range (by default,\n`left_bound` is closed and `right_bound` is open).\n\n*Example* Find all users with primary key >= 10 and < 20 (a normal half-open interval).\n\n>>> r.table(\'marvel\').between(10, 20).run(conn)\n\n*Example* Find all users with primary key >= 10 and <= 20 (an interval closed on\nboth sides).\n\n>>> r.table(\'marvel\').between(10, 20, right_bound=\'closed\').run(conn)\n\n*Example* Find all users with primary key < 20. (You can use `NULL` to mean\n"unbounded" for either endpoint.)\n\n>>> r.table(\'marvel\').between(None, 20, right_bound=\'closed\').run(conn)\n\n*Example* Between can be used on secondary indexes too. Just pass an optional index\nargument giving the secondary index to query.\n\n>>> r.table(\'dc\').between(\'dark_knight\', \'man_of_steel\', index=\'code_name\').run(conn)\n\n'
rethinkdb.db.__doc__ = u"Reference a database.\n\n*Example* Before we can query a table we have to select the correct database.\n\n>>> r.db('heroes').table('marvel').run(conn)\n\n"
rethinkdb.ast.RqlQuery.filter.__func__.__doc__ = u'Get all the documents for which the given predicate is true.\n\n`filter` can be called on a sequence, selection, or a field containing an array of\nelements. The return type is the same as the type on which the function was called on.\n\nThe body of every filter is wrapped in an implicit `.default(False)`, which means that\nif a non-existence errors is thrown (when you try to access a field that does not exist\nin a document), RethinkDB will just ignore the document.\nThe `default` value can be changed by passing the named argument `default`.\nSetting this optional argument to `r.error()` will cause any non-existence errors to\nreturn a `RqlRuntimeError`.\n\n*Example* Get all the users that are 30 years old.\n\n>>> r.table(\'users\').filter({"age": 30}).run(conn)\n\nA more general way to write the previous query is to use `r.row`.\n\n>>> r.table(\'users\').filter( r.row["age"] == 30 ).run(conn)\n\nHere the predicate is `r.row["age"] == 30`.\n\n- `r.row` refers to the current document\n- `r.row["age"]` refers to the field `age` of the current document\n- `r.row["age"] == 30` returns `True` if the field `age` is 30\n\nAn even more general way to write the same query is to use a lambda function.\nRead the documentation about [r.row](../row/) to know more about the differences\nbetween `r.row` and lambda functions in ReQL.\n\n>>> r.table(\'users\').filter( lambda user:\n...     user["age"] == 30\n... ).run(conn)\n\n*Example* Get all the users that are more than 18 years old.\n\n>>> r.table("users").filter( r.row["age"] > 18 ).run(conn)\n\n*Example* Get all the users that are less than 18 years old or whose age is unknown\n(field `age` missing).\n\n>>> r.table("users").filter( r.row["age"] < 18, default=True).run(conn)\n\n*Example* Get all the users that are more than 18 years old. Throw an error if a\ndocument is missing the field `age`.\n\n>>> r.table("users").filter( r.row["age"] > 18, default=r.error()).run(conn)\n\n*Example* Select all users who have given their phone number (all the documents\nwhose field `phone_number` is defined and not `None`).\n\n>>> r.table(\'users\').filter( lambda user:\n...     user.has_fields(\'phone_number\')\n... ).run(conn)\n\n*Example* Retrieve all the users who subscribed between January 1st, 2012\n(included) and January 1st, 2013 (excluded).\n\n>>> r.table("users").filter( lambda user:\n...     user["subscription_date"].during( r.time(2012, 1, 1, \'Z\'), r.time(2013, 1, 1, \'Z\') )\n... ).run(conn)\n\n*Example* Retrieve all the users who have a gmail account (whose field `email` ends\nwith `@gmail.com`).\n\n>>> r.table("users").filter( lambda user:\n...     user["email"].match("@gmail.com$")\n... ).run(conn)\n\n*Example* Filter based on the presence of a value in an array.\n\nSuppose the table `users` has the following schema\n\n>>> {\n...     "name": <type \'str\'>\n...     "places_visited": [<type \'str\'>]\n... }\n\nRetrieve all the users whose field `places_visited` contains `France`.\n\n>>> r.table("users").filter( lambda user:\n...     user["places_visited"].contains("France")\n... ).run(conn)\n\n*Example* Filter based on nested fields.\n\nSuppose we have a table `users` containing documents with the following schema.\n\n>>> {\n...     "id": <type \'str\'>\n...     "name": {\n...         "first": <type \'str\'>,\n...         "middle": <type \'str\'>,\n...         "last": <type \'str\'>\n...     }\n... }\n\nRetrieve all users named "William Adama" (first name "William", last name\n"Adama"), with any middle name.\n\n>>> r.table("users").filter({\n...     "name":{\n...         "first": "William",\n...         "last": "Adama"\n...     }\n... }).run(conn)\n\nIf you want an exact match for a field that is an object, you will have to use `r.literal`.\n\nRetrieve all users named "William Adama" (first name "William", last name\n"Adama"), and who do not have a middle name.\n\n>>> r.table("users").filter(r.literal({\n...     "name":{\n...         "first": "William",\n...         "last": "Adama"\n...     }\n... })).run(conn)\n\nThe equivalent queries with a lambda function.\n\n>>> r.table("users").filter( lambda user:\n...     (user["name"]["first"] == "William")\n...         & (user["name"]["last"] == "Adama")\n... ).run(conn)\n\n>>> r.table("users").filter( lambda user:\n...     user["name"] == {\n...         "first": "William",\n...         "last": "Adama"\n...     }\n... ).run(conn)\n'
rethinkdb.ast.Table.get.__func__.__doc__ = u"Get a document by primary key.\n\n*Example* Find a document with the primary key 'superman'.\n\n>>> r.table('marvel').get('superman').run(conn)\n\n"
rethinkdb.ast.Table.get_all.__func__.__doc__ = u'Get all documents where the given value matches the value of the requested index.\n\n*Example* Secondary index keys are not guaranteed to be unique so we cannot query via\n"get" when using a secondary index.\n\n>>> r.table(\'marvel\').get_all(\'man_of_steel\', index=\'code_name\').run(conn)\n\n*Example* Without an index argument, we default to the primary index. While `get` will either return the document or `null` when no document with such a primary key value exists, this will return either a one or zero length stream.\n\n>>> r.table(\'dc\').get_all(\'superman\').run(conn)\n\n*Example* You can get multiple documents in a single call to `get_all`.\n\n>>> r.table(\'dc\').get_all(\'superman\', \'ant man\').run(conn)\n\n'
rethinkdb.ast.DB.table.__func__.__doc__ = u"Select all documents in a table. This command can be chained with other commands to do\nfurther processing on the data.\n\n*Example* Return all documents in the table 'marvel' of the default database.\n\n>>> r.table('marvel').run(conn)\n\n*Example* Return all documents in the table 'marvel' of the database 'heroes'.\n\n>>> r.db('heroes').table('marvel').run(conn)\n\n*Example* If you are OK with potentially out of date data from this table and want\npotentially faster reads, pass a flag allowing out of date data.\n\n>>> r.db('heroes').table('marvel', True).run(conn)\n\n"
rethinkdb.ast.RqlQuery.match.__func__.__doc__ = u'Match against a regular expression. Returns a match object containing the matched string,\nthat string\'s start/end position, and the capture groups. Accepts RE2 syntax\n([https://code.google.com/p/re2/wiki/Syntax](https://code.google.com/p/re2/wiki/Syntax)).\nYou can enable case-insensitive matching by prefixing the regular expression with\n`(?i)`. (See linked RE2 documentation for more flags.)\n\n*Example* Get all users whose name starts with A.\n\n>>> r.table(\'users\').filter(lambda row:row[\'name\'].match("^A")).run(conn)\n\n*Example* Parse out a name (returns "mlucy").\n\n>>> r.expr(\'id:0,name:mlucy,foo:bar\').match(\'name:(\\w+)\')[\'groups\'][0][\'str\'].run(conn)\n\n*Example* Fail to parse out a name (returns null).\n\n>>> r.expr(\'id:0,foo:bar\').match(\'name:(\\w+)\')[\'groups\'][0][\'str\'].run(conn)\n'
rethinkdb.ast.RqlQuery.concat_map.__func__.__doc__ = u"Flattens a sequence of arrays returned by the mappingFunction into a single sequence.\n\n*Example* Construct a sequence of all monsters defeated by Marvel heroes. Here the field\n'defeatedMonsters' is a list that is concatenated to the sequence.\n\n>>> r.table('marvel').concat_map(lambda hero: hero['defeatedMonsters']).run(conn)\n"
rethinkdb.ast.RqlQuery.indexes_of.__func__.__doc__ = u"Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.\n\n*Example* Find the position of the letter 'c'.\n\n>>> r.expr(['a','b','c']).indexes_of('c').run(conn)\n\n*Example* Find the popularity ranking of invisible heroes.\n\n>>> r.table('marvel').union(r.table('dc')).order_by('popularity').indexes_of(\n...     r.row['superpowers'].contains('invisibility')\n... ).run(conn)\n\n"
rethinkdb.ast.RqlQuery.is_empty.__func__.__doc__ = u"Test if a sequence is empty.\n\n*Example* Are there any documents in the marvel table?\n\n>>> r.table('marvel').is_empty().run(conn)\n\n"
rethinkdb.ast.RqlQuery.limit.__func__.__doc__ = u"End the sequence after the given number of elements.\n\n*Example* Only so many can fit in our Pantheon of heroes.\n\n>>> r.table('marvel').order_by('belovedness').limit(10).run(conn)\n"
rethinkdb.ast.RqlQuery.map.__func__.__doc__ = u"Transform each element of the sequence by applying the given mapping function.\n\n*Example* Construct a sequence of hero power ratings.\n\n>>> r.table('marvel').map(lambda hero:\n...     hero['combatPower'] + hero['compassionPower'] * 2\n... ).run(conn)\n\n"
rethinkdb.ast.RqlQuery.nth.__func__.__doc__ = u'Get the nth element of a sequence.\n\n*Example:* Select the second element in the array.\n\n>>> r.expr([1,2,3])[1].run(conn)\n\n'
rethinkdb.ast.RqlQuery.order_by.__func__.__doc__ = u"Sort the sequence by document values of the given key(s). `orderBy` defaults to ascending\nordering. To explicitly specify the ordering, wrap the attribute with either `r.asc` or\n`r.desc`.\n\n*Example* Order our heroes by a series of performance metrics.\n\n>>> r.table('marvel').order_by('enemies_vanquished', 'damsels_saved').run(conn)\n\n*Example* Indexes can be used to perform more efficient orderings. Notice that the\nindex ordering always has highes precedence. Thus the following example is equivalent to\nthe one above.\n\n>>> r.table('marvel').order_by('damsels_saved', index='enemies_vanquished').run(conn)\n\n*Example* You can also specify a descending order when using an index.\n\n>>> r.table('marvel').order_by(index=r.desc('enemies_vanquished')).run(conn)\n\n*Example* Let's lead with our best vanquishers by specify descending ordering.\n\n>>> r.table('marvel').order_by(\n...     r.desc('enemies_vanquished'),\n...     r.asc('damsels_saved')\n... ).run(conn)\n\n*Example* You can use a function for ordering instead of just selecting an attribute.\n\n>>> r.table('marvel').order_by(lambda doc: doc['enemiesVanquished'] + doc['damselsSaved']).run(conn)\n\n*Example* Functions can also be used descendingly.\n\n>>> r.table('marvel').order_by(r.desc(lambda doc: doc['enemiesVanquished'] + doc['damselsSaved'])).run(conn)\n\n"
rethinkdb.ast.RqlQuery.sample.__func__.__doc__ = u"Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.\n\n*Example* Select 3 random heroes.\n\n>>> r.table('marvel').sample(3).run(conn)\n"
rethinkdb.ast.RqlQuery.skip.__func__.__doc__ = u"Skip a number of elements from the head of the sequence.\n\n*Example* Here in conjunction with `order_by` we choose to ignore the most successful heroes.\n\n>>> r.table('marvel').order_by('successMetric').skip(10).run(conn)\n\n"
rethinkdb.ast.RqlQuery.slice.__func__.__doc__ = u"Trim the sequence to within the bounds provided.\n\n*Example:* For this fight, we need heroes with a good mix of strength and agility.\n\n>>> r.table('marvel').order_by('strength')[5:10].run(conn)\n\n"
rethinkdb.ast.RqlQuery.union.__func__.__doc__ = u"Concatenate two sequences.\n\n*Example* Construct a stream of all heroes.\n\n>>> r.table('marvel').union(r.table('dc')).run(conn)\n\n"
rethinkdb.ast.RqlQuery.with_fields.__func__.__doc__ = u"Takes a sequence of objects and a list of fields. If any objects in the sequence don't\nhave all of the specified fields, they're dropped from the sequence. The remaining\nobjects have the specified fields plucked out. (This is identical to `has_fields`\nfollowed by `pluck` on a sequence.)\n\n*Example* Get a list of heroes and their nemeses, excluding any heroes that lack one.\n\n>>> r.table('marvel').with_fields('id', 'nemesis')\n\n*Example* Get a list of heroes and their nemeses, excluding any heroes whose nemesis isn't in an evil organization.\n\n>>> r.table('marvel').with_fields('id', {'nemesis' : {'evil_organization' : True}})\n\n*Example* The nested syntax can quickly become overly verbose so there's a shorthand.\n\n>>> r.table('marvel').with_fields('id', {'nemesis' : 'evil_organization'})\n\n"
rethinkdb.ast.Table.delete.__func__.__doc__ = u"Delete one or more documents from a table. The optional argument return_vals will return\nthe old value of the row you're deleting when set to true (only valid for single-row\ndeletes). The optional argument durability with value 'hard' or 'soft' will override the\ntable or query's default durability setting.\n\nDelete returns an object that contains the following attributes:\n\n- `deleted`: the number of documents that were deleted\n- `skipped`: the number of documents from the selection that were left unmodified because\nthere was nothing to do. For example, if you delete a row that has already been deleted,\nthat row will be skipped\n- `errors`L the number of errors encountered while deleting\nif errors occured, first_error contains the text of the first error\n- `inserted`, `replaced`, and `unchanged`: all 0 for a delete operation.\n\n*Example* Delete superman from the database.\n\n>>> r.table('marvel').get('superman').delete().run(conn)\n\n*Example* Delete every document from the table 'marvel'. Also, don't wait for the\noperation to be flushed to disk.\n\n>>> r.table('marvel').delete(durability='soft').run(conn)\n\n*Example* You can get back a copy of the row you delete from the database as well.\n\n>>> r.table('marvel').delete(return_vals=True).run(conn)\n\n"
rethinkdb.ast.Table.insert.__func__.__doc__ = u"Insert JSON documents into a table. Accepts a single JSON document or an array of\ndocuments.\n\nInsert returns an object that contains the following attributes:\n\n- `inserted`: the number of documents that were succesfully inserted\n- `replaced`: the number of documents that were updated when upsert is used\n- `unchanged`: the number of documents that would have been modified, except that the\nnew value was the same as the old value when doing an upsert\n- `errors`: the number of errors encountered while inserting; if errors where\nencountered while inserting, `first_error` contains the text of the first error\n- `generated_keys`: a list of generated primary key values\n- `deleted` and `skipped`: 0 for an insert operation.\n\n*Example* Insert a row into a table named 'marvel'.\n\n>>> r.table('marvel').insert(\n...     { 'superhero': 'Iron Man', 'superpower':'Arc Reactor' }).run(conn)\n\n*Example* Insert multiple rows into a table named 'marvel'. Also, specify that only\nsoft durability is required.\n\n>>> r.table('marvel').insert([\n...     { 'superhero': 'Wolverine', 'superpower': 'Adamantium' },\n...     { 'superhero': 'Spiderman', 'superpower': 'spidy sense' }\n...     ], durability='soft'\n... ).run(conn)\n\n*Example* Insert a row into a table named 'marvel', overwriting if the document already exists.\n\n>>> r.table('marvel').insert(\n...     { 'superhero': 'Iron Man', 'superpower': 'Arc Reactor' },\n...     upsert=True\n... ).run(conn)\n\n*Example* Get back a copy of the new row, this is useful if you've done an upsert or generated an ID.\n\n>>> r.table('marvel').insert(\n...     { 'superhero': 'Iron Man', 'superpower': 'Arc Reactor' },\n...     upsert=True, return_vals=True\n... ).run(conn)\n"
rethinkdb.ast.Table.replace.__func__.__doc__ = u"Replace documents in a table. Accepts a JSON document or a ReQL expression, and replaces\nthe original document with the new one. The new document must have the same primary key\nas the original document. The optional argument durability with value 'hard' or 'soft'\nwill override the table or query's default durability setting. The optional argument\nreturn_vals will return the old and new values of the row you're modifying when set to\ntrue (only valid for single-row replacements). The optional argument non_atomic lets you\npermit non-atomic updates.\n\nReplace returns an object that contains the following attributes:\n\n- `replaced`: the number of documents that were replaced\n- `unchanged`: the number of documents that would have been modified, except that the\nnew value was the same as the old value\n- `inserted`: the number of new documents added. You can have new documents inserted if\nyou do a point-replace on a key that isn't in the table or you do a replace on a\nselection and one of the documents you are replacing has been deleted\n- `deleted`: the number of deleted documents when doing a replace with `None` \n- `errors`: the number of errors encountered while performing the replace; if errors\noccurred performing the replace, first_error contains the text of the first error encountered\n- `skipped`: 0 for a replace operation\n\n*Example* Remove all existing attributes from Superman's document, and add an\nattribute 'age'.\n\n>>> r.table('marvel').get('superman').replace({ 'id': 'superman', 'age': 30 }).run(conn)\n\n*Example* Allow the server to run non-atomic operations.\n\n>>> r.table('marvel').get('superman').replace(\n...     { 'id': 'superman', 'age': 30 }, non_atomic=True\n... ).run(conn)\n\n*Example* Mark all Marvel heroes as favorites, specifying soft durability.\n\n>>> r.table('heroes').filter(r.row['universe'] == 'marvel').replace(\n...     lambda hero: hero.merge({'is_fav': True}), durability='soft'\n... ).run(conn)\n\n*Example* You can get a copy of the previous value and the old value back using the\nreturn_vals flag.\n\n>>> r.table('heroes').filter(r.row['universe'] == 'marvel').replace(\n...     lambda hero: hero.merge({'is_fav': True}), return_vals=True\n... ).run(conn)\n\n"
rethinkdb.ast.Table.sync.__func__.__doc__ = u'`sync` ensures that writes on a given table are written to permanent storage. Queries\nthat specify soft durability (`durability=\'soft\'`) do not give such guarantees, so\n`sync` can be used to ensure the state of these queries. A call to `sync` does not return\nuntil all previous writes to the table are persisted.\n\nIf successful, the operation returns an object: `{"synced": 1}`.\n\n*Example* After having updated multiple heroes with soft durability, we now want to wait\nuntil these changes are persisted.\n\n>>> r.table(\'marvel\').sync().run(conn)\n\n'
rethinkdb.ast.Table.update.__func__.__doc__ = u"Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a\ncombination of the two. You can pass options like `returnVals` that will return the old\nand new values of the row you have modified.\n\nUpdate returns an object that contains the following attributes:\n\n- `replaced`: the number of documents that were updated\n- `unchanged`: the number of documents that would have been modified except the new\nvalue was the same as the old value;\n- `skipped`: the number of documents that were left unmodified because there was nothing\nto do: either the row didn't exist or the new value is `None`;\n- `errors`: the number of errors encountered while performing the update; if errors\noccured, first_error contains the text of the first error;\n- `deleted` and `inserted`: 0 for an update operation.\n\n*Example* Update Superman's age to 30. If attribute 'age' doesn't exist, adds it to\nthe document.\n\n>>> r.table('marvel').get('superman').update({ 'age': 30 }).run(conn)\n\n*Example* Increment every superhero's age. If age doesn't exist, throws an error. Specify soft durability.\n\n>>> r.table('marvel').update(lambda x: {'age': x['age'] + 1}, durability='soft').run(conn)\n\n*Example* Allow the server to run non-atomic operations.\n\n>>> r.table('marvel').update(\n...     lambda x: {'age': x['age'] + r.js('1')}, non_atomic=True\n... ).run(conn)\n\n*Example* You can get back a copy of the original row and the update row using the return_vals flag.\n\n>>> r.table('marvel').get('superman').update({ 'age': 30 }, return_vals=True).run(conn)\n\n"