// Autogenerated by metajava.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../../templates/Enum.java

package com.rethinkdb.gen.proto;

import java.util.Optional;

public enum TermType {

    DATUM(1),
    MAKE_ARRAY(2),
    MAKE_OBJ(3),
    VAR(10),
    JAVASCRIPT(11),
    UUID(169),
    HTTP(153),
    ERROR(12),
    IMPLICIT_VAR(13),
    DB(14),
    TABLE(15),
    GET(16),
    GET_ALL(78),
    EQ(17),
    NE(18),
    LT(19),
    LE(20),
    GT(21),
    GE(22),
    NOT(23),
    ADD(24),
    SUB(25),
    MUL(26),
    DIV(27),
    MOD(28),
    FLOOR(183),
    CEIL(184),
    ROUND(185),
    APPEND(29),
    PREPEND(80),
    DIFFERENCE(95),
    SET_INSERT(88),
    SET_INTERSECTION(89),
    SET_UNION(90),
    SET_DIFFERENCE(91),
    SLICE(30),
    SKIP(70),
    LIMIT(71),
    OFFSETS_OF(87),
    CONTAINS(93),
    GET_FIELD(31),
    KEYS(94),
    VALUES(186),
    OBJECT(143),
    HAS_FIELDS(32),
    WITH_FIELDS(96),
    PLUCK(33),
    WITHOUT(34),
    MERGE(35),
    BETWEEN_DEPRECATED(36),
    BETWEEN(182),
    REDUCE(37),
    MAP(38),
    FOLD(187),
    FILTER(39),
    CONCAT_MAP(40),
    ORDER_BY(41),
    DISTINCT(42),
    COUNT(43),
    IS_EMPTY(86),
    UNION(44),
    NTH(45),
    BRACKET(170),
    INNER_JOIN(48),
    OUTER_JOIN(49),
    EQ_JOIN(50),
    ZIP(72),
    RANGE(173),
    INSERT_AT(82),
    DELETE_AT(83),
    CHANGE_AT(84),
    SPLICE_AT(85),
    COERCE_TO(51),
    TYPE_OF(52),
    UPDATE(53),
    DELETE(54),
    REPLACE(55),
    INSERT(56),
    DB_CREATE(57),
    DB_DROP(58),
    DB_LIST(59),
    TABLE_CREATE(60),
    TABLE_DROP(61),
    TABLE_LIST(62),
    CONFIG(174),
    STATUS(175),
    WAIT(177),
    RECONFIGURE(176),
    REBALANCE(179),
    SYNC(138),
    GRANT(188),
    INDEX_CREATE(75),
    INDEX_DROP(76),
    INDEX_LIST(77),
    INDEX_STATUS(139),
    INDEX_WAIT(140),
    INDEX_RENAME(156),
    FUNCALL(64),
    BRANCH(65),
    OR(66),
    AND(67),
    FOR_EACH(68),
    FUNC(69),
    ASC(73),
    DESC(74),
    INFO(79),
    MATCH(97),
    UPCASE(141),
    DOWNCASE(142),
    SAMPLE(81),
    DEFAULT(92),
    JSON(98),
    TO_JSON_STRING(172),
    ISO8601(99),
    TO_ISO8601(100),
    EPOCH_TIME(101),
    TO_EPOCH_TIME(102),
    NOW(103),
    IN_TIMEZONE(104),
    DURING(105),
    DATE(106),
    TIME_OF_DAY(126),
    TIMEZONE(127),
    YEAR(128),
    MONTH(129),
    DAY(130),
    DAY_OF_WEEK(131),
    DAY_OF_YEAR(132),
    HOURS(133),
    MINUTES(134),
    SECONDS(135),
    TIME(136),
    MONDAY(107),
    TUESDAY(108),
    WEDNESDAY(109),
    THURSDAY(110),
    FRIDAY(111),
    SATURDAY(112),
    SUNDAY(113),
    JANUARY(114),
    FEBRUARY(115),
    MARCH(116),
    APRIL(117),
    MAY(118),
    JUNE(119),
    JULY(120),
    AUGUST(121),
    SEPTEMBER(122),
    OCTOBER(123),
    NOVEMBER(124),
    DECEMBER(125),
    LITERAL(137),
    GROUP(144),
    SUM(145),
    AVG(146),
    MIN(147),
    MAX(148),
    SPLIT(149),
    UNGROUP(150),
    RANDOM(151),
    CHANGES(152),
    ARGS(154),
    BINARY(155),
    GEOJSON(157),
    TO_GEOJSON(158),
    POINT(159),
    LINE(160),
    POLYGON(161),
    DISTANCE(162),
    INTERSECTS(163),
    INCLUDES(164),
    CIRCLE(165),
    GET_INTERSECTING(166),
    FILL(167),
    GET_NEAREST(168),
    POLYGON_SUB(171),
    MINVAL(180),
    MAXVAL(181);

    public final int value;

    private TermType(int value){
        this.value = value;
    }

    public static TermType fromValue(int value) {
        switch (value) {
            case 1: return TermType.DATUM;
            case 2: return TermType.MAKE_ARRAY;
            case 3: return TermType.MAKE_OBJ;
            case 10: return TermType.VAR;
            case 11: return TermType.JAVASCRIPT;
            case 169: return TermType.UUID;
            case 153: return TermType.HTTP;
            case 12: return TermType.ERROR;
            case 13: return TermType.IMPLICIT_VAR;
            case 14: return TermType.DB;
            case 15: return TermType.TABLE;
            case 16: return TermType.GET;
            case 78: return TermType.GET_ALL;
            case 17: return TermType.EQ;
            case 18: return TermType.NE;
            case 19: return TermType.LT;
            case 20: return TermType.LE;
            case 21: return TermType.GT;
            case 22: return TermType.GE;
            case 23: return TermType.NOT;
            case 24: return TermType.ADD;
            case 25: return TermType.SUB;
            case 26: return TermType.MUL;
            case 27: return TermType.DIV;
            case 28: return TermType.MOD;
            case 183: return TermType.FLOOR;
            case 184: return TermType.CEIL;
            case 185: return TermType.ROUND;
            case 29: return TermType.APPEND;
            case 80: return TermType.PREPEND;
            case 95: return TermType.DIFFERENCE;
            case 88: return TermType.SET_INSERT;
            case 89: return TermType.SET_INTERSECTION;
            case 90: return TermType.SET_UNION;
            case 91: return TermType.SET_DIFFERENCE;
            case 30: return TermType.SLICE;
            case 70: return TermType.SKIP;
            case 71: return TermType.LIMIT;
            case 87: return TermType.OFFSETS_OF;
            case 93: return TermType.CONTAINS;
            case 31: return TermType.GET_FIELD;
            case 94: return TermType.KEYS;
            case 186: return TermType.VALUES;
            case 143: return TermType.OBJECT;
            case 32: return TermType.HAS_FIELDS;
            case 96: return TermType.WITH_FIELDS;
            case 33: return TermType.PLUCK;
            case 34: return TermType.WITHOUT;
            case 35: return TermType.MERGE;
            case 36: return TermType.BETWEEN_DEPRECATED;
            case 182: return TermType.BETWEEN;
            case 37: return TermType.REDUCE;
            case 38: return TermType.MAP;
            case 187: return TermType.FOLD;
            case 39: return TermType.FILTER;
            case 40: return TermType.CONCAT_MAP;
            case 41: return TermType.ORDER_BY;
            case 42: return TermType.DISTINCT;
            case 43: return TermType.COUNT;
            case 86: return TermType.IS_EMPTY;
            case 44: return TermType.UNION;
            case 45: return TermType.NTH;
            case 170: return TermType.BRACKET;
            case 48: return TermType.INNER_JOIN;
            case 49: return TermType.OUTER_JOIN;
            case 50: return TermType.EQ_JOIN;
            case 72: return TermType.ZIP;
            case 173: return TermType.RANGE;
            case 82: return TermType.INSERT_AT;
            case 83: return TermType.DELETE_AT;
            case 84: return TermType.CHANGE_AT;
            case 85: return TermType.SPLICE_AT;
            case 51: return TermType.COERCE_TO;
            case 52: return TermType.TYPE_OF;
            case 53: return TermType.UPDATE;
            case 54: return TermType.DELETE;
            case 55: return TermType.REPLACE;
            case 56: return TermType.INSERT;
            case 57: return TermType.DB_CREATE;
            case 58: return TermType.DB_DROP;
            case 59: return TermType.DB_LIST;
            case 60: return TermType.TABLE_CREATE;
            case 61: return TermType.TABLE_DROP;
            case 62: return TermType.TABLE_LIST;
            case 174: return TermType.CONFIG;
            case 175: return TermType.STATUS;
            case 177: return TermType.WAIT;
            case 176: return TermType.RECONFIGURE;
            case 179: return TermType.REBALANCE;
            case 138: return TermType.SYNC;
            case 188: return TermType.GRANT;
            case 75: return TermType.INDEX_CREATE;
            case 76: return TermType.INDEX_DROP;
            case 77: return TermType.INDEX_LIST;
            case 139: return TermType.INDEX_STATUS;
            case 140: return TermType.INDEX_WAIT;
            case 156: return TermType.INDEX_RENAME;
            case 64: return TermType.FUNCALL;
            case 65: return TermType.BRANCH;
            case 66: return TermType.OR;
            case 67: return TermType.AND;
            case 68: return TermType.FOR_EACH;
            case 69: return TermType.FUNC;
            case 73: return TermType.ASC;
            case 74: return TermType.DESC;
            case 79: return TermType.INFO;
            case 97: return TermType.MATCH;
            case 141: return TermType.UPCASE;
            case 142: return TermType.DOWNCASE;
            case 81: return TermType.SAMPLE;
            case 92: return TermType.DEFAULT;
            case 98: return TermType.JSON;
            case 172: return TermType.TO_JSON_STRING;
            case 99: return TermType.ISO8601;
            case 100: return TermType.TO_ISO8601;
            case 101: return TermType.EPOCH_TIME;
            case 102: return TermType.TO_EPOCH_TIME;
            case 103: return TermType.NOW;
            case 104: return TermType.IN_TIMEZONE;
            case 105: return TermType.DURING;
            case 106: return TermType.DATE;
            case 126: return TermType.TIME_OF_DAY;
            case 127: return TermType.TIMEZONE;
            case 128: return TermType.YEAR;
            case 129: return TermType.MONTH;
            case 130: return TermType.DAY;
            case 131: return TermType.DAY_OF_WEEK;
            case 132: return TermType.DAY_OF_YEAR;
            case 133: return TermType.HOURS;
            case 134: return TermType.MINUTES;
            case 135: return TermType.SECONDS;
            case 136: return TermType.TIME;
            case 107: return TermType.MONDAY;
            case 108: return TermType.TUESDAY;
            case 109: return TermType.WEDNESDAY;
            case 110: return TermType.THURSDAY;
            case 111: return TermType.FRIDAY;
            case 112: return TermType.SATURDAY;
            case 113: return TermType.SUNDAY;
            case 114: return TermType.JANUARY;
            case 115: return TermType.FEBRUARY;
            case 116: return TermType.MARCH;
            case 117: return TermType.APRIL;
            case 118: return TermType.MAY;
            case 119: return TermType.JUNE;
            case 120: return TermType.JULY;
            case 121: return TermType.AUGUST;
            case 122: return TermType.SEPTEMBER;
            case 123: return TermType.OCTOBER;
            case 124: return TermType.NOVEMBER;
            case 125: return TermType.DECEMBER;
            case 137: return TermType.LITERAL;
            case 144: return TermType.GROUP;
            case 145: return TermType.SUM;
            case 146: return TermType.AVG;
            case 147: return TermType.MIN;
            case 148: return TermType.MAX;
            case 149: return TermType.SPLIT;
            case 150: return TermType.UNGROUP;
            case 151: return TermType.RANDOM;
            case 152: return TermType.CHANGES;
            case 154: return TermType.ARGS;
            case 155: return TermType.BINARY;
            case 157: return TermType.GEOJSON;
            case 158: return TermType.TO_GEOJSON;
            case 159: return TermType.POINT;
            case 160: return TermType.LINE;
            case 161: return TermType.POLYGON;
            case 162: return TermType.DISTANCE;
            case 163: return TermType.INTERSECTS;
            case 164: return TermType.INCLUDES;
            case 165: return TermType.CIRCLE;
            case 166: return TermType.GET_INTERSECTING;
            case 167: return TermType.FILL;
            case 168: return TermType.GET_NEAREST;
            case 171: return TermType.POLYGON_SUB;
            case 180: return TermType.MINVAL;
            case 181: return TermType.MAXVAL;
            default:
                throw new IllegalArgumentException(String.format(
                "%s is not a legal value for TermType", value));
        }
    }

    public static Optional<TermType> maybeFromValue(int value) {
        try {
            return Optional.of(fromValue(value));
        } catch (IllegalArgumentException iae) {
            return Optional.empty();
        }
    }

}
