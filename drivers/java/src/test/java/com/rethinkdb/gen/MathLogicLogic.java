// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class MathLogicLogic {
    // These tests are aimed at &&, ||, and !
    Logger logger = LoggerFactory.getLogger(MathLogicLogic.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Matches Python's str() function, which we use.
    // TODO: We might want to handle this in a visit_Call in convert_tests.py instead.
    private static String str(long i) {
        return String.valueOf(i);
    }

    // A hack to concatenate two List<Long>s -- see is_array_add in convert_tests.py.
    private static List<Long> concatLong(List<Long> x, List<Long> y) {
        List<Long> ret = new ArrayList<Long>(x);
        ret.addAll(y);
        return ret;
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        {
            // math_logic/logic.yaml line #8
            /* true */
            Boolean expected_ = true;
            /* r.expr(true) & true */
            logger.info("About to run line #8: r.expr(true).and(true)");
            Object obtained = runOrCatch(r.expr(true).and(true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #8");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #9
            /* true */
            Boolean expected_ = true;
            /* true & r.expr(true) */
            logger.info("About to run line #9: r.and(true, r.expr(true))");
            Object obtained = runOrCatch(r.and(true, r.expr(true)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #9");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #10
            /* true */
            Boolean expected_ = true;
            /* r.and_(true,true) */
            logger.info("About to run line #10: r.and(true, true)");
            Object obtained = runOrCatch(r.and(true, true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #10");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #11
            /* true */
            Boolean expected_ = true;
            /* r.expr(true).and_(true) */
            logger.info("About to run line #11: r.expr(true).and(true)");
            Object obtained = runOrCatch(r.expr(true).and(true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #11");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #22
            /* false */
            Boolean expected_ = false;
            /* r.expr(true) & false */
            logger.info("About to run line #22: r.expr(true).and(false)");
            Object obtained = runOrCatch(r.expr(true).and(false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #22");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #23
            /* false */
            Boolean expected_ = false;
            /* r.expr(false) & false */
            logger.info("About to run line #23: r.expr(false).and(false)");
            Object obtained = runOrCatch(r.expr(false).and(false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #23");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #24
            /* false */
            Boolean expected_ = false;
            /* true & r.expr(false) */
            logger.info("About to run line #24: r.and(true, r.expr(false))");
            Object obtained = runOrCatch(r.and(true, r.expr(false)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #24");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #25
            /* false */
            Boolean expected_ = false;
            /* false & r.expr(false) */
            logger.info("About to run line #25: r.and(false, r.expr(false))");
            Object obtained = runOrCatch(r.and(false, r.expr(false)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #25");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #26
            /* false */
            Boolean expected_ = false;
            /* r.and_(true,false) */
            logger.info("About to run line #26: r.and(true, false)");
            Object obtained = runOrCatch(r.and(true, false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #26");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #27
            /* false */
            Boolean expected_ = false;
            /* r.and_(false,false) */
            logger.info("About to run line #27: r.and(false, false)");
            Object obtained = runOrCatch(r.and(false, false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #27");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #28
            /* false */
            Boolean expected_ = false;
            /* r.expr(true).and_(false) */
            logger.info("About to run line #28: r.expr(true).and(false)");
            Object obtained = runOrCatch(r.expr(true).and(false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #28");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #29
            /* false */
            Boolean expected_ = false;
            /* r.expr(false).and_(false) */
            logger.info("About to run line #29: r.expr(false).and(false)");
            Object obtained = runOrCatch(r.expr(false).and(false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #29");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #48
            /* true */
            Boolean expected_ = true;
            /* r.expr(true) | true */
            logger.info("About to run line #48: r.expr(true).or(true)");
            Object obtained = runOrCatch(r.expr(true).or(true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #48");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #49
            /* true */
            Boolean expected_ = true;
            /* r.expr(true) | false */
            logger.info("About to run line #49: r.expr(true).or(false)");
            Object obtained = runOrCatch(r.expr(true).or(false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #49");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #49:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #50
            /* true */
            Boolean expected_ = true;
            /* true | r.expr(true) */
            logger.info("About to run line #50: r.or(true, r.expr(true))");
            Object obtained = runOrCatch(r.or(true, r.expr(true)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #50");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #51
            /* true */
            Boolean expected_ = true;
            /* true | r.expr(false) */
            logger.info("About to run line #51: r.or(true, r.expr(false))");
            Object obtained = runOrCatch(r.or(true, r.expr(false)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #51");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #51:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #52
            /* true */
            Boolean expected_ = true;
            /* r.or_(true,true) */
            logger.info("About to run line #52: r.or(true, true)");
            Object obtained = runOrCatch(r.or(true, true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #52");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #52:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #53
            /* true */
            Boolean expected_ = true;
            /* r.or_(true,false) */
            logger.info("About to run line #53: r.or(true, false)");
            Object obtained = runOrCatch(r.or(true, false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #53");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #53:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #54
            /* true */
            Boolean expected_ = true;
            /* r.expr(true).or_(true) */
            logger.info("About to run line #54: r.expr(true).or(true)");
            Object obtained = runOrCatch(r.expr(true).or(true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #54");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #54:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #55
            /* true */
            Boolean expected_ = true;
            /* r.expr(true).or_(false) */
            logger.info("About to run line #55: r.expr(true).or(false)");
            Object obtained = runOrCatch(r.expr(true).or(false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #55");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #55:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #72
            /* false */
            Boolean expected_ = false;
            /* r.expr(false) | false */
            logger.info("About to run line #72: r.expr(false).or(false)");
            Object obtained = runOrCatch(r.expr(false).or(false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #72");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #72:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #73
            /* false */
            Boolean expected_ = false;
            /* false | r.expr(false) */
            logger.info("About to run line #73: r.or(false, r.expr(false))");
            Object obtained = runOrCatch(r.or(false, r.expr(false)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #73");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #73:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #74
            /* false */
            Boolean expected_ = false;
            /* r.and_(false,false) */
            logger.info("About to run line #74: r.and(false, false)");
            Object obtained = runOrCatch(r.and(false, false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #74");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #74:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #75
            /* false */
            Boolean expected_ = false;
            /* r.expr(false).and_(false) */
            logger.info("About to run line #75: r.expr(false).and(false)");
            Object obtained = runOrCatch(r.expr(false).and(false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #75");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #75:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #88
            /* false */
            Boolean expected_ = false;
            /* ~r.expr(True) */
            logger.info("About to run line #88: r.expr(true).not()");
            Object obtained = runOrCatch(r.expr(true).not(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #88");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #88:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #89
            /* false */
            Boolean expected_ = false;
            /* r.not_(True) */
            logger.info("About to run line #89: r.not(true)");
            Object obtained = runOrCatch(r.not(true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #89");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #89:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #93
            /* true */
            Boolean expected_ = true;
            /* ~r.expr(False) */
            logger.info("About to run line #93: r.expr(false).not()");
            Object obtained = runOrCatch(r.expr(false).not(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #93");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #93:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #94
            /* true */
            Boolean expected_ = true;
            /* r.not_(False) */
            logger.info("About to run line #94: r.not(false)");
            Object obtained = runOrCatch(r.not(false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #94");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #94:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #97
            /* false */
            Boolean expected_ = false;
            /* r.expr(True).not_() */
            logger.info("About to run line #97: r.expr(true).not()");
            Object obtained = runOrCatch(r.expr(true).not(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #97");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #97:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #100
            /* true */
            Boolean expected_ = true;
            /* r.expr(False).not_() */
            logger.info("About to run line #100: r.expr(false).not()");
            Object obtained = runOrCatch(r.expr(false).not(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #100");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #100:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #107
            /* true */
            Boolean expected_ = true;
            /* ~r.and_(True, True) == r.or_(~r.expr(True), ~r.expr(True)) */
            logger.info("About to run line #107: r.and(true, true).not().eq(r.or(r.expr(true).not(), r.expr(true).not()))");
            Object obtained = runOrCatch(r.and(true, true).not().eq(r.or(r.expr(true).not(), r.expr(true).not())),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #107");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #107:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #108
            /* true */
            Boolean expected_ = true;
            /* ~r.and_(True, False) == r.or_(~r.expr(True), ~r.expr(False)) */
            logger.info("About to run line #108: r.and(true, false).not().eq(r.or(r.expr(true).not(), r.expr(false).not()))");
            Object obtained = runOrCatch(r.and(true, false).not().eq(r.or(r.expr(true).not(), r.expr(false).not())),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #108");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #108:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #109
            /* true */
            Boolean expected_ = true;
            /* ~r.and_(False, False) == r.or_(~r.expr(False), ~r.expr(False)) */
            logger.info("About to run line #109: r.and(false, false).not().eq(r.or(r.expr(false).not(), r.expr(false).not()))");
            Object obtained = runOrCatch(r.and(false, false).not().eq(r.or(r.expr(false).not(), r.expr(false).not())),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #109");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #109:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #110
            /* true */
            Boolean expected_ = true;
            /* ~r.and_(False, True) == r.or_(~r.expr(False), ~r.expr(True)) */
            logger.info("About to run line #110: r.and(false, true).not().eq(r.or(r.expr(false).not(), r.expr(true).not()))");
            Object obtained = runOrCatch(r.and(false, true).not().eq(r.or(r.expr(false).not(), r.expr(true).not())),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #110");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #110:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #120
            /* true */
            Boolean expected_ = true;
            /* r.and_(True, True, True, True, True) */
            logger.info("About to run line #120: r.and(true, true, true, true, true)");
            Object obtained = runOrCatch(r.and(true, true, true, true, true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #120");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #120:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #123
            /* false */
            Boolean expected_ = false;
            /* r.and_(True, True, True, False, True) */
            logger.info("About to run line #123: r.and(true, true, true, false, true)");
            Object obtained = runOrCatch(r.and(true, true, true, false, true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #123");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #123:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #126
            /* false */
            Boolean expected_ = false;
            /* r.and_(True, False, True, False, True) */
            logger.info("About to run line #126: r.and(true, false, true, false, true)");
            Object obtained = runOrCatch(r.and(true, false, true, false, true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #126");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #126:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #129
            /* false */
            Boolean expected_ = false;
            /* r.or_(False, False, False, False, False) */
            logger.info("About to run line #129: r.or(false, false, false, false, false)");
            Object obtained = runOrCatch(r.or(false, false, false, false, false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #129");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #129:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #132
            /* true */
            Boolean expected_ = true;
            /* r.or_(False, False, False, True, False) */
            logger.info("About to run line #132: r.or(false, false, false, true, false)");
            Object obtained = runOrCatch(r.or(false, false, false, true, false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #132");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #132:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #135
            /* true */
            Boolean expected_ = true;
            /* r.or_(False, True, False, True, False) */
            logger.info("About to run line #135: r.or(false, true, false, true, false)");
            Object obtained = runOrCatch(r.or(false, true, false, true, false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #135");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #135:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #140
            /* err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", r.array());
            /* r.expr(r.expr('a')['b']).default(2) */
            logger.info("About to run line #140: r.expr(r.expr('a').bracket('b')).default_(2L)");
            Object obtained = runOrCatch(r.expr(r.expr("a").bracket("b")).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #140");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #140:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #145
            /* False */
            Boolean expected_ = false;
            /* r.expr(r.and_(True, False) == r.or_(False, True)) */
            logger.info("About to run line #145: r.expr(r.and(true, false).eq(r.or(false, true)))");
            Object obtained = runOrCatch(r.expr(r.and(true, false).eq(r.or(false, true))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #145");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #145:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #151
            /* False */
            Boolean expected_ = false;
            /* r.expr(r.and_(True, False) >= r.or_(False, True)) */
            logger.info("About to run line #151: r.expr(r.and(true, false).ge(r.or(false, true)))");
            Object obtained = runOrCatch(r.expr(r.and(true, false).ge(r.or(false, true))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #151");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #151:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #156
            /* true */
            Boolean expected_ = true;
            /* r.expr(1) & True */
            logger.info("About to run line #156: r.expr(1L).and(true)");
            Object obtained = runOrCatch(r.expr(1L).and(true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #156");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #156:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #160
            /* ("str") */
            String expected_ = "str";
            /* r.expr(False) | 'str' */
            logger.info("About to run line #160: r.expr(false).or('str')");
            Object obtained = runOrCatch(r.expr(false).or("str"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #160");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #160:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #164
            /* false */
            Boolean expected_ = false;
            /* ~r.expr(1) */
            logger.info("About to run line #164: r.expr(1L).not()");
            Object obtained = runOrCatch(r.expr(1L).not(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #164");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #164:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/logic.yaml line #168
            /* true */
            Boolean expected_ = true;
            /* ~r.expr(null) */
            logger.info("About to run line #168: r.expr((ReqlExpr) null).not()");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).not(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #168");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #168:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
