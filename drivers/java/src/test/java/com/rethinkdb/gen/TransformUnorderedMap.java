// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class TransformUnorderedMap {
    // Tests for ordered_union
    Logger logger = LoggerFactory.getLogger(TransformUnorderedMap.class);
    public static final RethinkDB r = RethinkDB.r;
    public static final Table even = r.db("test").table("even");
    public static final Table odd = r.db("test").table("odd");
    public static final Table odd2 = r.db("test").table("odd2");

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
        try {
            r.db("test").tableCreate("even").run(conn);
            r.db("test").table(even).wait_().run(conn);
        }catch (Exception e){}
        try {
            r.db("test").tableCreate("odd").run(conn);
            r.db("test").table(odd).wait_().run(conn);
        }catch (Exception e){}
        try {
            r.db("test").tableCreate("odd2").run(conn);
            r.db("test").table(odd2).wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.db("test").tableDrop("even").run(conn);
        r.db("test").tableDrop("odd").run(conn);
        r.db("test").tableDrop("odd2").run(conn);
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        {
            // transform/unordered_map.yaml line #6
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* odd.insert([{"id":1, "num":1}, {"id":3, "num":3}, {"id":5, "num":5}]) */
            logger.info("About to run line #6: odd.insert(r.array(r.hashMap('id', 1L).with('num', 1L), r.hashMap('id', 3L).with('num', 3L), r.hashMap('id', 5L).with('num', 5L)))");
            Object obtained = runOrCatch(odd.insert(r.array(r.hashMap("id", 1L).with("num", 1L), r.hashMap("id", 3L).with("num", 3L), r.hashMap("id", 5L).with("num", 5L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #6");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/unordered_map.yaml line #7
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* even.insert([{"id":2, "num":2}, {"id":4, "num":4}, {"id":6, "num":6}]) */
            logger.info("About to run line #7: even.insert(r.array(r.hashMap('id', 2L).with('num', 2L), r.hashMap('id', 4L).with('num', 4L), r.hashMap('id', 6L).with('num', 6L)))");
            Object obtained = runOrCatch(even.insert(r.array(r.hashMap("id", 2L).with("num", 2L), r.hashMap("id", 4L).with("num", 4L), r.hashMap("id", 6L).with("num", 6L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #7");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/unordered_map.yaml line #8
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* odd2.insert([{"id":7, "num":1}, {"id":8, "num":3}, {"id":9, "num":2}]) */
            logger.info("About to run line #8: odd2.insert(r.array(r.hashMap('id', 7L).with('num', 1L), r.hashMap('id', 8L).with('num', 3L), r.hashMap('id', 9L).with('num', 2L)))");
            Object obtained = runOrCatch(odd2.insert(r.array(r.hashMap("id", 7L).with("num", 1L), r.hashMap("id", 8L).with("num", 3L), r.hashMap("id", 9L).with("num", 2L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #8");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/unordered_map.yaml line #11
            /* [{"id":1, "num":1}, {"id":3, "num":3}, {"id":5, "num":5}, {"id":2, "num":2}, {"id":4, "num":4}, {"id":6, "num":6}] */
            List expected_ = r.array(r.hashMap("id", 1L).with("num", 1L), r.hashMap("id", 3L).with("num", 3L), r.hashMap("id", 5L).with("num", 5L), r.hashMap("id", 2L).with("num", 2L), r.hashMap("id", 4L).with("num", 4L), r.hashMap("id", 6L).with("num", 6L));
            /* odd.order_by("num").union(even.order_by("num"), interleave = false) */
            logger.info("About to run line #11: odd.orderBy('num').union(even.orderBy('num')).optArg('interleave', false)");
            Object obtained = runOrCatch(odd.orderBy("num").union(even.orderBy("num")).optArg("interleave", false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #11");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/unordered_map.yaml line #16
            /* [{"id":2, "num":2}, {"id":4, "num":4}, {"id":6, "num":6}, {"id":1, "num":1}, {"id":3, "num":3}, {"id":5, "num":5}] */
            List expected_ = r.array(r.hashMap("id", 2L).with("num", 2L), r.hashMap("id", 4L).with("num", 4L), r.hashMap("id", 6L).with("num", 6L), r.hashMap("id", 1L).with("num", 1L), r.hashMap("id", 3L).with("num", 3L), r.hashMap("id", 5L).with("num", 5L));
            /* even.order_by("num").union(odd.order_by("num"), interleave = false) */
            logger.info("About to run line #16: even.orderBy('num').union(odd.orderBy('num')).optArg('interleave', false)");
            Object obtained = runOrCatch(even.orderBy("num").union(odd.orderBy("num")).optArg("interleave", false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #16");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/unordered_map.yaml line #22
            /* [{"id":1, "num":1}, {"id":2, "num":2}, {"id":3, "num":3}, {"id":4, "num":4}, {"id":5, "num":5}, {"id":6, "num":6}] */
            List expected_ = r.array(r.hashMap("id", 1L).with("num", 1L), r.hashMap("id", 2L).with("num", 2L), r.hashMap("id", 3L).with("num", 3L), r.hashMap("id", 4L).with("num", 4L), r.hashMap("id", 5L).with("num", 5L), r.hashMap("id", 6L).with("num", 6L));
            /* odd.order_by("num").union(even.order_by("num"), interleave="num") */
            logger.info("About to run line #22: odd.orderBy('num').union(even.orderBy('num')).optArg('interleave', 'num')");
            Object obtained = runOrCatch(odd.orderBy("num").union(even.orderBy("num")).optArg("interleave", "num"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #22");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/unordered_map.yaml line #28
            /* err("ReqlQueryLogicError","The streams given as arguments are not ordered by given ordering.") */
            Err expected_ = err("ReqlQueryLogicError", "The streams given as arguments are not ordered by given ordering.");
            /* odd.order_by("num").union(even.order_by("num"), interleave=r.desc("num")) */
            logger.info("About to run line #28: odd.orderBy('num').union(even.orderBy('num')).optArg('interleave', r.desc('num'))");
            Object obtained = runOrCatch(odd.orderBy("num").union(even.orderBy("num")).optArg("interleave", r.desc("num")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #28");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/unordered_map.yaml line #34
            /* [{"id":1, "num":1}, {"id":2, "num":2}, {"id":3, "num":3}, {"id":4, "num":4}, {"id":5, "num":5}, {"id":6, "num":6}] */
            List expected_ = r.array(r.hashMap("id", 1L).with("num", 1L), r.hashMap("id", 2L).with("num", 2L), r.hashMap("id", 3L).with("num", 3L), r.hashMap("id", 4L).with("num", 4L), r.hashMap("id", 5L).with("num", 5L), r.hashMap("id", 6L).with("num", 6L));
            /* odd.order_by("num").union(even.order_by("num"), interleave=lambda x: x["num"]) */
            logger.info("About to run line #34: odd.orderBy('num').union(even.orderBy('num')).optArg('interleave', x -> x.bracket('num'))");
            Object obtained = runOrCatch(odd.orderBy("num").union(even.orderBy("num")).optArg("interleave", x -> x.bracket("num")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #34");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/unordered_map.yaml line #40
            /* [{"id": 7, "num": 1}, {"id": 2, "num": 2}, {"id": 9, "num": 2}, {"id": 8, "num": 3}, {"id": 4, "num": 4}, {"id": 6, "num": 6}] */
            List expected_ = r.array(r.hashMap("id", 7L).with("num", 1L), r.hashMap("id", 2L).with("num", 2L), r.hashMap("id", 9L).with("num", 2L), r.hashMap("id", 8L).with("num", 3L), r.hashMap("id", 4L).with("num", 4L), r.hashMap("id", 6L).with("num", 6L));
            /* odd2.order_by("num", r.desc("id")).union(even.order_by("num", r.desc("id")), interleave=[lambda x: x["num"], lambda x: x["id"]]) */
            logger.info("About to run line #40: odd2.orderBy('num', r.desc('id')).union(even.orderBy('num', r.desc('id'))).optArg('interleave', r.array(x -> x.bracket('num'), x -> x.bracket('id')))");
            Object obtained = runOrCatch(odd2.orderBy("num", r.desc("id")).union(even.orderBy("num", r.desc("id"))).optArg("interleave", r.array(x -> x.bracket("num"), x -> x.bracket("id"))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #40");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/unordered_map.yaml line #46
            /* err("ReqlServerCompileError", "DESC may only be used as an argument to ORDER_BY or UNION.") */
            Err expected_ = err("ReqlServerCompileError", "DESC may only be used as an argument to ORDER_BY or UNION.");
            /* odd.order_by("num").union(even.order_by("num"), interleave=lambda x: r.desc(x["num"])) */
            logger.info("About to run line #46: odd.orderBy('num').union(even.orderBy('num')).optArg('interleave', x -> r.desc(x.bracket('num')))");
            Object obtained = runOrCatch(odd.orderBy("num").union(even.orderBy("num")).optArg("interleave", x -> r.desc(x.bracket("num"))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #46");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/unordered_map.yaml line #50
            /* [{"id":6, "num":6}, {"id":5, "num":5}, {"id":4, "num":4}, {"id":3, "num":3}, {"id":2, "num":2}, {"id":1, "num":1}] */
            List expected_ = r.array(r.hashMap("id", 6L).with("num", 6L), r.hashMap("id", 5L).with("num", 5L), r.hashMap("id", 4L).with("num", 4L), r.hashMap("id", 3L).with("num", 3L), r.hashMap("id", 2L).with("num", 2L), r.hashMap("id", 1L).with("num", 1L));
            /* odd.order_by(r.desc("num")).union(even.order_by(r.desc("num")), interleave= [r.desc(lambda x: x["num"])]) */
            logger.info("About to run line #50: odd.orderBy(r.desc('num')).union(even.orderBy(r.desc('num'))).optArg('interleave', r.array(r.desc(x -> x.bracket('num'))))");
            Object obtained = runOrCatch(odd.orderBy(r.desc("num")).union(even.orderBy(r.desc("num"))).optArg("interleave", r.array(r.desc(x -> x.bracket("num")))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #50");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/unordered_map.yaml line #54
            /* [{"id":1, "num":1}, {"id":7, "num":1}, {"id":2, "num":2}, {"id":9, "num":2}, {"id":3, "num":3}, {"id":8, "num":3}, {"id":4, "num":4}, {"id":5, "num":5}, {"id":6, "num":6}, ] */
            List expected_ = r.array(r.hashMap("id", 1L).with("num", 1L), r.hashMap("id", 7L).with("num", 1L), r.hashMap("id", 2L).with("num", 2L), r.hashMap("id", 9L).with("num", 2L), r.hashMap("id", 3L).with("num", 3L), r.hashMap("id", 8L).with("num", 3L), r.hashMap("id", 4L).with("num", 4L), r.hashMap("id", 5L).with("num", 5L), r.hashMap("id", 6L).with("num", 6L));
            /* odd.order_by("num", "id").union(even.order_by("num", "id"), odd2.order_by("num", "id"), interleave= ["num", "id"]) */
            logger.info("About to run line #54: odd.orderBy('num', 'id').union(even.orderBy('num', 'id'), odd2.orderBy('num', 'id')).optArg('interleave', r.array('num', 'id'))");
            Object obtained = runOrCatch(odd.orderBy("num", "id").union(even.orderBy("num", "id"), odd2.orderBy("num", "id")).optArg("interleave", r.array("num", "id")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #54");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #54:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/unordered_map.yaml line #58
            /* err("ReqlQueryLogicError","The streams given as arguments are not ordered by given ordering.") */
            Err expected_ = err("ReqlQueryLogicError", "The streams given as arguments are not ordered by given ordering.");
            /* odd.order_by("num", "id").union(even.order_by("num", "id"), odd2.order_by(r.desc("num"), "id"), interleave= ["num", "id"]) */
            logger.info("About to run line #58: odd.orderBy('num', 'id').union(even.orderBy('num', 'id'), odd2.orderBy(r.desc('num'), 'id')).optArg('interleave', r.array('num', 'id'))");
            Object obtained = runOrCatch(odd.orderBy("num", "id").union(even.orderBy("num", "id"), odd2.orderBy(r.desc("num"), "id")).optArg("interleave", r.array("num", "id")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #58");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #58:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
