// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class ChangefeedsTable {
    // Test changefeeds on a table
    Logger logger = LoggerFactory.getLogger(ChangefeedsTable.class);
    public static final RethinkDB r = RethinkDB.r;
    public static final Table tbl = r.db("test").table("tbl");

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
        try {
            r.db("test").tableCreate("tbl").run(conn);
            r.db("test").table(tbl).wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.db("test").tableDrop("tbl").run(conn);
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Matches Python's str() function, which we use.
    // TODO: We might want to handle this in a visit_Call in convert_tests.py instead.
    private static String str(long i) {
        return String.valueOf(i);
    }

    // A hack to concatenate two List<Long>s -- see is_array_add in convert_tests.py.
    private static List<Long> concatLong(List<Long> x, List<Long> y) {
        List<Long> ret = new ArrayList<Long>(x);
        ret.addAll(y);
        return ret;
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        // changefeeds/table.yaml line #9
        // all = tbl.changes()
        logger.info("Possibly executing: Changes all = (Changes) (tbl.changes());");
        Object all = maybeRun((Changes) (tbl.changes()), conn);

        {
            // changefeeds/table.yaml line #15
            /* partial({'errors':0, 'inserted':2}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("inserted", 2L));
            /* tbl.insert([{'id':1}, {'id':2}]) */
            logger.info("About to run line #15: tbl.insert(r.array(r.hashMap('id', 1L), r.hashMap('id', 2L)))");
            Object obtained = runOrCatch(tbl.insert(r.array(r.hashMap("id", 1L), r.hashMap("id", 2L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #15");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #17
            /* bag([{'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}]) */
            Bag expected_ = bag(r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("id", 1L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 2L))));
            /* fetch(all, 2) */
            logger.info("About to run line #17: fetch(all, 2L)");
            Object obtained = runOrCatch(fetch(all, 2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #17");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #22
            /* partial({'errors':0, 'replaced':1}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("replaced", 1L));
            /* tbl.get(1).update({'version':1}) */
            logger.info("About to run line #22: tbl.get(1L).update(r.hashMap('version', 1L))");
            Object obtained = runOrCatch(tbl.get(1L).update(r.hashMap("version", 1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #22");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #24
            /* [{'old_val':{'id':1}, 'new_val':{'id':1, 'version':1}}] */
            List expected_ = r.array(r.hashMap("old_val", r.hashMap("id", 1L)).with("new_val", r.hashMap("id", 1L).with("version", 1L)));
            /* fetch(all, 1) */
            logger.info("About to run line #24: fetch(all, 1L)");
            Object obtained = runOrCatch(fetch(all, 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #24");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #29
            /* partial({'errors':0, 'deleted':1}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("deleted", 1L));
            /* tbl.get(1).delete() */
            logger.info("About to run line #29: tbl.get(1L).delete()");
            Object obtained = runOrCatch(tbl.get(1L).delete(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #29");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #31
            /* [{'old_val':{'id':1, 'version':1}, 'new_val':null}] */
            List expected_ = r.array(r.hashMap("old_val", r.hashMap("id", 1L).with("version", 1L)).with("new_val", null));
            /* fetch(all, 1) */
            logger.info("About to run line #31: fetch(all, 1L)");
            Object obtained = runOrCatch(fetch(all, 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #31");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // changefeeds/table.yaml line #36
        // pluck = tbl.changes().pluck({'new_val':['version']})
        logger.info("Possibly executing: Pluck pluck = (Pluck) (tbl.changes().pluck(r.hashMap('new_val', r.array('version'))));");
        Object pluck = maybeRun((Pluck) (tbl.changes().pluck(r.hashMap("new_val", r.array("version")))), conn);

        {
            // changefeeds/table.yaml line #37
            /* partial({'errors':0, 'inserted':1}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("inserted", 1L));
            /* tbl.insert([{'id':5, 'version':5}]) */
            logger.info("About to run line #37: tbl.insert(r.array(r.hashMap('id', 5L).with('version', 5L)))");
            Object obtained = runOrCatch(tbl.insert(r.array(r.hashMap("id", 5L).with("version", 5L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #37");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #39
            /* [{'new_val':{'version':5}}] */
            List expected_ = r.array(r.hashMap("new_val", r.hashMap("version", 5L)));
            /* fetch(pluck, 1) */
            logger.info("About to run line #39: fetch(pluck, 1L)");
            Object obtained = runOrCatch(fetch(pluck, 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #39");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #44
            /* err('ReqlQueryLogicError', "Cannot call a terminal (`reduce`, `count`, etc.) on an infinite stream (such as a changefeed).") */
            Err expected_ = err("ReqlQueryLogicError", "Cannot call a terminal (`reduce`, `count`, etc.) on an infinite stream (such as a changefeed).");
            /* tbl.changes().order_by('id') */
            logger.info("About to run line #44: tbl.changes().orderBy('id')");
            Object obtained = runOrCatch(tbl.changes().orderBy("id"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #44");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // changefeeds/table.yaml line #59
        // overflow = tbl.changes()
        logger.info("Possibly executing: Changes overflow = (Changes) (tbl.changes());");
        Object overflow = maybeRun((Changes) (tbl.changes()), conn, new OptArgs()
                                          .with("changefeed_queue_size", 100L)
              );

        {
            // changefeeds/table.yaml line #64
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* tbl.insert(r.range(200).map(lambda x: {})) */
            logger.info("About to run line #64: tbl.insert(r.range(200L).map(x -> r.hashMap()))");
            Object obtained = runOrCatch(tbl.insert(r.range(200L).map(x -> r.hashMap())),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #64");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #64:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #66
            /* partial([{'error': regex('Changefeed cache over array size limit, skipped \d+ elements.')}]) */
            Partial expected_ = partial(r.array(r.hashMap("error", regex("Changefeed cache over array size limit, skipped \\d+ elements."))));
            /* fetch(overflow, 90) */
            logger.info("About to run line #66: fetch(overflow, 90L)");
            Object obtained = runOrCatch(fetch(overflow, 90L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #66");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #66:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // changefeeds/table.yaml line #71
        // vtbl = r.db('rethinkdb').table('_debug_scratch')
        logger.info("Possibly executing: Table vtbl = (Table) (r.db('rethinkdb').table('_debug_scratch'));");
        Table vtbl = (Table) (r.db("rethinkdb").table("_debug_scratch"));

        // changefeeds/table.yaml line #72
        // allVirtual = vtbl.changes()
        logger.info("Possibly executing: Changes allVirtual = (Changes) (vtbl.changes());");
        Object allVirtual = maybeRun((Changes) (vtbl.changes()), conn);

        {
            // changefeeds/table.yaml line #76
            /* partial({'errors':0, 'inserted':2}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("inserted", 2L));
            /* vtbl.insert([{'id':1}, {'id':2}]) */
            logger.info("About to run line #76: vtbl.insert(r.array(r.hashMap('id', 1L), r.hashMap('id', 2L)))");
            Object obtained = runOrCatch(vtbl.insert(r.array(r.hashMap("id", 1L), r.hashMap("id", 2L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #76");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #76:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #78
            /* bag([{'old_val':null, 'new_val':{'id':1}}, {'old_val':null, 'new_val':{'id':2}}]) */
            Bag expected_ = bag(r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("id", 1L)), r.hashMap("old_val", null).with("new_val", r.hashMap("id", 2L))));
            /* fetch(allVirtual, 2) */
            logger.info("About to run line #78: fetch(allVirtual, 2L)");
            Object obtained = runOrCatch(fetch(allVirtual, 2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #78");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #78:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #83
            /* partial({'errors':0, 'replaced':1}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("replaced", 1L));
            /* vtbl.get(1).update({'version':1}) */
            logger.info("About to run line #83: vtbl.get(1L).update(r.hashMap('version', 1L))");
            Object obtained = runOrCatch(vtbl.get(1L).update(r.hashMap("version", 1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #83");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #83:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #85
            /* [{'old_val':{'id':1}, 'new_val':{'id':1, 'version':1}}] */
            List expected_ = r.array(r.hashMap("old_val", r.hashMap("id", 1L)).with("new_val", r.hashMap("id", 1L).with("version", 1L)));
            /* fetch(allVirtual, 1) */
            logger.info("About to run line #85: fetch(allVirtual, 1L)");
            Object obtained = runOrCatch(fetch(allVirtual, 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #85");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #85:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #90
            /* partial({'errors':0, 'deleted':1}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("deleted", 1L));
            /* vtbl.get(1).delete() */
            logger.info("About to run line #90: vtbl.get(1L).delete()");
            Object obtained = runOrCatch(vtbl.get(1L).delete(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #90");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #90:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #92
            /* [{'old_val':{'id':1, 'version':1}, 'new_val':null}] */
            List expected_ = r.array(r.hashMap("old_val", r.hashMap("id", 1L).with("version", 1L)).with("new_val", null));
            /* fetch(allVirtual, 1) */
            logger.info("About to run line #92: fetch(allVirtual, 1L)");
            Object obtained = runOrCatch(fetch(allVirtual, 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #92");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #92:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // changefeeds/table.yaml line #97
        // vpluck = vtbl.changes().pluck({'new_val':['version']})
        logger.info("Possibly executing: Pluck vpluck = (Pluck) (vtbl.changes().pluck(r.hashMap('new_val', r.array('version'))));");
        Object vpluck = maybeRun((Pluck) (vtbl.changes().pluck(r.hashMap("new_val", r.array("version")))), conn);

        {
            // changefeeds/table.yaml line #98
            /* partial({'errors':0, 'inserted':1}) */
            Partial expected_ = partial(r.hashMap("errors", 0L).with("inserted", 1L));
            /* vtbl.insert([{'id':5, 'version':5}]) */
            logger.info("About to run line #98: vtbl.insert(r.array(r.hashMap('id', 5L).with('version', 5L)))");
            Object obtained = runOrCatch(vtbl.insert(r.array(r.hashMap("id", 5L).with("version", 5L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #98");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #98:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // changefeeds/table.yaml line #100
            /* [{'new_val':{'version':5}}] */
            List expected_ = r.array(r.hashMap("new_val", r.hashMap("version", 5L)));
            /* fetch(vpluck, 1) */
            logger.info("About to run line #100: fetch(vpluck, 1L)");
            Object obtained = runOrCatch(fetch(vpluck, 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #100");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #100:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
