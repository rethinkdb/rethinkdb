// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class MetaTable {
    // Tests meta queries for creating and deleting tables
    Logger logger = LoggerFactory.getLogger(MetaTable.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        // meta/table.yaml line #4
        // db = r.db('test')
        logger.info("Possibly executing: Db db = (Db) (r.db('test'));");
        Db db = (Db) (r.db("test"));

        {
            // meta/table.yaml line #6
            /* [] */
            List expected_ = r.array();
            /* db.table_list() */
            logger.info("About to run line #6: db.tableList()");
            Object obtained = runOrCatch(db.tableList(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #6");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #9
            /* ({'type':'DB','name':'rethinkdb','id':null}) */
            Map expected_ = r.hashMap("type", "DB").with("name", "rethinkdb").with("id", null);
            /* r.db('rethinkdb').info() */
            logger.info("About to run line #9: r.db('rethinkdb').info()");
            Object obtained = runOrCatch(r.db("rethinkdb").info(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #9");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #12
            /* partial({'db':{'type':'DB','name':'rethinkdb','id':null},
'type':'TABLE','id':null,'name':'stats',
'indexes':[],'primary_key':'id'}) */
            Partial expected_ = partial(r.hashMap("db", r.hashMap("type", "DB").with("name", "rethinkdb").with("id", null)).with("type", "TABLE").with("id", null).with("name", "stats").with("indexes", r.array()).with("primary_key", "id"));
            /* r.db('rethinkdb').table('stats').info() */
            logger.info("About to run line #12: r.db('rethinkdb').table('stats').info()");
            Object obtained = runOrCatch(r.db("rethinkdb").table("stats").info(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #12");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #18
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('a') */
            logger.info("About to run line #18: db.tableCreate('a')");
            Object obtained = runOrCatch(db.tableCreate("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #18");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #21
            /* ['a'] */
            List expected_ = r.array("a");
            /* db.table_list() */
            logger.info("About to run line #21: db.tableList()");
            Object obtained = runOrCatch(db.tableList(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #21");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #24
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('b') */
            logger.info("About to run line #24: db.tableCreate('b')");
            Object obtained = runOrCatch(db.tableCreate("b"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #24");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #27
            /* bag(['a', 'b']) */
            Bag expected_ = bag(r.array("a", "b"));
            /* db.table_list() */
            logger.info("About to run line #27: db.tableList()");
            Object obtained = runOrCatch(db.tableList(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #27");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #31
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('a') */
            logger.info("About to run line #31: db.tableDrop('a')");
            Object obtained = runOrCatch(db.tableDrop("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #31");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #34
            /* ['b'] */
            List expected_ = r.array("b");
            /* db.table_list() */
            logger.info("About to run line #34: db.tableList()");
            Object obtained = runOrCatch(db.tableList(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #34");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #37
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('b') */
            logger.info("About to run line #37: db.tableDrop('b')");
            Object obtained = runOrCatch(db.tableDrop("b"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #37");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #40
            /* [] */
            List expected_ = r.array();
            /* db.table_list() */
            logger.info("About to run line #40: db.tableList()");
            Object obtained = runOrCatch(db.tableList(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #40");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #44
            /* partial({'tables_created':1,'config_changes':[partial({'new_val':partial({'durability':'soft'})})]}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L).with("config_changes", r.array(partial(r.hashMap("new_val", partial(r.hashMap("durability", "soft")))))));
            /* db.table_create('ab', durability='soft') */
            logger.info("About to run line #44: db.tableCreate('ab').optArg('durability', 'soft')");
            Object obtained = runOrCatch(db.tableCreate("ab").optArg("durability", "soft"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #44");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #49
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('ab') */
            logger.info("About to run line #49: db.tableDrop('ab')");
            Object obtained = runOrCatch(db.tableDrop("ab"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #49");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #49:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #52
            /* partial({'tables_created':1,'config_changes':[partial({'new_val':partial({'durability':'hard'})})]}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L).with("config_changes", r.array(partial(r.hashMap("new_val", partial(r.hashMap("durability", "hard")))))));
            /* db.table_create('ab', durability='hard') */
            logger.info("About to run line #52: db.tableCreate('ab').optArg('durability', 'hard')");
            Object obtained = runOrCatch(db.tableCreate("ab").optArg("durability", "hard"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #52");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #52:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #57
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('ab') */
            logger.info("About to run line #57: db.tableDrop('ab')");
            Object obtained = runOrCatch(db.tableDrop("ab"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #57");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #57:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #60
            /* err('ReqlQueryLogicError', 'Durability option `fake` unrecognized (options are "hard" and "soft").') */
            Err expected_ = err("ReqlQueryLogicError", "Durability option `fake` unrecognized (options are \"hard\" and \"soft\").");
            /* db.table_create('ab', durability='fake') */
            logger.info("About to run line #60: db.tableCreate('ab').optArg('durability', 'fake')");
            Object obtained = runOrCatch(db.tableCreate("ab").optArg("durability", "fake"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #60");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #60:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #65
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('ab', primary_key='bar', shards=2, replicas=1) */
            logger.info("About to run line #65: db.tableCreate('ab').optArg('primary_key', 'bar').optArg('shards', 2L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.tableCreate("ab").optArg("primary_key", "bar").optArg("shards", 2L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #65");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #65:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #70
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('ab') */
            logger.info("About to run line #70: db.tableDrop('ab')");
            Object obtained = runOrCatch(db.tableDrop("ab"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #70");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #70:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #73
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('ab', primary_key='bar', primary_replica_tag='default') */
            logger.info("About to run line #73: db.tableCreate('ab').optArg('primary_key', 'bar').optArg('primary_replica_tag', 'default')");
            Object obtained = runOrCatch(db.tableCreate("ab").optArg("primary_key", "bar").optArg("primary_replica_tag", "default"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #73");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #73:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #78
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('ab') */
            logger.info("About to run line #78: db.tableDrop('ab')");
            Object obtained = runOrCatch(db.tableDrop("ab"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #78");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #78:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #81
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('ab', nonvoting_replica_tags=['default']) */
            logger.info("About to run line #81: db.tableCreate('ab').optArg('nonvoting_replica_tags', r.array('default'))");
            Object obtained = runOrCatch(db.tableCreate("ab").optArg("nonvoting_replica_tags", r.array("default")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #81");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #81:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #86
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('ab') */
            logger.info("About to run line #86: db.tableDrop('ab')");
            Object obtained = runOrCatch(db.tableDrop("ab"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #86");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #86:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #90
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('a') */
            logger.info("About to run line #90: db.tableCreate('a')");
            Object obtained = runOrCatch(db.tableCreate("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #90");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #90:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #93
            /* partial({'reconfigured':1}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 1L));
            /* db.table('a').reconfigure(shards=1, replicas=1) */
            logger.info("About to run line #93: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #93");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #93:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #98
            /* partial({'reconfigured':1}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 1L));
            /* db.table('a').reconfigure(shards=1, replicas={"default":1}, nonvoting_replica_tags=['default'], primary_replica_tag='default') */
            logger.info("About to run line #98: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', 1L)).optArg('nonvoting_replica_tags', r.array('default')).optArg('primary_replica_tag', 'default')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 1L)).optArg("nonvoting_replica_tags", r.array("default")).optArg("primary_replica_tag", "default"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #98");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #98:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #103
            /* partial({'reconfigured':0}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 0L));
            /* db.table('a').reconfigure(shards=1, replicas=1, dry_run=True) */
            logger.info("About to run line #103: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', 1L).optArg('dry_run', true)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 1L).optArg("dry_run", true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #103");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #103:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #108
            /* err('ReqlOpFailedError', 'This table doesn\'t need to be repaired.', []) */
            Err expected_ = err("ReqlOpFailedError", "This table doesn't need to be repaired.", r.array());
            /* db.table('a').reconfigure(emergency_repair="unsafe_rollback") */
            logger.info("About to run line #108: db.table('a').reconfigure().optArg('emergency_repair', 'unsafe_rollback')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #108");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #108:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #113
            /* err('ReqlOpFailedError', 'This table doesn\'t need to be repaired.', []) */
            Err expected_ = err("ReqlOpFailedError", "This table doesn't need to be repaired.", r.array());
            /* db.table('a').reconfigure(emergency_repair="unsafe_rollback", dry_run=True) */
            logger.info("About to run line #113: db.table('a').reconfigure().optArg('emergency_repair', 'unsafe_rollback').optArg('dry_run', true)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback").optArg("dry_run", true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #113");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #113:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #118
            /* err('ReqlOpFailedError', 'This table doesn\'t need to be repaired.', []) */
            Err expected_ = err("ReqlOpFailedError", "This table doesn't need to be repaired.", r.array());
            /* db.table('a').reconfigure(emergency_repair="unsafe_rollback_or_erase") */
            logger.info("About to run line #118: db.table('a').reconfigure().optArg('emergency_repair', 'unsafe_rollback_or_erase')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback_or_erase"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #118");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #118:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #123
            /* partial({'reconfigured':0}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 0L));
            /* db.table('a').reconfigure(emergency_repair=None, shards=1, replicas=1, dry_run=True) */
            logger.info("About to run line #123: db.table('a').reconfigure().optArg('emergency_repair', (ReqlExpr) null).optArg('shards', 1L).optArg('replicas', 1L).optArg('dry_run', true)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("emergency_repair", (ReqlExpr) null).optArg("shards", 1L).optArg("replicas", 1L).optArg("dry_run", true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #123");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #123:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #128
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('a') */
            logger.info("About to run line #128: db.tableDrop('a')");
            Object obtained = runOrCatch(db.tableDrop("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #128");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #128:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #132
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('foo') */
            logger.info("About to run line #132: db.tableCreate('foo')");
            Object obtained = runOrCatch(db.tableCreate("foo"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #132");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #132:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #135
            /* err('ReqlOpFailedError', 'Table `test.foo` already exists.', [0]) */
            Err expected_ = err("ReqlOpFailedError", "Table `test.foo` already exists.", r.array(0L));
            /* db.table_create('foo') */
            logger.info("About to run line #135: db.tableCreate('foo')");
            Object obtained = runOrCatch(db.tableCreate("foo"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #135");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #135:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #138
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('foo') */
            logger.info("About to run line #138: db.tableDrop('foo')");
            Object obtained = runOrCatch(db.tableDrop("foo"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #138");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #138:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #141
            /* err('ReqlOpFailedError', 'Table `test.foo` does not exist.', [0]) */
            Err expected_ = err("ReqlOpFailedError", "Table `test.foo` does not exist.", r.array(0L));
            /* db.table_drop('foo') */
            logger.info("About to run line #141: db.tableDrop('foo')");
            Object obtained = runOrCatch(db.tableDrop("foo"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #141");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #141:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #151
            /* err('ReqlCompileError', "Unrecognized optional argument `foo`.", []) */
            Err expected_ = err("ReqlCompileError", "Unrecognized optional argument `foo`.", r.array());
            /* db.table_create('nonsense', foo='bar') */
            logger.info("About to run line #151: db.tableCreate('nonsense').optArg('foo', 'bar')");
            Object obtained = runOrCatch(db.tableCreate("nonsense").optArg("foo", "bar"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #151");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #151:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #158
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create('a') */
            logger.info("About to run line #158: db.tableCreate('a')");
            Object obtained = runOrCatch(db.tableCreate("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #158");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #158:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #161
            /* err('ReqlQueryLogicError', 'Every table must have at least one shard.', []) */
            Err expected_ = err("ReqlQueryLogicError", "Every table must have at least one shard.", r.array());
            /* db.table('a').reconfigure(shards=0, replicas=1) */
            logger.info("About to run line #161: db.table('a').reconfigure().optArg('shards', 0L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 0L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #161");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #161:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #166
            /* err('ReqlOpFailedError', 'Can\'t use server tag `foo` for primary replicas because you specified no replicas in server tag `foo`.', []) */
            Err expected_ = err("ReqlOpFailedError", "Can't use server tag `foo` for primary replicas because you specified no replicas in server tag `foo`.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas={"default":1}, primary_replica_tag="foo") */
            logger.info("About to run line #166: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', 1L)).optArg('primary_replica_tag', 'foo')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 1L)).optArg("primary_replica_tag", "foo"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #166");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #166:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #171
            /* err('ReqlOpFailedError', 'You specified that the replicas in server tag `foo` should be non-voting, but you didn\'t specify a number of replicas in server tag `foo`.', []) */
            Err expected_ = err("ReqlOpFailedError", "You specified that the replicas in server tag `foo` should be non-voting, but you didn't specify a number of replicas in server tag `foo`.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas={"default":1}, primary_replica_tag="default", nonvoting_replica_tags=["foo"]) */
            logger.info("About to run line #171: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', 1L)).optArg('primary_replica_tag', 'default').optArg('nonvoting_replica_tags', r.array('foo'))");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 1L)).optArg("primary_replica_tag", "default").optArg("nonvoting_replica_tags", r.array("foo")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #171");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #171:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #176
            /* err('ReqlOpFailedError', 'You must set `replicas` to at least one. `replicas` includes the primary replica; if there are zero replicas, there is nowhere to put the data.', []) */
            Err expected_ = err("ReqlOpFailedError", "You must set `replicas` to at least one. `replicas` includes the primary replica; if there are zero replicas, there is nowhere to put the data.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas={"foo":0}, primary_replica_tag="foo") */
            logger.info("About to run line #176: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('foo', 0L)).optArg('primary_replica_tag', 'foo')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("foo", 0L)).optArg("primary_replica_tag", "foo"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #176");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #176:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #181
            /* err('ReqlQueryLogicError', '`primary_replica_tag` must be specified when `replicas` is an OBJECT.', []) */
            Err expected_ = err("ReqlQueryLogicError", "`primary_replica_tag` must be specified when `replicas` is an OBJECT.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas={"default":0}) */
            logger.info("About to run line #181: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', 0L))");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 0L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #181");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #181:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #186
            /* err('ReqlQueryLogicError', 'Can\'t have a negative number of replicas', []) */
            Err expected_ = err("ReqlQueryLogicError", "Can't have a negative number of replicas", r.array());
            /* db.table('a').reconfigure(shards=1, replicas={"default":-3}, primary_replica_tag='default') */
            logger.info("About to run line #186: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', -3L)).optArg('primary_replica_tag', 'default')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", -3L)).optArg("primary_replica_tag", "default"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #186");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #186:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #191
            /* err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `primary_replica_tag` is specified.', []) */
            Err expected_ = err("ReqlQueryLogicError", "`replicas` must be an OBJECT if `primary_replica_tag` is specified.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas=3, primary_replica_tag='foo') */
            logger.info("About to run line #191: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', 3L).optArg('primary_replica_tag', 'foo')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 3L).optArg("primary_replica_tag", "foo"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #191");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #191:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #196
            /* err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `nonvoting_replica_tags` is specified.', []) */
            Err expected_ = err("ReqlQueryLogicError", "`replicas` must be an OBJECT if `nonvoting_replica_tags` is specified.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas=3, nonvoting_replica_tags=['foo']) */
            logger.info("About to run line #196: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', 3L).optArg('nonvoting_replica_tags', r.array('foo'))");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 3L).optArg("nonvoting_replica_tags", r.array("foo")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #196");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #196:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #201
            /* err('ReqlQueryLogicError', 'Can\'t emergency repair an entire database at once; instead you should run `reconfigure()` on each table individually.') */
            Err expected_ = err("ReqlQueryLogicError", "Can't emergency repair an entire database at once; instead you should run `reconfigure()` on each table individually.");
            /* db.reconfigure(emergency_repair="unsafe_rollback") */
            logger.info("About to run line #201: db.reconfigure().optArg('emergency_repair', 'unsafe_rollback')");
            Object obtained = runOrCatch(db.reconfigure().optArg("emergency_repair", "unsafe_rollback"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #201");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #201:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #206
            /* err('ReqlQueryLogicError', '`emergency_repair` should be "unsafe_rollback" or "unsafe_rollback_or_erase"', []) */
            Err expected_ = err("ReqlQueryLogicError", "`emergency_repair` should be \"unsafe_rollback\" or \"unsafe_rollback_or_erase\"", r.array());
            /* db.table('a').reconfigure(emergency_repair="foo") */
            logger.info("About to run line #206: db.table('a').reconfigure().optArg('emergency_repair', 'foo')");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("emergency_repair", "foo"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #206");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #206:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #211
            /* err('ReqlQueryLogicError', 'In emergency repair mode, you can\'t specify shards, replicas, etc.') */
            Err expected_ = err("ReqlQueryLogicError", "In emergency repair mode, you can't specify shards, replicas, etc.");
            /* db.table('a').reconfigure(emergency_repair="unsafe_rollback", shards=1, replicas=1) */
            logger.info("About to run line #211: db.table('a').reconfigure().optArg('emergency_repair', 'unsafe_rollback').optArg('shards', 1L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("emergency_repair", "unsafe_rollback").optArg("shards", 1L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #211");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #211:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #217
            /* partial({'reconfigured':1}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 1L));
            /* db.table('a').reconfigure(shards=2, replicas=1) */
            logger.info("About to run line #217: db.table('a').reconfigure().optArg('shards', 2L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 2L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #217");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #217:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #222
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* db.table('a').wait() */
            logger.info("About to run line #222: db.table('a').wait_()");
            Object obtained = runOrCatch(db.table("a").wait_(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #222");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #222:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #225
            /* partial({"inserted":4}) */
            Partial expected_ = partial(r.hashMap("inserted", 4L));
            /* db.table('a').insert([{"id":1}, {"id":2}, {"id":3}, {"id":4}]) */
            logger.info("About to run line #225: db.table('a').insert(r.array(r.hashMap('id', 1L), r.hashMap('id', 2L), r.hashMap('id', 3L), r.hashMap('id', 4L)))");
            Object obtained = runOrCatch(db.table("a").insert(r.array(r.hashMap("id", 1L), r.hashMap("id", 2L), r.hashMap("id", 3L), r.hashMap("id", 4L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #225");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #225:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #230
            /* partial({'reconfigured':1}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 1L));
            /* db.table('a').reconfigure(shards=2, replicas=1) */
            logger.info("About to run line #230: db.table('a').reconfigure().optArg('shards', 2L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 2L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #230");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #230:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #235
            /* err('ReqlOpFailedError', 'Can\'t put 2 replicas on servers with the tag `default` because there are only 1 servers with the tag `default`. It\'s impossible to have more replicas of the data than there are servers.', []) */
            Err expected_ = err("ReqlOpFailedError", "Can't put 2 replicas on servers with the tag `default` because there are only 1 servers with the tag `default`. It's impossible to have more replicas of the data than there are servers.", r.array());
            /* db.table('a').reconfigure(shards=1, replicas=2) */
            logger.info("About to run line #235: db.table('a').reconfigure().optArg('shards', 1L).optArg('replicas', 2L)");
            Object obtained = runOrCatch(db.table("a").reconfigure().optArg("shards", 1L).optArg("replicas", 2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #235");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #235:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #241
            /* partial({'ready':1}) */
            Partial expected_ = partial(r.hashMap("ready", 1L));
            /* db.table('a').wait() */
            logger.info("About to run line #241: db.table('a').wait_()");
            Object obtained = runOrCatch(db.table("a").wait_(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #241");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #241:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #243
            /* partial({'rebalanced':1}) */
            Partial expected_ = partial(r.hashMap("rebalanced", 1L));
            /* db.table('a').rebalance() */
            logger.info("About to run line #243: db.table('a').rebalance()");
            Object obtained = runOrCatch(db.table("a").rebalance(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #243");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #243:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #246
            /* partial({'ready':1}) */
            Partial expected_ = partial(r.hashMap("ready", 1L));
            /* db.wait() */
            logger.info("About to run line #246: db.wait_()");
            Object obtained = runOrCatch(db.wait_(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #246");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #246:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #248
            /* partial({'rebalanced':1}) */
            Partial expected_ = partial(r.hashMap("rebalanced", 1L));
            /* db.rebalance() */
            logger.info("About to run line #248: db.rebalance()");
            Object obtained = runOrCatch(db.rebalance(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #248");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #248:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #262
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('a') */
            logger.info("About to run line #262: db.tableDrop('a')");
            Object obtained = runOrCatch(db.tableDrop("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #262");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #262:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #266
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* db.table_create('a') */
            logger.info("About to run line #266: db.tableCreate('a')");
            Object obtained = runOrCatch(db.tableCreate("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #266");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #266:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #267
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* db.table_create('b') */
            logger.info("About to run line #267: db.tableCreate('b')");
            Object obtained = runOrCatch(db.tableCreate("b"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #267");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #267:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #268
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* db.table_create('c') */
            logger.info("About to run line #268: db.tableCreate('c')");
            Object obtained = runOrCatch(db.tableCreate("c"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #268");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #268:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #270
            /* err('ReqlQueryLogicError', 'Every table must have at least one shard.', []) */
            Err expected_ = err("ReqlQueryLogicError", "Every table must have at least one shard.", r.array());
            /* db.reconfigure(shards=0, replicas=1) */
            logger.info("About to run line #270: db.reconfigure().optArg('shards', 0L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.reconfigure().optArg("shards", 0L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #270");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #270:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #275
            /* err('ReqlQueryLogicError', '`primary_replica_tag` must be specified when `replicas` is an OBJECT.', []) */
            Err expected_ = err("ReqlQueryLogicError", "`primary_replica_tag` must be specified when `replicas` is an OBJECT.", r.array());
            /* db.reconfigure(shards=1, replicas={"default":0}) */
            logger.info("About to run line #275: db.reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', 0L))");
            Object obtained = runOrCatch(db.reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", 0L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #275");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #275:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #280
            /* err('ReqlQueryLogicError', 'Can\'t have a negative number of replicas', []) */
            Err expected_ = err("ReqlQueryLogicError", "Can't have a negative number of replicas", r.array());
            /* db.reconfigure(shards=1, replicas={"default":-3}, primary_replica_tag='default') */
            logger.info("About to run line #280: db.reconfigure().optArg('shards', 1L).optArg('replicas', r.hashMap('default', -3L)).optArg('primary_replica_tag', 'default')");
            Object obtained = runOrCatch(db.reconfigure().optArg("shards", 1L).optArg("replicas", r.hashMap("default", -3L)).optArg("primary_replica_tag", "default"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #280");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #280:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #285
            /* err('ReqlQueryLogicError', '`replicas` must be an OBJECT if `primary_replica_tag` is specified.', []) */
            Err expected_ = err("ReqlQueryLogicError", "`replicas` must be an OBJECT if `primary_replica_tag` is specified.", r.array());
            /* db.reconfigure(shards=1, replicas=3, primary_replica_tag='foo') */
            logger.info("About to run line #285: db.reconfigure().optArg('shards', 1L).optArg('replicas', 3L).optArg('primary_replica_tag', 'foo')");
            Object obtained = runOrCatch(db.reconfigure().optArg("shards", 1L).optArg("replicas", 3L).optArg("primary_replica_tag", "foo"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #285");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #285:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #290
            /* partial({'reconfigured':3}) */
            Partial expected_ = partial(r.hashMap("reconfigured", 3L));
            /* db.reconfigure(shards=2, replicas=1) */
            logger.info("About to run line #290: db.reconfigure().optArg('shards', 2L).optArg('replicas', 1L)");
            Object obtained = runOrCatch(db.reconfigure().optArg("shards", 2L).optArg("replicas", 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #290");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #290:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #295
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('a') */
            logger.info("About to run line #295: db.tableDrop('a')");
            Object obtained = runOrCatch(db.tableDrop("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #295");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #295:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #297
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('b') */
            logger.info("About to run line #297: db.tableDrop('b')");
            Object obtained = runOrCatch(db.tableDrop("b"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #297");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #297:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #299
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('c') */
            logger.info("About to run line #299: db.tableDrop('c')");
            Object obtained = runOrCatch(db.tableDrop("c"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #299");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #299:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #303
            /* partial({'dbs_created':1}) */
            Partial expected_ = partial(r.hashMap("dbs_created", 1L));
            /* r.db_create("test2") */
            logger.info("About to run line #303: r.dbCreate('test2')");
            Object obtained = runOrCatch(r.dbCreate("test2"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #303");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #303:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // meta/table.yaml line #306
        // db2 = r.db("test2")
        logger.info("Possibly executing: Db db2 = (Db) (r.db('test2'));");
        Db db2 = (Db) (r.db("test2"));

        {
            // meta/table.yaml line #308
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create("testA") */
            logger.info("About to run line #308: db.tableCreate('testA')");
            Object obtained = runOrCatch(db.tableCreate("testA"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #308");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #308:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #310
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db.table_create("testB") */
            logger.info("About to run line #310: db.tableCreate('testB')");
            Object obtained = runOrCatch(db.tableCreate("testB"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #310");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #310:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #312
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* db2.table_create("test2B") */
            logger.info("About to run line #312: db2.tableCreate('test2B')");
            Object obtained = runOrCatch(db2.tableCreate("test2B"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #312");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #312:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #315
            /* {'db':'test','name':'testA'} */
            Map expected_ = r.hashMap("db", "test").with("name", "testA");
            /* r.table('testA').config().pluck('db','name') */
            logger.info("About to run line #315: r.table('testA').config().pluck('db', 'name')");
            Object obtained = runOrCatch(r.table("testA").config().pluck("db", "name"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #315");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #315:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #318
            /* err('ReqlOpFailedError', 'Table `test.doesntexist` does not exist.', []) */
            Err expected_ = err("ReqlOpFailedError", "Table `test.doesntexist` does not exist.", r.array());
            /* r.table('doesntexist').config() */
            logger.info("About to run line #318: r.table('doesntexist').config()");
            Object obtained = runOrCatch(r.table("doesntexist").config(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #318");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #318:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #321
            /* err('ReqlOpFailedError', 'Table `test.test2B` does not exist.', []) */
            Err expected_ = err("ReqlOpFailedError", "Table `test.test2B` does not exist.", r.array());
            /* r.table('test2B').config() */
            logger.info("About to run line #321: r.table('test2B').config()");
            Object obtained = runOrCatch(r.table("test2B").config(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #321");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #321:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #324
            /* True */
            Boolean expected_ = true;
            /* r.db('rethinkdb').table('table_config').filter({'name':'testA'}).nth(0).eq(r.table('testA').config()) */
            logger.info("About to run line #324: r.db('rethinkdb').table('table_config').filter(r.hashMap('name', 'testA')).nth(0L).eq(r.table('testA').config())");
            Object obtained = runOrCatch(r.db("rethinkdb").table("table_config").filter(r.hashMap("name", "testA")).nth(0L).eq(r.table("testA").config()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #324");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #324:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #327
            /* True */
            Boolean expected_ = true;
            /* r.db('rethinkdb').table('table_status').filter({'name':'testA'}).nth(0).eq(r.table('testA').status()) */
            logger.info("About to run line #327: r.db('rethinkdb').table('table_status').filter(r.hashMap('name', 'testA')).nth(0L).eq(r.table('testA').status())");
            Object obtained = runOrCatch(r.db("rethinkdb").table("table_status").filter(r.hashMap("name", "testA")).nth(0L).eq(r.table("testA").status()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #327");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #327:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #330
            /* uuid() */
            UUIDMatch expected_ = uuid();
            /* r.db('rethinkdb').table('table_config', identifier_format='uuid').nth(0)["db"] */
            logger.info("About to run line #330: r.db('rethinkdb').table('table_config').optArg('identifier_format', 'uuid').nth(0L).bracket('db')");
            Object obtained = runOrCatch(r.db("rethinkdb").table("table_config").optArg("identifier_format", "uuid").nth(0L).bracket("db"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #330");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #330:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #335
            /* 0 */
            Long expected_ = 0L;
            /* r.table('testA', identifier_format='uuid').count() */
            logger.info("About to run line #335: r.table('testA').optArg('identifier_format', 'uuid').count()");
            Object obtained = runOrCatch(r.table("testA").optArg("identifier_format", "uuid").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #335");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #335:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #348
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('testA') */
            logger.info("About to run line #348: db.tableDrop('testA')");
            Object obtained = runOrCatch(db.tableDrop("testA"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #348");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #348:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #351
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* db.table_drop('testB') */
            logger.info("About to run line #351: db.tableDrop('testB')");
            Object obtained = runOrCatch(db.tableDrop("testB"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #351");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #351:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/table.yaml line #354
            /* partial({'dbs_dropped':1,'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("dbs_dropped", 1L).with("tables_dropped", 1L));
            /* r.db_drop('test2') */
            logger.info("About to run line #354: r.dbDrop('test2')");
            Object obtained = runOrCatch(r.dbDrop("test2"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #354");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #354:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
