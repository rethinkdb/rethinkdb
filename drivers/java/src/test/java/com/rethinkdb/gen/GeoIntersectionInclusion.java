// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class GeoIntersectionInclusion {
    // Test intersects and includes semantics
    Logger logger = LoggerFactory.getLogger(GeoIntersectionInclusion.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Matches Python's str() function, which we use.
    // TODO: We might want to handle this in a visit_Call in convert_tests.py instead.
    private static String str(long i) {
        return String.valueOf(i);
    }

    // A hack to concatenate two List<Long>s -- see is_array_add in convert_tests.py.
    private static List<Long> concatLong(List<Long> x, List<Long> y) {
        List<Long> ret = new ArrayList<Long>(x);
        ret.addAll(y);
        return ret;
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        {
            // geo/intersection_inclusion.yaml line #4
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.point(1.5,1.5)) */
            logger.info("About to run line #4: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.point(1.5, 1.5))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.point(1.5, 1.5)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #4");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #6
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.point(2.5,2.5)) */
            logger.info("About to run line #6: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.point(2.5, 2.5))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.point(2.5, 2.5)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #6");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #8
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).intersects(r.point(1.5,1.5)) */
            logger.info("About to run line #8: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.point(1.5, 1.5))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.point(1.5, 1.5)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #8");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #8:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #10
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).intersects(r.point(1.05,1.05)) */
            logger.info("About to run line #10: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.point(1.05, 1.05))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.point(1.05, 1.05)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #10");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #13
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.point(2,2)) */
            logger.info("About to run line #13: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.point(2L, 2L))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.point(2L, 2L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #13");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #15
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.point(2,1.5)) */
            logger.info("About to run line #15: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.point(2L, 1.5))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.point(2L, 1.5)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #15");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #17
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.line([1.5,1.5], [2,2])) */
            logger.info("About to run line #17: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(1.5, 1.5), r.array(2L, 2L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(1.5, 1.5), r.array(2L, 2L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #17");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #19
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.line([1.5,1.5], [2,1.5])) */
            logger.info("About to run line #19: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(1.5, 1.5), r.array(2L, 1.5)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(1.5, 1.5), r.array(2L, 1.5))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #19");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #22
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).intersects(r.point(1.1,1.1)) */
            logger.info("About to run line #22: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.point(1.1, 1.1))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.point(1.1, 1.1)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #22");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #24
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).intersects(r.point(1.5,1.1)) */
            logger.info("About to run line #24: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.point(1.5, 1.1))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.point(1.5, 1.1)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #24");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #27
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.line([2,2], [3,3])) */
            logger.info("About to run line #27: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(2L, 2L), r.array(3L, 3L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(2L, 2L), r.array(3L, 3L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #27");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #29
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.line([2,1.5], [3,3])) */
            logger.info("About to run line #29: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(2L, 1.5), r.array(3L, 3L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(2L, 1.5), r.array(3L, 3L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #29");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #31
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.line([1.5,1.5], [3,3])) */
            logger.info("About to run line #31: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(1.5, 1.5), r.array(3L, 3L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.line(r.array(1.5, 1.5), r.array(3L, 3L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #31");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #33
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.polygon([1.2,1.2], [1.8,1.2], [1.8,1.8], [1.2,1.8])) */
            logger.info("About to run line #33: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.polygon(r.array(1.2, 1.2), r.array(1.8, 1.2), r.array(1.8, 1.8), r.array(1.2, 1.8)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.polygon(r.array(1.2, 1.2), r.array(1.8, 1.2), r.array(1.8, 1.8), r.array(1.2, 1.8))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #33");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #33:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #35
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.polygon([1.5,1.5], [2.5,1.5], [2.5,2.5], [1.5,2.5])) */
            logger.info("About to run line #35: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.polygon(r.array(1.5, 1.5), r.array(2.5, 1.5), r.array(2.5, 2.5), r.array(1.5, 2.5)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.polygon(r.array(1.5, 1.5), r.array(2.5, 1.5), r.array(2.5, 2.5), r.array(1.5, 2.5))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #35");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #35:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #37
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).intersects(r.polygon([1.2,1.2], [1.8,1.2], [1.8,1.8], [1.2,1.8])) */
            logger.info("About to run line #37: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.polygon(r.array(1.2, 1.2), r.array(1.8, 1.2), r.array(1.8, 1.8), r.array(1.2, 1.8)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.polygon(r.array(1.2, 1.2), r.array(1.8, 1.2), r.array(1.8, 1.8), r.array(1.2, 1.8))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #37");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #39
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).intersects(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])) */
            logger.info("About to run line #39: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).intersects(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #39");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #42
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.polygon([2,1.1], [3,1.1], [3,1.9], [2,1.9])) */
            logger.info("About to run line #42: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.polygon(r.array(2L, 1.1), r.array(3L, 1.1), r.array(3L, 1.9), r.array(2L, 1.9)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.polygon(r.array(2L, 1.1), r.array(3L, 1.1), r.array(3L, 1.9), r.array(2L, 1.9))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #42");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #42:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #44
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).intersects(r.polygon([2,2], [3,2], [3,3], [2,3])) */
            logger.info("About to run line #44: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.polygon(r.array(2L, 2L), r.array(3L, 2L), r.array(3L, 3L), r.array(2L, 3L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).intersects(r.polygon(r.array(2L, 2L), r.array(3L, 2L), r.array(3L, 3L), r.array(2L, 3L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #44");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #46
            /* false */
            Boolean expected_ = false;
            /* r.point(1,1).intersects(r.point(1.5,1.5)) */
            logger.info("About to run line #46: r.point(1L, 1L).intersects(r.point(1.5, 1.5))");
            Object obtained = runOrCatch(r.point(1L, 1L).intersects(r.point(1.5, 1.5)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #46");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #48
            /* true */
            Boolean expected_ = true;
            /* r.point(1,1).intersects(r.point(1,1)) */
            logger.info("About to run line #48: r.point(1L, 1L).intersects(r.point(1L, 1L))");
            Object obtained = runOrCatch(r.point(1L, 1L).intersects(r.point(1L, 1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #48");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #50
            /* true */
            Boolean expected_ = true;
            /* r.line([1,1], [2,1]).intersects(r.point(1,1)) */
            logger.info("About to run line #50: r.line(r.array(1L, 1L), r.array(2L, 1L)).intersects(r.point(1L, 1L))");
            Object obtained = runOrCatch(r.line(r.array(1L, 1L), r.array(2L, 1L)).intersects(r.point(1L, 1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #50");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #55
            /* true */
            Boolean expected_ = true;
            /* r.line([1,1], [1,2]).intersects(r.point(1,1.8)) */
            logger.info("About to run line #55: r.line(r.array(1L, 1L), r.array(1L, 2L)).intersects(r.point(1L, 1.8))");
            Object obtained = runOrCatch(r.line(r.array(1L, 1L), r.array(1L, 2L)).intersects(r.point(1L, 1.8)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #55");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #55:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #57
            /* true */
            Boolean expected_ = true;
            /* r.line([1,0], [2,0]).intersects(r.point(1.8,0)) */
            logger.info("About to run line #57: r.line(r.array(1L, 0L), r.array(2L, 0L)).intersects(r.point(1.8, 0L))");
            Object obtained = runOrCatch(r.line(r.array(1L, 0L), r.array(2L, 0L)).intersects(r.point(1.8, 0L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #57");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #57:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #59
            /* false */
            Boolean expected_ = false;
            /* r.line([1,1], [2,1]).intersects(r.point(1.5,1.5)) */
            logger.info("About to run line #59: r.line(r.array(1L, 1L), r.array(2L, 1L)).intersects(r.point(1.5, 1.5))");
            Object obtained = runOrCatch(r.line(r.array(1L, 1L), r.array(2L, 1L)).intersects(r.point(1.5, 1.5)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #59");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #59:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #61
            /* true */
            Boolean expected_ = true;
            /* r.line([1,1], [2,1]).intersects(r.line([2,1], [3,1])) */
            logger.info("About to run line #61: r.line(r.array(1L, 1L), r.array(2L, 1L)).intersects(r.line(r.array(2L, 1L), r.array(3L, 1L)))");
            Object obtained = runOrCatch(r.line(r.array(1L, 1L), r.array(2L, 1L)).intersects(r.line(r.array(2L, 1L), r.array(3L, 1L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #61");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #61:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #64
            /* 2 */
            Long expected_ = 2L;
            /* r.expr([r.point(1, 0), r.point(3,0), r.point(2, 0)]).intersects(r.line([0,0], [2, 0])).count() */
            logger.info("About to run line #64: r.expr(r.array(r.point(1L, 0L), r.point(3L, 0L), r.point(2L, 0L))).intersects(r.line(r.array(0L, 0L), r.array(2L, 0L))).count()");
            Object obtained = runOrCatch(r.expr(r.array(r.point(1L, 0L), r.point(3L, 0L), r.point(2L, 0L))).intersects(r.line(r.array(0L, 0L), r.array(2L, 0L))).count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #64");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #64:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #68
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.point(1.5,1.5)) */
            logger.info("About to run line #68: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.point(1.5, 1.5))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.point(1.5, 1.5)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #68");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #68:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #70
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.point(2.5,2.5)) */
            logger.info("About to run line #70: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.point(2.5, 2.5))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.point(2.5, 2.5)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #70");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #70:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #72
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).includes(r.point(1.5,1.5)) */
            logger.info("About to run line #72: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.point(1.5, 1.5))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.point(1.5, 1.5)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #72");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #72:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #74
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).includes(r.point(1.05,1.05)) */
            logger.info("About to run line #74: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.point(1.05, 1.05))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.point(1.05, 1.05)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #74");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #74:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #76
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.point(2,2)) */
            logger.info("About to run line #76: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.point(2L, 2L))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.point(2L, 2L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #76");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #76:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #78
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.point(2,1.5)) */
            logger.info("About to run line #78: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.point(2L, 1.5))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.point(2L, 1.5)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #78");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #78:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #80
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.line([1.5,1.5], [2,2])) */
            logger.info("About to run line #80: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(1.5, 1.5), r.array(2L, 2L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(1.5, 1.5), r.array(2L, 2L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #80");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #80:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #82
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.line([1.5,1.5], [2,1.5])) */
            logger.info("About to run line #82: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(1.5, 1.5), r.array(2L, 1.5)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(1.5, 1.5), r.array(2L, 1.5))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #82");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #82:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #84
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).includes(r.point(1.1,1.1)) */
            logger.info("About to run line #84: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.point(1.1, 1.1))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.point(1.1, 1.1)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #84");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #84:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #86
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).includes(r.point(1.5,1.1)) */
            logger.info("About to run line #86: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.point(1.5, 1.1))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.point(1.5, 1.1)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #86");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #86:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #88
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.line([2,2], [3,3])) */
            logger.info("About to run line #88: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(2L, 2L), r.array(3L, 3L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(2L, 2L), r.array(3L, 3L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #88");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #88:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #90
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.line([2,1.5], [2,2])) */
            logger.info("About to run line #90: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(2L, 1.5), r.array(2L, 2L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(2L, 1.5), r.array(2L, 2L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #90");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #90:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #92
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.line([2,1], [2,2])) */
            logger.info("About to run line #92: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(2L, 1L), r.array(2L, 2L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(2L, 1L), r.array(2L, 2L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #92");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #92:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #94
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.line([1.5,1.5], [3,3])) */
            logger.info("About to run line #94: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(1.5, 1.5), r.array(3L, 3L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.line(r.array(1.5, 1.5), r.array(3L, 3L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #94");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #94:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #96
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.polygon([1,1], [2,1], [2,2], [1,2])) */
            logger.info("About to run line #96: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #96");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #96:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #98
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.polygon([1.2,1.2], [1.8,1.2], [1.8,1.8], [1.2,1.8])) */
            logger.info("About to run line #98: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(1.2, 1.2), r.array(1.8, 1.2), r.array(1.8, 1.8), r.array(1.2, 1.8)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(1.2, 1.2), r.array(1.8, 1.2), r.array(1.8, 1.8), r.array(1.2, 1.8))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #98");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #98:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #100
            /* true */
            Boolean expected_ = true;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.polygon([1.5,1.5], [2,1.5], [2,2], [1.5,2])) */
            logger.info("About to run line #100: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(1.5, 1.5), r.array(2L, 1.5), r.array(2L, 2L), r.array(1.5, 2L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(1.5, 1.5), r.array(2L, 1.5), r.array(2L, 2L), r.array(1.5, 2L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #100");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #100:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #102
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.polygon([1.5,1.5], [2.5,1.5], [2.5,2.5], [1.5,2.5])) */
            logger.info("About to run line #102: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(1.5, 1.5), r.array(2.5, 1.5), r.array(2.5, 2.5), r.array(1.5, 2.5)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(1.5, 1.5), r.array(2.5, 1.5), r.array(2.5, 2.5), r.array(1.5, 2.5))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #102");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #102:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #104
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).includes(r.polygon([1.2,1.2], [1.8,1.2], [1.8,1.8], [1.2,1.8])) */
            logger.info("About to run line #104: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.polygon(r.array(1.2, 1.2), r.array(1.8, 1.2), r.array(1.8, 1.8), r.array(1.2, 1.8)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.polygon(r.array(1.2, 1.2), r.array(1.8, 1.2), r.array(1.8, 1.8), r.array(1.2, 1.8))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #104");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #104:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #106
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).polygon_sub(r.polygon([1.1,1.1], [1.9,1.1], [1.9,1.9], [1.1,1.9])).includes(r.polygon([1.1,1.1], [2,1.1], [2,2], [1.1,2])) */
            logger.info("About to run line #106: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.polygon(r.array(1.1, 1.1), r.array(2L, 1.1), r.array(2L, 2L), r.array(1.1, 2L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).polygonSub(r.polygon(r.array(1.1, 1.1), r.array(1.9, 1.1), r.array(1.9, 1.9), r.array(1.1, 1.9))).includes(r.polygon(r.array(1.1, 1.1), r.array(2L, 1.1), r.array(2L, 2L), r.array(1.1, 2L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #106");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #106:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #108
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.polygon([2,1.1], [3,1.1], [3,1.9], [2,1.9])) */
            logger.info("About to run line #108: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(2L, 1.1), r.array(3L, 1.1), r.array(3L, 1.9), r.array(2L, 1.9)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(2L, 1.1), r.array(3L, 1.1), r.array(3L, 1.9), r.array(2L, 1.9))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #108");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #108:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #110
            /* false */
            Boolean expected_ = false;
            /* r.polygon([1,1], [2,1], [2,2], [1,2]).includes(r.polygon([2,2], [3,2], [3,3], [2,3])) */
            logger.info("About to run line #110: r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(2L, 2L), r.array(3L, 2L), r.array(3L, 3L), r.array(2L, 3L)))");
            Object obtained = runOrCatch(r.polygon(r.array(1L, 1L), r.array(2L, 1L), r.array(2L, 2L), r.array(1L, 2L)).includes(r.polygon(r.array(2L, 2L), r.array(3L, 2L), r.array(3L, 3L), r.array(2L, 3L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #110");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #110:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #113
            /* 1 */
            Long expected_ = 1L;
            /* r.expr([r.polygon([0,0], [1,1], [1,0]), r.polygon([0,1], [1,2], [1,1])]).includes(r.point(0,0)).count() */
            logger.info("About to run line #113: r.expr(r.array(r.polygon(r.array(0L, 0L), r.array(1L, 1L), r.array(1L, 0L)), r.polygon(r.array(0L, 1L), r.array(1L, 2L), r.array(1L, 1L)))).includes(r.point(0L, 0L)).count()");
            Object obtained = runOrCatch(r.expr(r.array(r.polygon(r.array(0L, 0L), r.array(1L, 1L), r.array(1L, 0L)), r.polygon(r.array(0L, 1L), r.array(1L, 2L), r.array(1L, 1L)))).includes(r.point(0L, 0L)).count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #113");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #113:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #116
            /* err('ReqlQueryLogicError', 'Expected geometry of type `Polygon` but found `Point`.') */
            Err expected_ = err("ReqlQueryLogicError", "Expected geometry of type `Polygon` but found `Point`.");
            /* r.point(0,0).includes(r.point(0,0)) */
            logger.info("About to run line #116: r.point(0L, 0L).includes(r.point(0L, 0L))");
            Object obtained = runOrCatch(r.point(0L, 0L).includes(r.point(0L, 0L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #116");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #116:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/intersection_inclusion.yaml line #118
            /* err('ReqlQueryLogicError', 'Expected geometry of type `Polygon` but found `LineString`.') */
            Err expected_ = err("ReqlQueryLogicError", "Expected geometry of type `Polygon` but found `LineString`.");
            /* r.line([0,0], [0,1]).includes(r.point(0,0)) */
            logger.info("About to run line #118: r.line(r.array(0L, 0L), r.array(0L, 1L)).includes(r.point(0L, 0L))");
            Object obtained = runOrCatch(r.line(r.array(0L, 0L), r.array(0L, 1L)).includes(r.point(0L, 0L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #118");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #118:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
