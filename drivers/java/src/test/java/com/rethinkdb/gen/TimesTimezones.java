// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class TimesTimezones {
    // Test basic timezone manipulation
    Logger logger = LoggerFactory.getLogger(TimesTimezones.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Matches Python's str() function, which we use.
    // TODO: We might want to handle this in a visit_Call in convert_tests.py instead.
    private static String str(long i) {
        return String.valueOf(i);
    }

    // A hack to concatenate two List<Long>s -- see is_array_add in convert_tests.py.
    private static List<Long> concatLong(List<Long> x, List<Long> y) {
        List<Long> ret = new ArrayList<Long>(x);
        ret.addAll(y);
        return ret;
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        // times/timezones.yaml line #3
        // t1 = r.time(2013, r.july, 29, 23, 30, 0, "+00:00")
        logger.info("Possibly executing: Time t1 = (Time) (r.time(2013L, r.july(), 29L, 23L, 30L, 0L, '+00:00'));");
        Time t1 = (Time) (r.time(2013L, r.july(), 29L, 23L, 30L, 0L, "+00:00"));

        // times/timezones.yaml line #5
        // tutc1 = t1.in_timezone("Z")
        logger.info("Possibly executing: InTimezone tutc1 = (InTimezone) (t1.inTimezone('Z'));");
        InTimezone tutc1 = (InTimezone) (t1.inTimezone("Z"));

        // times/timezones.yaml line #6
        // tutc2 = t1.in_timezone("+00:00")
        logger.info("Possibly executing: InTimezone tutc2 = (InTimezone) (t1.inTimezone('+00:00'));");
        InTimezone tutc2 = (InTimezone) (t1.inTimezone("+00:00"));

        // times/timezones.yaml line #7
        // tutc3 = t1.in_timezone("+00")
        logger.info("Possibly executing: InTimezone tutc3 = (InTimezone) (t1.inTimezone('+00'));");
        InTimezone tutc3 = (InTimezone) (t1.inTimezone("+00"));

        // times/timezones.yaml line #8
        // tutcs = r.expr([tutc1, tutc2, tutc3])
        logger.info("Possibly executing: MakeArray tutcs = (MakeArray) (r.expr(r.array(tutc1, tutc2, tutc3)));");
        MakeArray tutcs = (MakeArray) (r.expr(r.array(tutc1, tutc2, tutc3)));

        // times/timezones.yaml line #10
        // tm1 = t1.in_timezone("-00:59")
        logger.info("Possibly executing: InTimezone tm1 = (InTimezone) (t1.inTimezone('-00:59'));");
        InTimezone tm1 = (InTimezone) (t1.inTimezone("-00:59"));

        // times/timezones.yaml line #11
        // tm2 = t1.in_timezone("-01:00")
        logger.info("Possibly executing: InTimezone tm2 = (InTimezone) (t1.inTimezone('-01:00'));");
        InTimezone tm2 = (InTimezone) (t1.inTimezone("-01:00"));

        // times/timezones.yaml line #12
        // tm3 = t1.in_timezone("-01:01")
        logger.info("Possibly executing: InTimezone tm3 = (InTimezone) (t1.inTimezone('-01:01'));");
        InTimezone tm3 = (InTimezone) (t1.inTimezone("-01:01"));

        // times/timezones.yaml line #13
        // tms = r.expr([tm1, tm2, tm3])
        logger.info("Possibly executing: MakeArray tms = (MakeArray) (r.expr(r.array(tm1, tm2, tm3)));");
        MakeArray tms = (MakeArray) (r.expr(r.array(tm1, tm2, tm3)));

        // times/timezones.yaml line #15
        // tp1 = t1.in_timezone("+00:59")
        logger.info("Possibly executing: InTimezone tp1 = (InTimezone) (t1.inTimezone('+00:59'));");
        InTimezone tp1 = (InTimezone) (t1.inTimezone("+00:59"));

        // times/timezones.yaml line #16
        // tp2 = t1.in_timezone("+01:00")
        logger.info("Possibly executing: InTimezone tp2 = (InTimezone) (t1.inTimezone('+01:00'));");
        InTimezone tp2 = (InTimezone) (t1.inTimezone("+01:00"));

        // times/timezones.yaml line #17
        // tp3 = t1.in_timezone("+01:01")
        logger.info("Possibly executing: InTimezone tp3 = (InTimezone) (t1.inTimezone('+01:01'));");
        InTimezone tp3 = (InTimezone) (t1.inTimezone("+01:01"));

        // times/timezones.yaml line #18
        // tps = r.expr([tp1, tp2, tp3])
        logger.info("Possibly executing: MakeArray tps = (MakeArray) (r.expr(r.array(tp1, tp2, tp3)));");
        MakeArray tps = (MakeArray) (r.expr(r.array(tp1, tp2, tp3)));

        // times/timezones.yaml line #20
        // ts = tutcs.union(tms).union(tps).union([t1])
        logger.info("Possibly executing: Union ts = (Union) (tutcs.union(tms).union(tps).union(r.array(t1)));");
        Union ts = (Union) (tutcs.union(tms).union(tps).union(r.array(t1)));

        {
            // times/timezones.yaml line #23
            /* ([["+00:00", 29], ["+00:00", 29], ["+00:00", 29]]) */
            List expected_ = r.array(r.array("+00:00", 29L), r.array("+00:00", 29L), r.array("+00:00", 29L));
            /* tutcs.map(lambda x:[x.timezone(), x.day()]) */
            logger.info("About to run line #23: tutcs.map(x -> r.array(x.timezone(), x.day()))");
            Object obtained = runOrCatch(tutcs.map(x -> r.array(x.timezone(), x.day())),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #23");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #27
            /* ([["-00:59", 29], ["-01:00", 29], ["-01:01", 29]]) */
            List expected_ = r.array(r.array("-00:59", 29L), r.array("-01:00", 29L), r.array("-01:01", 29L));
            /* tms.map(lambda x:[x.timezone(), x.day()]) */
            logger.info("About to run line #27: tms.map(x -> r.array(x.timezone(), x.day()))");
            Object obtained = runOrCatch(tms.map(x -> r.array(x.timezone(), x.day())),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #27");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #31
            /* ([["+00:59", 30], ["+01:00", 30], ["+01:01", 30]]) */
            List expected_ = r.array(r.array("+00:59", 30L), r.array("+01:00", 30L), r.array("+01:01", 30L));
            /* tps.map(lambda x:[x.timezone(), x.day()]) */
            logger.info("About to run line #31: tps.map(x -> r.array(x.timezone(), x.day()))");
            Object obtained = runOrCatch(tps.map(x -> r.array(x.timezone(), x.day())),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #31");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #38
            /* ([0]) */
            List expected_ = r.array(0L);
            /* ts.concat_map(lambda x:ts.map(lambda y:x - y)).distinct() */
            logger.info("About to run line #38: ts.concatMap(x -> ts.map(y -> r.sub(x, y))).distinct()");
            Object obtained = runOrCatch(ts.concatMap(x -> ts.map(y -> r.sub(x, y))).distinct(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #38");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #38:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #44
            /* err('ReqlQueryLogicError', 'Timezone `` does not start with `-` or `+`.') */
            Err expected_ = err("ReqlQueryLogicError", "Timezone `` does not start with `-` or `+`.");
            /* r.now().in_timezone("") */
            logger.info("About to run line #44: r.now().inTimezone('')");
            Object obtained = runOrCatch(r.now().inTimezone(""),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #44");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #47
            /* err('ReqlQueryLogicError', '`-00` is not a valid time offset.') */
            Err expected_ = err("ReqlQueryLogicError", "`-00` is not a valid time offset.");
            /* r.now().in_timezone("-00") */
            logger.info("About to run line #47: r.now().inTimezone('-00')");
            Object obtained = runOrCatch(r.now().inTimezone("-00"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #47");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #47:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #50
            /* err('ReqlQueryLogicError', '`-00:00` is not a valid time offset.') */
            Err expected_ = err("ReqlQueryLogicError", "`-00:00` is not a valid time offset.");
            /* r.now().in_timezone("-00:00") */
            logger.info("About to run line #50: r.now().inTimezone('-00:00')");
            Object obtained = runOrCatch(r.now().inTimezone("-00:00"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #50");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #53
            /* err('ReqlQueryLogicError', 'Timezone `UTC+00` does not start with `-` or `+`.') */
            Err expected_ = err("ReqlQueryLogicError", "Timezone `UTC+00` does not start with `-` or `+`.");
            /* r.now().in_timezone("UTC+00") */
            logger.info("About to run line #53: r.now().inTimezone('UTC+00')");
            Object obtained = runOrCatch(r.now().inTimezone("UTC+00"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #53");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #53:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #56
            /* err('ReqlQueryLogicError', 'Minutes out of range in `+00:60`.') */
            Err expected_ = err("ReqlQueryLogicError", "Minutes out of range in `+00:60`.");
            /* r.now().in_timezone("+00:60") */
            logger.info("About to run line #56: r.now().inTimezone('+00:60')");
            Object obtained = runOrCatch(r.now().inTimezone("+00:60"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #56");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #56:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #59
            /* err('ReqlQueryLogicError', 'Hours out of range in `+25:00`.') */
            Err expected_ = err("ReqlQueryLogicError", "Hours out of range in `+25:00`.");
            /* r.now().in_timezone("+25:00") */
            logger.info("About to run line #59: r.now().inTimezone('+25:00')");
            Object obtained = runOrCatch(r.now().inTimezone("+25:00"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #59");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #59:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #63
            /* err('ReqlQueryLogicError', 'Timezone `` does not start with `-` or `+`.') */
            Err expected_ = err("ReqlQueryLogicError", "Timezone `` does not start with `-` or `+`.");
            /* r.time(2013, 1, 1, "") */
            logger.info("About to run line #63: r.time(2013L, 1L, 1L, '')");
            Object obtained = runOrCatch(r.time(2013L, 1L, 1L, ""),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #63");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #63:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #66
            /* err('ReqlQueryLogicError', '`-00` is not a valid time offset.') */
            Err expected_ = err("ReqlQueryLogicError", "`-00` is not a valid time offset.");
            /* r.time(2013, 1, 1, "-00") */
            logger.info("About to run line #66: r.time(2013L, 1L, 1L, '-00')");
            Object obtained = runOrCatch(r.time(2013L, 1L, 1L, "-00"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #66");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #66:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #69
            /* err('ReqlQueryLogicError', '`-00:00` is not a valid time offset.') */
            Err expected_ = err("ReqlQueryLogicError", "`-00:00` is not a valid time offset.");
            /* r.time(2013, 1, 1, "-00:00") */
            logger.info("About to run line #69: r.time(2013L, 1L, 1L, '-00:00')");
            Object obtained = runOrCatch(r.time(2013L, 1L, 1L, "-00:00"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #69");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #69:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #72
            /* err('ReqlQueryLogicError', 'Timezone `UTC+00` does not start with `-` or `+`.') */
            Err expected_ = err("ReqlQueryLogicError", "Timezone `UTC+00` does not start with `-` or `+`.");
            /* r.time(2013, 1, 1, "UTC+00") */
            logger.info("About to run line #72: r.time(2013L, 1L, 1L, 'UTC+00')");
            Object obtained = runOrCatch(r.time(2013L, 1L, 1L, "UTC+00"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #72");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #72:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #75
            /* err('ReqlQueryLogicError', 'Minutes out of range in `+00:60`.') */
            Err expected_ = err("ReqlQueryLogicError", "Minutes out of range in `+00:60`.");
            /* r.time(2013, 1, 1, "+00:60") */
            logger.info("About to run line #75: r.time(2013L, 1L, 1L, '+00:60')");
            Object obtained = runOrCatch(r.time(2013L, 1L, 1L, "+00:60"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #75");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #75:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #78
            /* err('ReqlQueryLogicError', 'Hours out of range in `+25:00`.') */
            Err expected_ = err("ReqlQueryLogicError", "Hours out of range in `+25:00`.");
            /* r.time(2013, 1, 1, "+25:00") */
            logger.info("About to run line #78: r.time(2013L, 1L, 1L, '+25:00')");
            Object obtained = runOrCatch(r.time(2013L, 1L, 1L, "+25:00"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #78");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #78:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #81
            /* ("2015-07-08T00:00:00-08:00") */
            String expected_ = "2015-07-08T00:00:00-08:00";
            /* r.epoch_time(1436428422.339).in_timezone('-08:00').date().to_iso8601() */
            logger.info("About to run line #81: r.epochTime(1436428422.339).inTimezone('-08:00').date().toIso8601()");
            Object obtained = runOrCatch(r.epochTime(1436428422.339).inTimezone("-08:00").date().toIso8601(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #81");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #81:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/timezones.yaml line #85
            /* ("2015-07-09T00:00:00-07:00") */
            String expected_ = "2015-07-09T00:00:00-07:00";
            /* r.epoch_time(1436428422.339).in_timezone('-07:00').date().to_iso8601() */
            logger.info("About to run line #85: r.epochTime(1436428422.339).inTimezone('-07:00').date().toIso8601()");
            Object obtained = runOrCatch(r.epochTime(1436428422.339).inTimezone("-07:00").date().toIso8601(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #85");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #85:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
