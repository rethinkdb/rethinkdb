// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class MutationInsert {
    // Tests insertion into tables
    Logger logger = LoggerFactory.getLogger(MutationInsert.class);
    public static final RethinkDB r = RethinkDB.r;
    public static final Table tbl = r.db("test").table("tbl");

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
        try {
            r.db("test").tableCreate("tbl").run(conn);
            r.db("test").table(tbl).wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.db("test").tableDrop("tbl").run(conn);
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        {
            // mutation/insert.yaml line #6
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* r.db('test').table_create('test2') */
            logger.info("About to run line #6: r.db('test').tableCreate('test2')");
            Object obtained = runOrCatch(r.db("test").tableCreate("test2"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #6");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // mutation/insert.yaml line #9
        // tbl2 = r.db('test').table('test2')
        logger.info("Possibly executing: Table tbl2 = (Table) (r.db('test').table('test2'));");
        Table tbl2 = (Table) (r.db("test").table("test2"));

        {
            // mutation/insert.yaml line #12
            /* {'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 1L);
            /* tbl.insert({'id':0,'a':0}) */
            logger.info("About to run line #12: tbl.insert(r.hashMap('id', 0L).with('a', 0L))");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 0L).with("a", 0L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #12");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #14
            /* 1 */
            Long expected_ = 1L;
            /* tbl.count() */
            logger.info("About to run line #14: tbl.count()");
            Object obtained = runOrCatch(tbl.count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #14");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #18
            /* {'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 1L);
            /* tbl.insert({'id':1, 'a':1}, durability='hard') */
            logger.info("About to run line #18: tbl.insert(r.hashMap('id', 1L).with('a', 1L)).optArg('durability', 'hard')");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 1L).with("a", 1L)).optArg("durability", "hard"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #18");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #22
            /* 2 */
            Long expected_ = 2L;
            /* tbl.count() */
            logger.info("About to run line #22: tbl.count()");
            Object obtained = runOrCatch(tbl.count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #22");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #26
            /* {'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 1L);
            /* tbl.insert({'id':2, 'a':2}, durability='soft') */
            logger.info("About to run line #26: tbl.insert(r.hashMap('id', 2L).with('a', 2L)).optArg('durability', 'soft')");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 2L).with("a", 2L)).optArg("durability", "soft"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #26");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #30
            /* 3 */
            Long expected_ = 3L;
            /* tbl.count() */
            logger.info("About to run line #30: tbl.count()");
            Object obtained = runOrCatch(tbl.count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #30");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #34
            /* err('ReqlQueryLogicError', 'Durability option `wrong` unrecognized (options are "hard" and "soft").', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Durability option `wrong` unrecognized (options are \"hard\" and \"soft\").", r.array(0L));
            /* tbl.insert({'id':3, 'a':3}, durability='wrong') */
            logger.info("About to run line #34: tbl.insert(r.hashMap('id', 3L).with('a', 3L)).optArg('durability', 'wrong')");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 3L).with("a", 3L)).optArg("durability", "wrong"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #34");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #38
            /* 3 */
            Long expected_ = 3L;
            /* tbl.count() */
            logger.info("About to run line #38: tbl.count()");
            Object obtained = runOrCatch(tbl.count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #38");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #38:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #42
            /* {'deleted':1,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':0} */
            Map expected_ = r.hashMap("deleted", 1L).with("replaced", 0L).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 0L);
            /* tbl.get(2).delete() */
            logger.info("About to run line #42: tbl.get(2L).delete()");
            Object obtained = runOrCatch(tbl.get(2L).delete(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #42");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #42:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #46
            /* {'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':2} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 2L);
            /* tbl.insert([{'id':2,'a':2}, {'id':3,'a':3}]) */
            logger.info("About to run line #46: tbl.insert(r.array(r.hashMap('id', 2L).with('a', 2L), r.hashMap('id', 3L).with('a', 3L)))");
            Object obtained = runOrCatch(tbl.insert(r.array(r.hashMap("id", 2L).with("a", 2L), r.hashMap("id", 3L).with("a", 3L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #46");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #50
            /* {'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':4} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 4L);
            /* tbl2.insert(tbl) */
            logger.info("About to run line #50: tbl2.insert(tbl)");
            Object obtained = runOrCatch(tbl2.insert(tbl),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #50");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #54
            /* {'first_error':"Duplicate primary key `id`:\n{\n\t\"a\":\t2,\n\t\"id\":\t2\n}\n{\n\t\"b\":\t20,\n\t\"id\":\t2\n}",'deleted':0,'replaced':0,'unchanged':0,'errors':1,'skipped':0,'inserted':0} */
            Map expected_ = r.hashMap("first_error", "Duplicate primary key `id`:\n{\n\t\"a\":\t2,\n\t\"id\":\t2\n}\n{\n\t\"b\":\t20,\n\t\"id\":\t2\n}").with("deleted", 0L).with("replaced", 0L).with("unchanged", 0L).with("errors", 1L).with("skipped", 0L).with("inserted", 0L);
            /* tbl.insert({'id':2,'b':20}) */
            logger.info("About to run line #54: tbl.insert(r.hashMap('id', 2L).with('b', 20L))");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 2L).with("b", 20L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #54");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #54:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #58
            /* {'first_error':"Duplicate primary key `id`:\n{\n\t\"a\":\t2,\n\t\"id\":\t2\n}\n{\n\t\"b\":\t20,\n\t\"id\":\t2\n}",'deleted':0,'replaced':0,'unchanged':0,'errors':1,'skipped':0,'inserted':0} */
            Map expected_ = r.hashMap("first_error", "Duplicate primary key `id`:\n{\n\t\"a\":\t2,\n\t\"id\":\t2\n}\n{\n\t\"b\":\t20,\n\t\"id\":\t2\n}").with("deleted", 0L).with("replaced", 0L).with("unchanged", 0L).with("errors", 1L).with("skipped", 0L).with("inserted", 0L);
            /* tbl.insert({'id':2,'b':20}, conflict='error') */
            logger.info("About to run line #58: tbl.insert(r.hashMap('id', 2L).with('b', 20L)).optArg('conflict', 'error')");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 2L).with("b", 20L)).optArg("conflict", "error"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #58");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #58:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #64
            /* {'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 1L);
            /* tbl.insert({'id':15,'b':20}, conflict='error') */
            logger.info("About to run line #64: tbl.insert(r.hashMap('id', 15L).with('b', 20L)).optArg('conflict', 'error')");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 15L).with("b", 20L)).optArg("conflict", "error"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #64");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #64:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #69
            /* {'id':15,'b':20} */
            Map expected_ = r.hashMap("id", 15L).with("b", 20L);
            /* tbl.get(15) */
            logger.info("About to run line #69: tbl.get(15L)");
            Object obtained = runOrCatch(tbl.get(15L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #69");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #69:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #73
            /* {'deleted':0,'replaced':1,'unchanged':0,'errors':0,'skipped':0,'inserted':0} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 1L).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 0L);
            /* tbl.insert({'id':2,'b':20}, conflict='replace') */
            logger.info("About to run line #73: tbl.insert(r.hashMap('id', 2L).with('b', 20L)).optArg('conflict', 'replace')");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 2L).with("b", 20L)).optArg("conflict", "replace"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #73");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #73:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #78
            /* {'id':2,'b':20} */
            Map expected_ = r.hashMap("id", 2L).with("b", 20L);
            /* tbl.get(2) */
            logger.info("About to run line #78: tbl.get(2L)");
            Object obtained = runOrCatch(tbl.get(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #78");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #78:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #82
            /* {'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 1L);
            /* tbl.insert({'id':20,'b':20}, conflict='replace') */
            logger.info("About to run line #82: tbl.insert(r.hashMap('id', 20L).with('b', 20L)).optArg('conflict', 'replace')");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 20L).with("b", 20L)).optArg("conflict", "replace"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #82");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #82:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #87
            /* {'id':20,'b':20} */
            Map expected_ = r.hashMap("id", 20L).with("b", 20L);
            /* tbl.get(20) */
            logger.info("About to run line #87: tbl.get(20L)");
            Object obtained = runOrCatch(tbl.get(20L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #87");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #87:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #91
            /* {'deleted':0,'replaced':1,'unchanged':0,'errors':0,'skipped':0,'inserted':0} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 1L).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 0L);
            /* tbl.insert({'id':2,'c':30}, conflict='update') */
            logger.info("About to run line #91: tbl.insert(r.hashMap('id', 2L).with('c', 30L)).optArg('conflict', 'update')");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 2L).with("c", 30L)).optArg("conflict", "update"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #91");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #91:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #96
            /* {'id':2, 'b':20, 'c':30} */
            Map expected_ = r.hashMap("id", 2L).with("b", 20L).with("c", 30L);
            /* tbl.get(2) */
            logger.info("About to run line #96: tbl.get(2L)");
            Object obtained = runOrCatch(tbl.get(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #96");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #96:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #100
            /* {'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':1} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 1L);
            /* tbl.insert({'id':30,'b':20}, conflict='update') */
            logger.info("About to run line #100: tbl.insert(r.hashMap('id', 30L).with('b', 20L)).optArg('conflict', 'update')");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 30L).with("b", 20L)).optArg("conflict", "update"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #100");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #100:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #105
            /* {'id':30,'b':20} */
            Map expected_ = r.hashMap("id", 30L).with("b", 20L);
            /* tbl.get(30) */
            logger.info("About to run line #105: tbl.get(30L)");
            Object obtained = runOrCatch(tbl.get(30L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #105");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #105:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #109
            /* err('ReqlQueryLogicError', 'Conflict option `wrong` unrecognized (options are "error", "replace" and "update").', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Conflict option `wrong` unrecognized (options are \"error\", \"replace\" and \"update\").", r.array(0L));
            /* tbl.insert({'id':3, 'a':3}, conflict='wrong') */
            logger.info("About to run line #109: tbl.insert(r.hashMap('id', 3L).with('a', 3L)).optArg('conflict', 'wrong')");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 3L).with("a", 3L)).optArg("conflict", "wrong"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #109");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #109:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // mutation/insert.yaml line #120
        // tblpkey = r.db('test').table('testpkey')
        logger.info("Possibly executing: Table tblpkey = (Table) (r.db('test').table('testpkey'));");
        Table tblpkey = (Table) (r.db("test").table("testpkey"));

        {
            // mutation/insert.yaml line #115
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* r.db('test').table_create('testpkey', primary_key='foo') */
            logger.info("About to run line #115: r.db('test').tableCreate('testpkey').optArg('primary_key', 'foo')");
            Object obtained = runOrCatch(r.db("test").tableCreate("testpkey").optArg("primary_key", "foo"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #115");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #115:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #122
            /* {'deleted':0,'replaced':0,'generated_keys':arrlen(1,uuid()),'unchanged':0,'errors':0,'skipped':0,'inserted':1} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("generated_keys", arrlen(1L, uuid())).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 1L);
            /* tblpkey.insert({}) */
            logger.info("About to run line #122: tblpkey.insert(r.hashMap())");
            Object obtained = runOrCatch(tblpkey.insert(r.hashMap()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #122");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #122:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #125
            /* [{'foo':uuid()}] */
            List expected_ = r.array(r.hashMap("foo", uuid()));
            /* tblpkey */
            logger.info("About to run line #125: tblpkey");
            Object obtained = runOrCatch(tblpkey,
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #125");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #125:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #129
            /* {'deleted':0,'replaced':0,'generated_keys':arrlen(1,uuid()),'unchanged':0,'errors':0,'skipped':0,'inserted':1} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("generated_keys", arrlen(1L, uuid())).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 1L);
            /* tblpkey.insert({'b':20}, conflict='replace') */
            logger.info("About to run line #129: tblpkey.insert(r.hashMap('b', 20L)).optArg('conflict', 'replace')");
            Object obtained = runOrCatch(tblpkey.insert(r.hashMap("b", 20L)).optArg("conflict", "replace"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #129");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #129:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #135
            /* {'deleted':0,'replaced':0,'generated_keys':arrlen(1,uuid()),'unchanged':0,'errors':0,'skipped':0,'inserted':1} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("generated_keys", arrlen(1L, uuid())).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 1L);
            /* tblpkey.insert({'b':20}, conflict='update') */
            logger.info("About to run line #135: tblpkey.insert(r.hashMap('b', 20L)).optArg('conflict', 'update')");
            Object obtained = runOrCatch(tblpkey.insert(r.hashMap("b", 20L)).optArg("conflict", "update"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #135");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #135:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #140
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* r.db('test').table_drop('testpkey') */
            logger.info("About to run line #140: r.db('test').tableDrop('testpkey')");
            Object obtained = runOrCatch(r.db("test").tableDrop("testpkey"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #140");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #140:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #144
            /* {'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':7} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 7L);
            /* tbl.for_each(lambda  row:          tbl2.insert(row.merge({'id':row['id']  +  100 }))   ) */
            logger.info("About to run line #144: tbl.forEach(row -> tbl2.insert(row.merge(r.hashMap('id', row.bracket('id').add(100L)))))");
            Object obtained = runOrCatch(tbl.forEach(row -> tbl2.insert(row.merge(r.hashMap("id", row.bracket("id").add(100L))))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #144");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #144:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #150
            /* partial({'errors':1,'first_error':'`r.minval` and `r.maxval` cannot be written to disk.'}) */
            Partial expected_ = partial(r.hashMap("errors", 1L).with("first_error", "`r.minval` and `r.maxval` cannot be written to disk."));
            /* tbl.insert({'value':r.minval}) */
            logger.info("About to run line #150: tbl.insert(r.hashMap('value', r.minval()))");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("value", r.minval())),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #150");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #150:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #154
            /* partial({'errors':1,'first_error':'`r.minval` and `r.maxval` cannot be written to disk.'}) */
            Partial expected_ = partial(r.hashMap("errors", 1L).with("first_error", "`r.minval` and `r.maxval` cannot be written to disk."));
            /* tbl.insert({'value':r.maxval}) */
            logger.info("About to run line #154: tbl.insert(r.hashMap('value', r.maxval()))");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("value", r.maxval())),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #154");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #154:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #159
            /* partial({'changes':[{'old_val': None, 'new_val': {'id': 100+i, 'ordered-num': i}} for i in range(1,100)] }) */
            Partial expected_ = partial(r.hashMap("changes", LongStream.range(1L, 100L).boxed().map(i -> r.hashMap("old_val", null).with("new_val", r.hashMap("id", 100L + i).with("ordered-num", i))).collect(Collectors.toList())));
            /* tbl.insert([{'id':100+i, 'ordered-num':i} for i in range(1,100)], return_changes="always") */
            logger.info("About to run line #159: tbl.insert(LongStream.range(1L, 100L).boxed().map(i -> r.hashMap('id', r.add(100L, i)).with('ordered-num', i)).collect(Collectors.toList())).optArg('return_changes', 'always')");
            Object obtained = runOrCatch(tbl.insert(LongStream.range(1L, 100L).boxed().map(i -> r.hashMap("id", r.add(100L, i)).with("ordered-num", i)).collect(Collectors.toList())).optArg("return_changes", "always"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #159");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #159:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #163
            /* partial({'changes':[{'old_val': None, 'new_val': {'id': [1,"blah", 200+i], 'ordered-num': i}} for i in range(1,100)] }) */
            Partial expected_ = partial(r.hashMap("changes", LongStream.range(1L, 100L).boxed().map(i -> r.hashMap("old_val", null).with("new_val", r.hashMap("id", r.array(1L, "blah", 200L + i)).with("ordered-num", i))).collect(Collectors.toList())));
            /* tbl.insert([{'id':[1, "blah", 200+i], 'ordered-num':i} for i in range(1,100)], return_changes="always") */
            logger.info("About to run line #163: tbl.insert(LongStream.range(1L, 100L).boxed().map(i -> r.hashMap('id', r.array(1L, 'blah', r.add(200L, i))).with('ordered-num', i)).collect(Collectors.toList())).optArg('return_changes', 'always')");
            Object obtained = runOrCatch(tbl.insert(LongStream.range(1L, 100L).boxed().map(i -> r.hashMap("id", r.array(1L, "blah", r.add(200L, i))).with("ordered-num", i)).collect(Collectors.toList())).optArg("return_changes", "always"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #163");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #163:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #167
            /* partial({'changes':[{'old_val': None, 'new_val': {'id': [1,"blah", 300+i], 'ordered-num': i}} for i in range(1,100)] }) */
            Partial expected_ = partial(r.hashMap("changes", LongStream.range(1L, 100L).boxed().map(i -> r.hashMap("old_val", null).with("new_val", r.hashMap("id", r.array(1L, "blah", 300L + i)).with("ordered-num", i))).collect(Collectors.toList())));
            /* tbl.insert([{'id':[1, "blah", 300+i], 'ordered-num':i} for i in range(1,100)], return_changes=true) */
            logger.info("About to run line #167: tbl.insert(LongStream.range(1L, 100L).boxed().map(i -> r.hashMap('id', r.array(1L, 'blah', r.add(300L, i))).with('ordered-num', i)).collect(Collectors.toList())).optArg('return_changes', true)");
            Object obtained = runOrCatch(tbl.insert(LongStream.range(1L, 100L).boxed().map(i -> r.hashMap("id", r.array(1L, "blah", r.add(300L, i))).with("ordered-num", i)).collect(Collectors.toList())).optArg("return_changes", true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #167");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #167:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #175
            /* partial({'changes':[]}) */
            Partial expected_ = partial(r.hashMap("changes", r.array()));
            /* tbl.insert([{'id':100 + i, 'ordered-num':i} for i in range(1,100)], return_changes=true) */
            logger.info("About to run line #175: tbl.insert(LongStream.range(1L, 100L).boxed().map(i -> r.hashMap('id', r.add(100L, i)).with('ordered-num', i)).collect(Collectors.toList())).optArg('return_changes', true)");
            Object obtained = runOrCatch(tbl.insert(LongStream.range(1L, 100L).boxed().map(i -> r.hashMap("id", r.add(100L, i)).with("ordered-num", i)).collect(Collectors.toList())).optArg("return_changes", true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #175");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #175:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #178
            /* partial({'changes': [{'old_val': None, 'new_val': None, 'error': '`r.minval` and `r.maxval` cannot be written to disk.'}]}) */
            Partial expected_ = partial(r.hashMap("changes", r.array(r.hashMap("old_val", null).with("new_val", null).with("error", "`r.minval` and `r.maxval` cannot be written to disk."))));
            /* tbl.insert({'a':r.minval}, return_changes="always") */
            logger.info("About to run line #178: tbl.insert(r.hashMap('a', r.minval())).optArg('return_changes', 'always')");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("a", r.minval())).optArg("return_changes", "always"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #178");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #178:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #184
            /* partial({'inserted':1}) */
            Partial expected_ = partial(r.hashMap("inserted", 1L));
            /* tbl.insert({'id':42, 'foo':1, 'bar':1}) */
            logger.info("About to run line #184: tbl.insert(r.hashMap('id', 42L).with('foo', 1L).with('bar', 1L))");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 42L).with("foo", 1L).with("bar", 1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #184");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #184:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #186
            /* partial({'replaced':1}) */
            Partial expected_ = partial(r.hashMap("replaced", 1L));
            /* tbl.insert({'id':42, 'foo':5, 'bar':5}, conflict=lambda id, old_row, new_row: old_row.merge(new_row.pluck("bar"))) */
            logger.info("About to run line #186: tbl.insert(r.hashMap('id', 42L).with('foo', 5L).with('bar', 5L)).optArg('conflict', (id, old_row, new_row) -> old_row.merge(new_row.pluck('bar')))");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 42L).with("foo", 5L).with("bar", 5L)).optArg("conflict", (id, old_row, new_row) -> old_row.merge(new_row.pluck("bar"))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #186");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #186:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #188
            /* {'id':42, 'foo':1, 'bar':5} */
            Map expected_ = r.hashMap("id", 42L).with("foo", 1L).with("bar", 5L);
            /* tbl.get(42) */
            logger.info("About to run line #188: tbl.get(42L)");
            Object obtained = runOrCatch(tbl.get(42L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #188");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #188:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #200
            /* partial({'first_error': 'Inserted value must be an OBJECT (got NUMBER):\n2'}) */
            Partial expected_ = partial(r.hashMap("first_error", "Inserted value must be an OBJECT (got NUMBER):\n2"));
            /* tbl.insert({'id':42, 'foo':1, 'bar':1}, conflict=lambda a,b,c: 2) */
            logger.info("About to run line #200: tbl.insert(r.hashMap('id', 42L).with('foo', 1L).with('bar', 1L)).optArg('conflict', (a, b, c) -> 2L)");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 42L).with("foo", 1L).with("bar", 1L)).optArg("conflict", (a, b, c) -> 2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #200");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #200:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #204
            /* err("ReqlQueryLogicError", "The conflict function passed to `insert` should expect 3 arguments.") */
            Err expected_ = err("ReqlQueryLogicError", "The conflict function passed to `insert` should expect 3 arguments.");
            /* tbl.insert({'id':42}, conflict=lambda a,b: a) */
            logger.info("About to run line #204: tbl.insert(r.hashMap('id', 42L)).optArg('conflict', (a, b) -> a)");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 42L)).optArg("conflict", (a, b) -> a),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #204");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #204:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #208
            /* err("ReqlQueryLogicError", "The conflict function passed to `insert` must be deterministic.") */
            Err expected_ = err("ReqlQueryLogicError", "The conflict function passed to `insert` must be deterministic.");
            /* tbl.insert({'id':42}, conflict=lambda a,b,c: tbl.get(42)) */
            logger.info("About to run line #208: tbl.insert(r.hashMap('id', 42L)).optArg('conflict', (a, b, c) -> tbl.get(42L))");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 42L)).optArg("conflict", (a, b, c) -> tbl.get(42L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #208");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #208:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #211
            /* partial({'replaced': 1}) */
            Partial expected_ = partial(r.hashMap("replaced", 1L));
            /* tbl.insert({'id':42}, conflict=lambda a,b,c: {'id':42, 'num':'424'}) */
            logger.info("About to run line #211: tbl.insert(r.hashMap('id', 42L)).optArg('conflict', (a, b, c) -> r.hashMap('id', 42L).with('num', '424'))");
            Object obtained = runOrCatch(tbl.insert(r.hashMap("id", 42L)).optArg("conflict", (a, b, c) -> r.hashMap("id", 42L).with("num", "424")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #211");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #211:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #213
            /* {'id':42, 'num':'424'} */
            Map expected_ = r.hashMap("id", 42L).with("num", "424");
            /* tbl.get(42) */
            logger.info("About to run line #213: tbl.get(42L)");
            Object obtained = runOrCatch(tbl.get(42L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #213");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #213:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #217
            /* err('ReqlQueryLogicError','Cannot convert `r.minval` to JSON.') */
            Err expected_ = err("ReqlQueryLogicError", "Cannot convert `r.minval` to JSON.");
            /* r.minval */
            logger.info("About to run line #217: r.minval()");
            Object obtained = runOrCatch(r.minval(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #217");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #217:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #220
            /* err('ReqlQueryLogicError','Cannot convert `r.maxval` to JSON.') */
            Err expected_ = err("ReqlQueryLogicError", "Cannot convert `r.maxval` to JSON.");
            /* r.maxval */
            logger.info("About to run line #220: r.maxval()");
            Object obtained = runOrCatch(r.maxval(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #220");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #220:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // mutation/insert.yaml line #224
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* r.db('test').table_drop('test2') */
            logger.info("About to run line #224: r.db('test').tableDrop('test2')");
            Object obtained = runOrCatch(r.db("test").tableDrop("test2"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #224");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #224:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
