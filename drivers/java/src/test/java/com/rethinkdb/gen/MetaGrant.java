// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class MetaGrant {
    // tests the `r.grant` term
    Logger logger = LoggerFactory.getLogger(MetaGrant.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Matches Python's str() function, which we use.
    // TODO: We might want to handle this in a visit_Call in convert_tests.py instead.
    private static String str(long i) {
        return String.valueOf(i);
    }

    // A hack to concatenate two List<Long>s -- see is_array_add in convert_tests.py.
    private static List<Long> concatLong(List<Long> x, List<Long> y) {
        List<Long> ret = new ArrayList<Long>(x);
        ret.addAll(y);
        return ret;
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        {
            // meta/grant.yaml line #3
            /* err("ReqlOpFailedError", "Expected a boolean or nu" + "ll for `read`, got 1.", []) */
            Err expected_ = err("ReqlOpFailedError", "Expected a boolean or nu" + "ll for `read`, got 1.", r.array());
            /* r.grant("test_user", {"read": 1}) */
            logger.info("About to run line #3: r.grant('test_user', r.hashMap('read', 1L))");
            Object obtained = runOrCatch(r.grant("test_user", r.hashMap("read", 1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #3");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #5
            /* err("ReqlOpFailedError", "Unexpected key(s) `invalid`.", []) */
            Err expected_ = err("ReqlOpFailedError", "Unexpected key(s) `invalid`.", r.array());
            /* r.grant("test_user", {"invalid": "invalid"}) */
            logger.info("About to run line #5: r.grant('test_user', r.hashMap('invalid', 'invalid'))");
            Object obtained = runOrCatch(r.grant("test_user", r.hashMap("invalid", "invalid")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #5");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #7
            /* {"granted": 1, "permissions_changes": [{"old_val": {"read": true, "write": true, "config": true, "connect": true}, "new_val": null}]} */
            Map expected_ = r.hashMap("granted", 1L).with("permissions_changes", r.array(r.hashMap("old_val", r.hashMap("read", true).with("write", true).with("config", true).with("connect", true)).with("new_val", null)));
            /* r.grant("test_user", {"read": null, "write": null, "config": null, "connect": null}) */
            logger.info("About to run line #7: r.grant('test_user', r.hashMap('read', null).with('write', null).with('config', null).with('connect', null))");
            Object obtained = runOrCatch(r.grant("test_user", r.hashMap("read", null).with("write", null).with("config", null).with("connect", null)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #7");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #9
            /* {"granted": 1, "permissions_changes": [{"old_val": null, "new_val": {"read": true, "write": true, "config": true, "connect": true}}]} */
            Map expected_ = r.hashMap("granted", 1L).with("permissions_changes", r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("read", true).with("write", true).with("config", true).with("connect", true))));
            /* r.grant("test_user", {"read": true, "write": true, "config": true, "connect": true}) */
            logger.info("About to run line #9: r.grant('test_user', r.hashMap('read', true).with('write', true).with('config', true).with('connect', true))");
            Object obtained = runOrCatch(r.grant("test_user", r.hashMap("read", true).with("write", true).with("config", true).with("connect", true)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #9");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #11
            /* {"granted": 1, "permissions_changes": [{"old_val": {"read": true, "write": true, "config": true, "connect": true}, "new_val": {"read": false, "write": false, "config": true, "connect": true}}]} */
            Map expected_ = r.hashMap("granted", 1L).with("permissions_changes", r.array(r.hashMap("old_val", r.hashMap("read", true).with("write", true).with("config", true).with("connect", true)).with("new_val", r.hashMap("read", false).with("write", false).with("config", true).with("connect", true))));
            /* r.grant("test_user", {"read": false, "write": false}) */
            logger.info("About to run line #11: r.grant('test_user', r.hashMap('read', false).with('write', false))");
            Object obtained = runOrCatch(r.grant("test_user", r.hashMap("read", false).with("write", false)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #11");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #13
            /* {"granted": 1, "permissions_changes": [{"old_val": {"read": false, "write": false, "config": true, "connect": true}, "new_val": {"write": false, "config": true, "connect": true}}]} */
            Map expected_ = r.hashMap("granted", 1L).with("permissions_changes", r.array(r.hashMap("old_val", r.hashMap("read", false).with("write", false).with("config", true).with("connect", true)).with("new_val", r.hashMap("write", false).with("config", true).with("connect", true))));
            /* r.grant("test_user", {"read": null}) */
            logger.info("About to run line #13: r.grant('test_user', r.hashMap('read', null))");
            Object obtained = runOrCatch(r.grant("test_user", r.hashMap("read", null)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #13");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #15
            /* {"granted": 1, "permissions_changes": [{"old_val": {"write": false, "config": true, "connect": true}, "new_val": {"write": false, "config": true, "connect": true}}]} */
            Map expected_ = r.hashMap("granted", 1L).with("permissions_changes", r.array(r.hashMap("old_val", r.hashMap("write", false).with("config", true).with("connect", true)).with("new_val", r.hashMap("write", false).with("config", true).with("connect", true))));
            /* r.grant("test_user", {}) */
            logger.info("About to run line #15: r.grant('test_user', r.hashMap())");
            Object obtained = runOrCatch(r.grant("test_user", r.hashMap()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #15");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #18
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* r.db_create("database") */
            logger.info("About to run line #18: r.dbCreate('database')");
            Object obtained = runOrCatch(r.dbCreate("database"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #18");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #20
            /* err("ReqlOpFailedError", "The `connect` permission is only valid at the global scope.", []) */
            Err expected_ = err("ReqlOpFailedError", "The `connect` permission is only valid at the global scope.", r.array());
            /* r.db("database").grant("test_user", {"connect": true}) */
            logger.info("About to run line #20: r.db('database').grant('test_user', r.hashMap('connect', true))");
            Object obtained = runOrCatch(r.db("database").grant("test_user", r.hashMap("connect", true)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #20");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #22
            /* err("ReqlOpFailedError", "Unexpected key(s) `invalid`.", []) */
            Err expected_ = err("ReqlOpFailedError", "Unexpected key(s) `invalid`.", r.array());
            /* r.db("database").grant("test_user", {"invalid": "invalid"}) */
            logger.info("About to run line #22: r.db('database').grant('test_user', r.hashMap('invalid', 'invalid'))");
            Object obtained = runOrCatch(r.db("database").grant("test_user", r.hashMap("invalid", "invalid")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #22");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #24
            /* {"granted": 1, "permissions_changes": [{"old_val": null, "new_val": {"read": true, "write": true, "config": true}}]} */
            Map expected_ = r.hashMap("granted", 1L).with("permissions_changes", r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("read", true).with("write", true).with("config", true))));
            /* r.db("database").grant("test_user", {"read": true, "write": true, "config": true}) */
            logger.info("About to run line #24: r.db('database').grant('test_user', r.hashMap('read', true).with('write', true).with('config', true))");
            Object obtained = runOrCatch(r.db("database").grant("test_user", r.hashMap("read", true).with("write", true).with("config", true)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #24");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #27
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* r.db("database").table_create("table") */
            logger.info("About to run line #27: r.db('database').tableCreate('table')");
            Object obtained = runOrCatch(r.db("database").tableCreate("table"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #27");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #29
            /* err("ReqlOpFailedError", "The `connect` permission is only valid at the global scope.", []) */
            Err expected_ = err("ReqlOpFailedError", "The `connect` permission is only valid at the global scope.", r.array());
            /* r.db("database").table("table").grant("test_user", {"connect": true}) */
            logger.info("About to run line #29: r.db('database').table('table').grant('test_user', r.hashMap('connect', true))");
            Object obtained = runOrCatch(r.db("database").table("table").grant("test_user", r.hashMap("connect", true)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #29");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #31
            /* err("ReqlOpFailedError", "Unexpected key(s) `invalid`.", []) */
            Err expected_ = err("ReqlOpFailedError", "Unexpected key(s) `invalid`.", r.array());
            /* r.db("database").table("table").grant("test_user", {"invalid": "invalid"}) */
            logger.info("About to run line #31: r.db('database').table('table').grant('test_user', r.hashMap('invalid', 'invalid'))");
            Object obtained = runOrCatch(r.db("database").table("table").grant("test_user", r.hashMap("invalid", "invalid")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #31");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #33
            /* {"granted": 1, "permissions_changes": [{"old_val": null, "new_val": {"read": true, "write": true, "config": true}}]} */
            Map expected_ = r.hashMap("granted", 1L).with("permissions_changes", r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("read", true).with("write", true).with("config", true))));
            /* r.db("database").table("table").grant("test_user", {"read": true, "write": true, "config": true}) */
            logger.info("About to run line #33: r.db('database').table('table').grant('test_user', r.hashMap('read', true).with('write', true).with('config', true))");
            Object obtained = runOrCatch(r.db("database").table("table").grant("test_user", r.hashMap("read", true).with("write", true).with("config", true)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #33");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #33:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #36
            /* err("ReqlOpFailedError", "The permissions of the user `admin` can't be modified.", []) */
            Err expected_ = err("ReqlOpFailedError", "The permissions of the user `admin` can't be modified.", r.array());
            /* r.grant("admin", {"config": false}) */
            logger.info("About to run line #36: r.grant('admin', r.hashMap('config', false))");
            Object obtained = runOrCatch(r.grant("admin", r.hashMap("config", false)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #36");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #36:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #38
            /* err("ReqlOpFailedError", "The permissions of the user `admin` can't be modified.", []) */
            Err expected_ = err("ReqlOpFailedError", "The permissions of the user `admin` can't be modified.", r.array());
            /* r.db("database").grant("admin", {"config": false}) */
            logger.info("About to run line #38: r.db('database').grant('admin', r.hashMap('config', false))");
            Object obtained = runOrCatch(r.db("database").grant("admin", r.hashMap("config", false)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #38");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #38:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #40
            /* err("ReqlOpFailedError", "The permissions of the user `admin` can't be modified.", []) */
            Err expected_ = err("ReqlOpFailedError", "The permissions of the user `admin` can't be modified.", r.array());
            /* r.db("database").table("table").grant("admin", {"config": false}) */
            logger.info("About to run line #40: r.db('database').table('table').grant('admin', r.hashMap('config', false))");
            Object obtained = runOrCatch(r.db("database").table("table").grant("admin", r.hashMap("config", false)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #40");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #43
            /* {"granted": 1, "permissions_changes": [{"old_val": null, "new_val": {"read": true, "write": true}}]} */
            Map expected_ = r.hashMap("granted", 1L).with("permissions_changes", r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("read", true).with("write", true))));
            /* r.db("rethinkdb").grant("test_user", {"read": true, "write": true}) */
            logger.info("About to run line #43: r.db('rethinkdb').grant('test_user', r.hashMap('read', true).with('write', true))");
            Object obtained = runOrCatch(r.db("rethinkdb").grant("test_user", r.hashMap("read", true).with("write", true)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #43");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #43:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #45
            /* {"granted": 1, "permissions_changes": [{"old_val": null, "new_val": {"read": true}}]} */
            Map expected_ = r.hashMap("granted", 1L).with("permissions_changes", r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("read", true))));
            /* r.db("rethinkdb").table("stats").grant("test_user", {"read": true}) */
            logger.info("About to run line #45: r.db('rethinkdb').table('stats').grant('test_user', r.hashMap('read', true))");
            Object obtained = runOrCatch(r.db("rethinkdb").table("stats").grant("test_user", r.hashMap("read", true)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #45");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #45:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #48
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* r.db("rethinkdb").table("permissions").filter({"user": "test_user"}).delete() */
            logger.info("About to run line #48: r.db('rethinkdb').table('permissions').filter(r.hashMap('user', 'test_user')).delete()");
            Object obtained = runOrCatch(r.db("rethinkdb").table("permissions").filter(r.hashMap("user", "test_user")).delete(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #48");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #49
            /* err("ReqlPermissionError", "User `test_user` does not have the required `read` permission.", []) */
            Err expected_ = err("ReqlPermissionError", "User `test_user` does not have the required `read` permission.", r.array());
            /* r.grant("test_user", {"read": true}) */
            logger.info("About to run line #49: r.grant('test_user', r.hashMap('read', true))");
            Object obtained = runOrCatch(r.grant("test_user", r.hashMap("read", true)),
                                          new OptArgs()
                                          .with("user", "test_user")
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #49");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #49:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #53
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* r.grant("test_user", {"read": true, "write": true}) */
            logger.info("About to run line #53: r.grant('test_user', r.hashMap('read', true).with('write', true))");
            Object obtained = runOrCatch(r.grant("test_user", r.hashMap("read", true).with("write", true)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #53");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #53:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #54
            /* err("ReqlPermissionError", "User `test_user` does not have the required `read` permission.", []) */
            Err expected_ = err("ReqlPermissionError", "User `test_user` does not have the required `read` permission.", r.array());
            /* r.grant("test_user", {"read": true}) */
            logger.info("About to run line #54: r.grant('test_user', r.hashMap('read', true))");
            Object obtained = runOrCatch(r.grant("test_user", r.hashMap("read", true)),
                                          new OptArgs()
                                          .with("user", "test_user")
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #54");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #54:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #58
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* r.grant("test_user", {"read": null, "write": null}) */
            logger.info("About to run line #58: r.grant('test_user', r.hashMap('read', null).with('write', null))");
            Object obtained = runOrCatch(r.grant("test_user", r.hashMap("read", null).with("write", null)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #58");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #58:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #59
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* r.db("rethinkdb").grant("test_user", {"read": true, "write": true}) */
            logger.info("About to run line #59: r.db('rethinkdb').grant('test_user', r.hashMap('read', true).with('write', true))");
            Object obtained = runOrCatch(r.db("rethinkdb").grant("test_user", r.hashMap("read", true).with("write", true)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #59");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #59:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #60
            /* {"granted": 1, "permissions_changes": [{"old_val": null, "new_val": {"read": true}}]} */
            Map expected_ = r.hashMap("granted", 1L).with("permissions_changes", r.array(r.hashMap("old_val", null).with("new_val", r.hashMap("read", true))));
            /* r.grant("test_user", {"read": true}) */
            logger.info("About to run line #60: r.grant('test_user', r.hashMap('read', true))");
            Object obtained = runOrCatch(r.grant("test_user", r.hashMap("read", true)),
                                          new OptArgs()
                                          .with("user", "test_user")
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #60");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #60:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #64
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* r.db("rethinkdb").grant("test_user", {"read": null, "write": null}) */
            logger.info("About to run line #64: r.db('rethinkdb').grant('test_user', r.hashMap('read', null).with('write', null))");
            Object obtained = runOrCatch(r.db("rethinkdb").grant("test_user", r.hashMap("read", null).with("write", null)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #64");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #64:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #65
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* r.db("rethinkdb").table("permissions").grant("test_user", {"read": true, "write": true}) */
            logger.info("About to run line #65: r.db('rethinkdb').table('permissions').grant('test_user', r.hashMap('read', true).with('write', true))");
            Object obtained = runOrCatch(r.db("rethinkdb").table("permissions").grant("test_user", r.hashMap("read", true).with("write", true)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #65");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #65:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // meta/grant.yaml line #66
            /* {"granted": 1, "permissions_changes": [{"old_val": {"read": true}, "new_val": {"read": true, "write": true}}]} */
            Map expected_ = r.hashMap("granted", 1L).with("permissions_changes", r.array(r.hashMap("old_val", r.hashMap("read", true)).with("new_val", r.hashMap("read", true).with("write", true))));
            /* r.grant("test_user", {"write": true}) */
            logger.info("About to run line #66: r.grant('test_user', r.hashMap('write', true))");
            Object obtained = runOrCatch(r.grant("test_user", r.hashMap("write", true)),
                                          new OptArgs()
                                          .with("user", "test_user")
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #66");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #66:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
