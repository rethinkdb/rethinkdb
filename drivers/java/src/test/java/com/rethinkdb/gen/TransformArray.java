// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class TransformArray {
    // Tests manipulation operations on arrays
    Logger logger = LoggerFactory.getLogger(TransformArray.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Matches Python's str() function, which we use.
    // TODO: We might want to handle this in a visit_Call in convert_tests.py instead.
    private static String str(long i) {
        return String.valueOf(i);
    }

    // A hack to concatenate two List<Long>s -- see is_array_add in convert_tests.py.
    private static List<Long> concatLong(List<Long> x, List<Long> y) {
        List<Long> ret = new ArrayList<Long>(x);
        ret.addAll(y);
        return ret;
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        // transform/array.yaml line #5
        // arr = r.expr([1, 2, 3])
        logger.info("Possibly executing: MakeArray arr = (MakeArray) (r.expr(r.array(1L, 2L, 3L)));");
        MakeArray arr = (MakeArray) (r.expr(r.array(1L, 2L, 3L)));

        // transform/array.yaml line #6
        // dupe_arr = r.expr([1, 1, 2, 3])
        logger.info("Possibly executing: MakeArray dupe_arr = (MakeArray) (r.expr(r.array(1L, 1L, 2L, 3L)));");
        MakeArray dupe_arr = (MakeArray) (r.expr(r.array(1L, 1L, 2L, 3L)));

        // transform/array.yaml line #7
        // objArr = r.expr([{'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}])
        logger.info("Possibly executing: MakeArray objArr = (MakeArray) (r.expr(r.array(r.hashMap('a', 1L).with('b', 'a'), r.hashMap('a', 2L).with('b', 'b'), r.hashMap('a', 3L).with('b', 'c'))));");
        MakeArray objArr = (MakeArray) (r.expr(r.array(r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"))));

        // transform/array.yaml line #8
        // nestedObjArr = r.expr([{'a':1, 'b':{'c':1}}, {'a':2, 'b':{'c':2}}, {'a':3, 'b':{'c':3}}])
        logger.info("Possibly executing: MakeArray nestedObjArr = (MakeArray) (r.expr(r.array(r.hashMap('a', 1L).with('b', r.hashMap('c', 1L)), r.hashMap('a', 2L).with('b', r.hashMap('c', 2L)), r.hashMap('a', 3L).with('b', r.hashMap('c', 3L)))));");
        MakeArray nestedObjArr = (MakeArray) (r.expr(r.array(r.hashMap("a", 1L).with("b", r.hashMap("c", 1L)), r.hashMap("a", 2L).with("b", r.hashMap("c", 2L)), r.hashMap("a", 3L).with("b", r.hashMap("c", 3L)))));

        {
            // transform/array.yaml line #12
            /* [1,2,3,4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* arr.append(4) */
            logger.info("About to run line #12: arr.append(4L)");
            Object obtained = runOrCatch(arr.append(4L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #12");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #14
            /* [1,2,3,'a'] */
            List expected_ = r.array(1L, 2L, 3L, "a");
            /* arr.append('a') */
            logger.info("About to run line #14: arr.append('a')");
            Object obtained = runOrCatch(arr.append("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #14");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #19
            /* [0,1,2,3] */
            List expected_ = r.array(0L, 1L, 2L, 3L);
            /* arr.prepend(0) */
            logger.info("About to run line #19: arr.prepend(0L)");
            Object obtained = runOrCatch(arr.prepend(0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #19");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #21
            /* ['a',1,2,3] */
            List expected_ = r.array("a", 1L, 2L, 3L);
            /* arr.prepend('a') */
            logger.info("About to run line #21: arr.prepend('a')");
            Object obtained = runOrCatch(arr.prepend("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #21");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #21:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #26
            /* [3] */
            List expected_ = r.array(3L);
            /* arr.difference([1,2,2]) */
            logger.info("About to run line #26: arr.difference(r.array(1L, 2L, 2L))");
            Object obtained = runOrCatch(arr.difference(r.array(1L, 2L, 2L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #26");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #26:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #28
            /* [1,2,3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* arr.difference([]) */
            logger.info("About to run line #28: arr.difference(r.array())");
            Object obtained = runOrCatch(arr.difference(r.array()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #28");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #30
            /* [1,2,3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* arr.difference(["foo", "bar"]) */
            logger.info("About to run line #30: arr.difference(r.array('foo', 'bar'))");
            Object obtained = runOrCatch(arr.difference(r.array("foo", "bar")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #30");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #34
            /* [1,2,3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* dupe_arr.set_insert(1) */
            logger.info("About to run line #34: dupe_arr.setInsert(1L)");
            Object obtained = runOrCatch(dupe_arr.setInsert(1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #34");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #36
            /* [1,2,3,4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* dupe_arr.set_insert(4) */
            logger.info("About to run line #36: dupe_arr.setInsert(4L)");
            Object obtained = runOrCatch(dupe_arr.setInsert(4L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #36");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #36:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #39
            /* [1,2,3,4,5] */
            List expected_ = r.array(1L, 2L, 3L, 4L, 5L);
            /* dupe_arr.set_union([3,4,5,5]) */
            logger.info("About to run line #39: dupe_arr.setUnion(r.array(3L, 4L, 5L, 5L))");
            Object obtained = runOrCatch(dupe_arr.setUnion(r.array(3L, 4L, 5L, 5L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #39");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #41
            /* [1,2,3,5,6] */
            List expected_ = r.array(1L, 2L, 3L, 5L, 6L);
            /* dupe_arr.set_union([5,6]) */
            logger.info("About to run line #41: dupe_arr.setUnion(r.array(5L, 6L))");
            Object obtained = runOrCatch(dupe_arr.setUnion(r.array(5L, 6L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #41");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #41:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #44
            /* [1,2] */
            List expected_ = r.array(1L, 2L);
            /* dupe_arr.set_intersection([1,1,1,2,2]) */
            logger.info("About to run line #44: dupe_arr.setIntersection(r.array(1L, 1L, 1L, 2L, 2L))");
            Object obtained = runOrCatch(dupe_arr.setIntersection(r.array(1L, 1L, 1L, 2L, 2L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #44");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #46
            /* [] */
            List expected_ = r.array();
            /* dupe_arr.set_intersection(["foo"]) */
            logger.info("About to run line #46: dupe_arr.setIntersection(r.array('foo'))");
            Object obtained = runOrCatch(dupe_arr.setIntersection(r.array("foo")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #46");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #49
            /* [2,3] */
            List expected_ = r.array(2L, 3L);
            /* dupe_arr.set_difference([1,1,1,10]) */
            logger.info("About to run line #49: dupe_arr.setDifference(r.array(1L, 1L, 1L, 10L))");
            Object obtained = runOrCatch(dupe_arr.setDifference(r.array(1L, 1L, 1L, 10L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #49");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #49:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #51
            /* [1,3] */
            List expected_ = r.array(1L, 3L);
            /* dupe_arr.set_difference([2]) */
            logger.info("About to run line #51: dupe_arr.setDifference(r.array(2L))");
            Object obtained = runOrCatch(dupe_arr.setDifference(r.array(2L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #51");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #51:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #58
            /* [2, 3] */
            List expected_ = r.array(2L, 3L);
            /* arr[1:3] */
            logger.info("About to run line #58: arr.slice(1, 3)");
            Object obtained = runOrCatch(arr.slice(1, 3),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #58");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #58:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #59
            /* [2, 3] */
            List expected_ = r.array(2L, 3L);
            /* arr.slice(1, 3) */
            logger.info("About to run line #59: arr.slice(1L, 3L)");
            Object obtained = runOrCatch(arr.slice(1L, 3L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #59");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #59:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #60
            /* [2, 3] */
            List expected_ = r.array(2L, 3L);
            /* arr.slice(1, 2, right_bound='closed') */
            logger.info("About to run line #60: arr.slice(1L, 2L).optArg('right_bound', 'closed')");
            Object obtained = runOrCatch(arr.slice(1L, 2L).optArg("right_bound", "closed"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #60");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #60:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #72
            /* [1,2] */
            List expected_ = r.array(1L, 2L);
            /* arr[:2] */
            logger.info("About to run line #72: arr.slice(0, 2)");
            Object obtained = runOrCatch(arr.slice(0, 2),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #72");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #72:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #73
            /* [1,2] */
            List expected_ = r.array(1L, 2L);
            /* arr.slice(0,2) */
            logger.info("About to run line #73: arr.slice(0L, 2L)");
            Object obtained = runOrCatch(arr.slice(0L, 2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #73");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #73:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #81
            /* [2,3] */
            List expected_ = r.array(2L, 3L);
            /* arr[1:] */
            logger.info("About to run line #81: arr.slice(1, -1).optArg('right_bound', 'closed')");
            Object obtained = runOrCatch(arr.slice(1, -1).optArg("right_bound", "closed"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #81");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #81:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #82
            /* [2,3] */
            List expected_ = r.array(2L, 3L);
            /* arr.slice(1) */
            logger.info("About to run line #82: arr.slice(1L)");
            Object obtained = runOrCatch(arr.slice(1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #82");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #82:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #89
            /* [2] */
            List expected_ = r.array(2L);
            /* arr.slice(-2, -1) */
            logger.info("About to run line #89: arr.slice(-2L, -1L)");
            Object obtained = runOrCatch(arr.slice(-2L, -1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #89");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #89:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #95
            /* [2,3] */
            List expected_ = r.array(2L, 3L);
            /* arr.skip(1) */
            logger.info("About to run line #95: arr.skip(1L)");
            Object obtained = runOrCatch(arr.skip(1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #95");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #95:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #97
            /* [3] */
            List expected_ = r.array(3L);
            /* arr.skip(2) */
            logger.info("About to run line #97: arr.skip(2L)");
            Object obtained = runOrCatch(arr.skip(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #97");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #97:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #99
            /* [] */
            List expected_ = r.array();
            /* arr.skip(12) */
            logger.info("About to run line #99: arr.skip(12L)");
            Object obtained = runOrCatch(arr.skip(12L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #99");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #99:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #104
            /* [1,2] */
            List expected_ = r.array(1L, 2L);
            /* arr.limit(2) */
            logger.info("About to run line #104: arr.limit(2L)");
            Object obtained = runOrCatch(arr.limit(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #104");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #104:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #106
            /* [] */
            List expected_ = r.array();
            /* arr.limit(0) */
            logger.info("About to run line #106: arr.limit(0L)");
            Object obtained = runOrCatch(arr.limit(0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #106");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #106:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #108
            /* [1,2,3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* arr.limit(12) */
            logger.info("About to run line #108: arr.limit(12L)");
            Object obtained = runOrCatch(arr.limit(12L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #108");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #108:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #113
            /* [{'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}] */
            List expected_ = r.array(r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"));
            /* objArr.pluck('a', 'b') */
            logger.info("About to run line #113: objArr.pluck('a', 'b')");
            Object obtained = runOrCatch(objArr.pluck("a", "b"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #113");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #113:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #115
            /* [{'a':1}, {'a':2}, {'a':3}] */
            List expected_ = r.array(r.hashMap("a", 1L), r.hashMap("a", 2L), r.hashMap("a", 3L));
            /* objArr.pluck('a') */
            logger.info("About to run line #115: objArr.pluck('a')");
            Object obtained = runOrCatch(objArr.pluck("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #115");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #115:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #117
            /* [{}, {}, {}] */
            List expected_ = r.array(r.hashMap(), r.hashMap(), r.hashMap());
            /* objArr.pluck() */
            logger.info("About to run line #117: objArr.pluck()");
            Object obtained = runOrCatch(objArr.pluck(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #117");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #117:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // transform/array.yaml line #121
        // wftst = objArr.union(objArr.pluck('a')).union(objArr.pluck('b')).union([{'a':null}])
        logger.info("Possibly executing: Union wftst = (Union) (objArr.union(objArr.pluck('a')).union(objArr.pluck('b')).union(r.array(r.hashMap('a', null))));");
        Union wftst = (Union) (objArr.union(objArr.pluck("a")).union(objArr.pluck("b")).union(r.array(r.hashMap("a", null))));

        {
            // transform/array.yaml line #122
            /* ([{'a':1},{'a':2},{'a':3},{'a':1},{'a':2},{'a':3}]) */
            List expected_ = r.array(r.hashMap("a", 1L), r.hashMap("a", 2L), r.hashMap("a", 3L), r.hashMap("a", 1L), r.hashMap("a", 2L), r.hashMap("a", 3L));
            /* wftst.with_fields('a') */
            logger.info("About to run line #122: wftst.withFields('a')");
            Object obtained = runOrCatch(wftst.withFields("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #122");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #122:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #124
            /* ([{'b':'a'},{'b':'b'},{'b':'c'},{'b':'a'},{'b':'b'},{'b':'c'}]) */
            List expected_ = r.array(r.hashMap("b", "a"), r.hashMap("b", "b"), r.hashMap("b", "c"), r.hashMap("b", "a"), r.hashMap("b", "b"), r.hashMap("b", "c"));
            /* wftst.with_fields('b') */
            logger.info("About to run line #124: wftst.withFields('b')");
            Object obtained = runOrCatch(wftst.withFields("b"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #124");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #124:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #126
            /* ([{'a':1,'b':'a'},{'a':2,'b':'b'},{'a':3,'b':'c'}]) */
            List expected_ = r.array(r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"));
            /* wftst.with_fields('a', 'b') */
            logger.info("About to run line #126: wftst.withFields('a', 'b')");
            Object obtained = runOrCatch(wftst.withFields("a", "b"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #126");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #126:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #128
            /* [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}] */
            List expected_ = r.array(r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap(), r.hashMap());
            /* wftst.with_fields() */
            logger.info("About to run line #128: wftst.withFields()");
            Object obtained = runOrCatch(wftst.withFields(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #128");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #128:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // transform/array.yaml line #131
        // wftst2 = nestedObjArr.union(objArr.pluck({'b':'missing'})).union(nestedObjArr.pluck({'b':'c'}))
        logger.info("Possibly executing: Union wftst2 = (Union) (nestedObjArr.union(objArr.pluck(r.hashMap('b', 'missing'))).union(nestedObjArr.pluck(r.hashMap('b', 'c'))));");
        Union wftst2 = (Union) (nestedObjArr.union(objArr.pluck(r.hashMap("b", "missing"))).union(nestedObjArr.pluck(r.hashMap("b", "c"))));

        {
            // transform/array.yaml line #132
            /* ([{'b':{'c':1}}, {'b':{'c':2}}, {'b':{'c':3}}, {'b':{'c':1}}, {'b':{'c':2}}, {'b':{'c':3}}]) */
            List expected_ = r.array(r.hashMap("b", r.hashMap("c", 1L)), r.hashMap("b", r.hashMap("c", 2L)), r.hashMap("b", r.hashMap("c", 3L)), r.hashMap("b", r.hashMap("c", 1L)), r.hashMap("b", r.hashMap("c", 2L)), r.hashMap("b", r.hashMap("c", 3L)));
            /* wftst2.with_fields({'b':'c'}) */
            logger.info("About to run line #132: wftst2.withFields(r.hashMap('b', 'c'))");
            Object obtained = runOrCatch(wftst2.withFields(r.hashMap("b", "c")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #132");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #132:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #135
            /* err("ReqlQueryLogicError", "Invalid path argument `1`.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Invalid path argument `1`.", r.array());
            /* wftst.with_fields(1) */
            logger.info("About to run line #135: wftst.withFields(1L)");
            Object obtained = runOrCatch(wftst.withFields(1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #135");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #135:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #137
            /* err("ReqlQueryLogicError", "Cannot perform has_fields on a non-object non-sequence `1`.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot perform has_fields on a non-object non-sequence `1`.", r.array());
            /* r.expr(1).with_fields() */
            logger.info("About to run line #137: r.expr(1L).withFields()");
            Object obtained = runOrCatch(r.expr(1L).withFields(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #137");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #137:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #142
            /* [{}, {}, {}] */
            List expected_ = r.array(r.hashMap(), r.hashMap(), r.hashMap());
            /* objArr.without('a', 'b') */
            logger.info("About to run line #142: objArr.without('a', 'b')");
            Object obtained = runOrCatch(objArr.without("a", "b"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #142");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #142:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #144
            /* [{'b':'a'}, {'b':'b'}, {'b':'c'}] */
            List expected_ = r.array(r.hashMap("b", "a"), r.hashMap("b", "b"), r.hashMap("b", "c"));
            /* objArr.without('a') */
            logger.info("About to run line #144: objArr.without('a')");
            Object obtained = runOrCatch(objArr.without("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #144");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #144:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #146
            /* [{'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}] */
            List expected_ = r.array(r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"));
            /* objArr.without() */
            logger.info("About to run line #146: objArr.without()");
            Object obtained = runOrCatch(objArr.without(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #146");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #146:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #151
            /* [2,3,4] */
            List expected_ = r.array(2L, 3L, 4L);
            /* arr.map(lambda v: v + 1) */
            logger.info("About to run line #151: arr.map(v -> r.add(v, 1L))");
            Object obtained = runOrCatch(arr.map(v -> r.add(v, 1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #151");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #151:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #161
            /* 6 */
            Long expected_ = 6L;
            /* arr.reduce(lambda a, b: a + b) */
            logger.info("About to run line #161: arr.reduce((a, b) -> r.add(a, b))");
            Object obtained = runOrCatch(arr.reduce((a, b) -> r.add(a, b)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #161");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #161:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #166
            /* 6 */
            Long expected_ = 6L;
            /* arr.reduce(lambda a, b:a + b) */
            logger.info("About to run line #166: arr.reduce((a, b) -> r.add(a, b))");
            Object obtained = runOrCatch(arr.reduce((a, b) -> r.add(a, b)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #166");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #166:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #171
            /* 12 */
            Long expected_ = 12L;
            /* arr.union(arr).reduce(lambda a, b: a + b) */
            logger.info("About to run line #171: arr.union(arr).reduce((a, b) -> r.add(a, b))");
            Object obtained = runOrCatch(arr.union(arr).reduce((a, b) -> r.add(a, b)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #171");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #171:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #176
            /* 12 */
            Long expected_ = 12L;
            /* arr.union(arr).reduce(lambda a, b:a + b) */
            logger.info("About to run line #176: arr.union(arr).reduce((a, b) -> r.add(a, b))");
            Object obtained = runOrCatch(arr.union(arr).reduce((a, b) -> r.add(a, b)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #176");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #176:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #183
            /* [{'a':2, 'b':'b'}] */
            List expected_ = r.array(r.hashMap("a", 2L).with("b", "b"));
            /* objArr.filter(lambda row: row['b'] == 'b') */
            logger.info("About to run line #183: objArr.filter(row -> row.bracket('b').eq('b'))");
            Object obtained = runOrCatch(objArr.filter(row -> row.bracket("b").eq("b")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #183");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #183:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #190
            /* [1,2,1,2,1,2] */
            List expected_ = r.array(1L, 2L, 1L, 2L, 1L, 2L);
            /* arr.concat_map(lambda v: [1,2]) */
            logger.info("About to run line #190: arr.concatMap(v -> r.array(1L, 2L))");
            Object obtained = runOrCatch(arr.concatMap(v -> r.array(1L, 2L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #190");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #190:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #194
            /* [{'v':1}, {'v2':2}, {'v':2}, {'v2':3}, {'v':3}, {'v2':4}] */
            List expected_ = r.array(r.hashMap("v", 1L), r.hashMap("v2", 2L), r.hashMap("v", 2L), r.hashMap("v2", 3L), r.hashMap("v", 3L), r.hashMap("v2", 4L));
            /* arr.concat_map(lambda v: [{'v':v}, {'v2':v + 1}]) */
            logger.info("About to run line #194: arr.concatMap(v -> r.array(r.hashMap('v', v), r.hashMap('v2', r.add(v, 1L))))");
            Object obtained = runOrCatch(arr.concatMap(v -> r.array(r.hashMap("v", v), r.hashMap("v2", r.add(v, 1L)))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #194");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #194:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #201
            /* [{'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}] */
            List expected_ = r.array(r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"));
            /* objArr.order_by('b') */
            logger.info("About to run line #201: objArr.orderBy('b')");
            Object obtained = runOrCatch(objArr.orderBy("b"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #201");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #201:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #205
            /* [{'a':3, 'b':'c'}, {'a':2, 'b':'b'}, {'a':1, 'b':'a'}] */
            List expected_ = r.array(r.hashMap("a", 3L).with("b", "c"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 1L).with("b", "a"));
            /* objArr.order_by(r.desc('b')) */
            logger.info("About to run line #205: objArr.orderBy(r.desc('b'))");
            Object obtained = runOrCatch(objArr.orderBy(r.desc("b")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #205");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #205:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #208
            /* [{'-a':1},{'-a':2}] */
            List expected_ = r.array(r.hashMap("-a", 1L), r.hashMap("-a", 2L));
            /* r.expr([{'-a':1},{'-a':2}]).order_by('-a') */
            logger.info("About to run line #208: r.expr(r.array(r.hashMap('-a', 1L), r.hashMap('-a', 2L))).orderBy('-a')");
            Object obtained = runOrCatch(r.expr(r.array(r.hashMap("-a", 1L), r.hashMap("-a", 2L))).orderBy("-a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #208");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #208:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #216
            /* [1,2,3,4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,1,2,2,2,3,4]).distinct() */
            logger.info("About to run line #216: r.expr(r.array(1L, 1L, 2L, 2L, 2L, 3L, 4L)).distinct()");
            Object obtained = runOrCatch(r.expr(r.array(1L, 1L, 2L, 2L, 2L, 3L, 4L)).distinct(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #216");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #216:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #223
            /* 3 */
            Long expected_ = 3L;
            /* objArr.count() */
            logger.info("About to run line #223: objArr.count()");
            Object obtained = runOrCatch(objArr.count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #223");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #223:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #228
            /* [1, 2, 3, {'a':1, 'b':'a'}, {'a':2, 'b':'b'}, {'a':3, 'b':'c'}] */
            List expected_ = r.array(1L, 2L, 3L, r.hashMap("a", 1L).with("b", "a"), r.hashMap("a", 2L).with("b", "b"), r.hashMap("a", 3L).with("b", "c"));
            /* arr.union(objArr) */
            logger.info("About to run line #228: arr.union(objArr)");
            Object obtained = runOrCatch(arr.union(objArr),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #228");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #228:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #234
            /* 2 */
            Long expected_ = 2L;
            /* arr[1] */
            logger.info("About to run line #234: arr.bracket(1L)");
            Object obtained = runOrCatch(arr.bracket(1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #234");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #234:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #235
            /* 2 */
            Long expected_ = 2L;
            /* arr.nth(1) */
            logger.info("About to run line #235: arr.nth(1L)");
            Object obtained = runOrCatch(arr.nth(1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #235");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #235:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #238
            /* 1 */
            Long expected_ = 1L;
            /* arr[0] */
            logger.info("About to run line #238: arr.bracket(0L)");
            Object obtained = runOrCatch(arr.bracket(0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #238");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #238:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #245
            /* true */
            Boolean expected_ = true;
            /* r.expr([]).is_empty() */
            logger.info("About to run line #245: r.expr(r.array()).isEmpty()");
            Object obtained = runOrCatch(r.expr(r.array()).isEmpty(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #245");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #245:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #247
            /* false */
            Boolean expected_ = false;
            /* arr.is_empty() */
            logger.info("About to run line #247: arr.isEmpty()");
            Object obtained = runOrCatch(arr.isEmpty(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #247");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #247:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #251
            /* true */
            Boolean expected_ = true;
            /* arr.contains(2) */
            logger.info("About to run line #251: arr.contains(2L)");
            Object obtained = runOrCatch(arr.contains(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #251");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #251:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #253
            /* true */
            Boolean expected_ = true;
            /* arr.contains(2, 3) */
            logger.info("About to run line #253: arr.contains(2L, 3L)");
            Object obtained = runOrCatch(arr.contains(2L, 3L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #253");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #253:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #255
            /* false */
            Boolean expected_ = false;
            /* arr.contains(4) */
            logger.info("About to run line #255: arr.contains(4L)");
            Object obtained = runOrCatch(arr.contains(4L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #255");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #255:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #257
            /* false */
            Boolean expected_ = false;
            /* arr.contains(2, 4) */
            logger.info("About to run line #257: arr.contains(2L, 4L)");
            Object obtained = runOrCatch(arr.contains(2L, 4L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #257");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #257:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #259
            /* false */
            Boolean expected_ = false;
            /* arr.contains(2, 2) */
            logger.info("About to run line #259: arr.contains(2L, 2L)");
            Object obtained = runOrCatch(arr.contains(2L, 2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #259");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #259:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #261
            /* true */
            Boolean expected_ = true;
            /* arr.union(arr).contains(2, 2) */
            logger.info("About to run line #261: arr.union(arr).contains(2L, 2L)");
            Object obtained = runOrCatch(arr.union(arr).contains(2L, 2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #261");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #261:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #265
            /* true */
            Boolean expected_ = true;
            /* arr.contains(lambda x:x == 2) */
            logger.info("About to run line #265: arr.contains(x -> r.eq(x, 2L))");
            Object obtained = runOrCatch(arr.contains(x -> r.eq(x, 2L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #265");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #265:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #269
            /* true */
            Boolean expected_ = true;
            /* arr.contains(lambda x:x == 2, lambda x:x==3) */
            logger.info("About to run line #269: arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 3L))");
            Object obtained = runOrCatch(arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 3L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #269");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #269:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #273
            /* false */
            Boolean expected_ = false;
            /* arr.contains(lambda x:x == 4) */
            logger.info("About to run line #273: arr.contains(x -> r.eq(x, 4L))");
            Object obtained = runOrCatch(arr.contains(x -> r.eq(x, 4L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #273");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #273:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #277
            /* false */
            Boolean expected_ = false;
            /* arr.contains(lambda x:x == 2, lambda x:x==4) */
            logger.info("About to run line #277: arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 4L))");
            Object obtained = runOrCatch(arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 4L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #277");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #277:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #281
            /* false */
            Boolean expected_ = false;
            /* arr.contains(lambda x:x == 2, lambda x:x==2) */
            logger.info("About to run line #281: arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 2L))");
            Object obtained = runOrCatch(arr.contains(x -> r.eq(x, 2L), x -> r.eq(x, 2L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #281");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #281:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #285
            /* true */
            Boolean expected_ = true;
            /* arr.union(arr).contains(lambda x:x == 2, lambda x:x==2) */
            logger.info("About to run line #285: arr.union(arr).contains(x -> r.eq(x, 2L), x -> r.eq(x, 2L))");
            Object obtained = runOrCatch(arr.union(arr).contains(x -> r.eq(x, 2L), x -> r.eq(x, 2L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #285");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #285:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #290
            /* [1, 3] */
            List expected_ = r.array(1L, 3L);
            /* r.expr([{'a':1},{'b':2},{'a':3,'c':4}])['a'] */
            logger.info("About to run line #290: r.expr(r.array(r.hashMap('a', 1L), r.hashMap('b', 2L), r.hashMap('a', 3L).with('c', 4L))).bracket('a')");
            Object obtained = runOrCatch(r.expr(r.array(r.hashMap("a", 1L), r.hashMap("b", 2L), r.hashMap("a", 3L).with("c", 4L))).bracket("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #290");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #290:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/array.yaml line #293
            /* err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", r.array());
            /* r.expr([{'a':1},'a',{'b':2},{'a':3,'c':4}])['a'] */
            logger.info("About to run line #293: r.expr(r.array(r.hashMap('a', 1L), 'a', r.hashMap('b', 2L), r.hashMap('a', 3L).with('c', 4L))).bracket('a')");
            Object obtained = runOrCatch(r.expr(r.array(r.hashMap("a", 1L), "a", r.hashMap("b", 2L), r.hashMap("a", 3L).with("c", 4L))).bracket("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #293");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #293:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
