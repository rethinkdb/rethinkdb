// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class GeoPrimitives {
    // Test geometric primitive constructors
    Logger logger = LoggerFactory.getLogger(GeoPrimitives.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Matches Python's str() function, which we use.
    // TODO: We might want to handle this in a visit_Call in convert_tests.py instead.
    private static String str(long i) {
        return String.valueOf(i);
    }

    // A hack to concatenate two List<Long>s -- see is_array_add in convert_tests.py.
    private static List<Long> concatLong(List<Long> x, List<Long> y) {
        List<Long> ret = new ArrayList<Long>(x);
        ret.addAll(y);
        return ret;
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        {
            // geo/primitives.yaml line #5
            /* ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0, -9.04369477050382e-06], [-7.779638566553426e-06, 4.5218473852518965e-06], [7.779638566553426e-06, 4.5218473852518965e-06], [0, -9.04369477050382e-06]]], 'type':'Polygon'}) */
            Map expected_ = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(r.array(r.array(0L, -9.04369477050382e-06), r.array(-7.779638566553426e-06, 4.5218473852518965e-06), r.array(7.779638566553426e-06, 4.5218473852518965e-06), r.array(0L, -9.04369477050382e-06)))).with("type", "Polygon");
            /* r.circle([0,0], 1, num_vertices=3) */
            logger.info("About to run line #5: r.circle(r.array(0L, 0L), 1L).optArg('num_vertices', 3L)");
            Object obtained = runOrCatch(r.circle(r.array(0L, 0L), 1L).optArg("num_vertices", 3L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #5");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/primitives.yaml line #10
            /* ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0, -9.04369477050382e-06], [-7.779638566553426e-06, 4.5218473852518965e-06], [7.779638566553426e-06, 4.5218473852518965e-06], [0, -9.04369477050382e-06]]], 'type':'Polygon'}) */
            Map expected_ = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(r.array(r.array(0L, -9.04369477050382e-06), r.array(-7.779638566553426e-06, 4.5218473852518965e-06), r.array(7.779638566553426e-06, 4.5218473852518965e-06), r.array(0L, -9.04369477050382e-06)))).with("type", "Polygon");
            /* r.circle(r.point(0,0), 1, num_vertices=3) */
            logger.info("About to run line #10: r.circle(r.point(0L, 0L), 1L).optArg('num_vertices', 3L)");
            Object obtained = runOrCatch(r.circle(r.point(0L, 0L), 1L).optArg("num_vertices", 3L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #10");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/primitives.yaml line #15
            /* ({'$reql_type$':'GEOMETRY', 'coordinates':[[0, -9.04369477050382e-06], [-7.779638566553426e-06, 4.5218473852518965e-06], [7.779638566553426e-06, 4.5218473852518965e-06], [0, -9.04369477050382e-06]], 'type':'LineString'}) */
            Map expected_ = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(r.array(0L, -9.04369477050382e-06), r.array(-7.779638566553426e-06, 4.5218473852518965e-06), r.array(7.779638566553426e-06, 4.5218473852518965e-06), r.array(0L, -9.04369477050382e-06))).with("type", "LineString");
            /* r.circle([0,0], 1, num_vertices=3, fill=false) */
            logger.info("About to run line #15: r.circle(r.array(0L, 0L), 1L).optArg('num_vertices', 3L).optArg('fill', false)");
            Object obtained = runOrCatch(r.circle(r.array(0L, 0L), 1L).optArg("num_vertices", 3L).optArg("fill", false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #15");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #15:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/primitives.yaml line #20
            /* err('ReqlQueryLogicError', 'Radius must be smaller than a quarter of the circumference along the minor axis of the reference ellipsoid.  Got 14000000m, but must be smaller than 9985163.1855612862855m.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Radius must be smaller than a quarter of the circumference along the minor axis of the reference ellipsoid.  Got 14000000m, but must be smaller than 9985163.1855612862855m.", r.array(0L));
            /* r.circle([0,0], 14000000, num_vertices=3) */
            logger.info("About to run line #20: r.circle(r.array(0L, 0L), 14000000L).optArg('num_vertices', 3L)");
            Object obtained = runOrCatch(r.circle(r.array(0L, 0L), 14000000L).optArg("num_vertices", 3L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #20");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/primitives.yaml line #25
            /* ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0, -9.04369477050382e-06], [-7.779638566553426e-06, 4.5218473852518965e-06], [7.779638566553426e-06, 4.5218473852518965e-06], [0, -9.04369477050382e-06]]], 'type':'Polygon'}) */
            Map expected_ = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(r.array(r.array(0L, -9.04369477050382e-06), r.array(-7.779638566553426e-06, 4.5218473852518965e-06), r.array(7.779638566553426e-06, 4.5218473852518965e-06), r.array(0L, -9.04369477050382e-06)))).with("type", "Polygon");
            /* r.circle([0,0], 1, num_vertices=3, geo_system='WGS84') */
            logger.info("About to run line #25: r.circle(r.array(0L, 0L), 1L).optArg('num_vertices', 3L).optArg('geo_system', 'WGS84')");
            Object obtained = runOrCatch(r.circle(r.array(0L, 0L), 1L).optArg("num_vertices", 3L).optArg("geo_system", "WGS84"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #25");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/primitives.yaml line #30
            /* err('ReqlQueryLogicError', 'Radius must be smaller than a quarter of the circumference along the minor axis of the reference ellipsoid.  Got 2m, but must be smaller than 1.570796326794896558m.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Radius must be smaller than a quarter of the circumference along the minor axis of the reference ellipsoid.  Got 2m, but must be smaller than 1.570796326794896558m.", r.array(0L));
            /* r.circle([0,0], 2, num_vertices=3, geo_system='unit_sphere') */
            logger.info("About to run line #30: r.circle(r.array(0L, 0L), 2L).optArg('num_vertices', 3L).optArg('geo_system', 'unit_sphere')");
            Object obtained = runOrCatch(r.circle(r.array(0L, 0L), 2L).optArg("num_vertices", 3L).optArg("geo_system", "unit_sphere"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #30");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #30:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/primitives.yaml line #35
            /* ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0, -5.729577951308232], [-4.966092947444857, 2.861205754495701], [4.966092947444857, 2.861205754495701], [0, -5.729577951308232]]], 'type':'Polygon'}) */
            Map expected_ = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(r.array(r.array(0L, -5.729577951308232), r.array(-4.966092947444857, 2.861205754495701), r.array(4.966092947444857, 2.861205754495701), r.array(0L, -5.729577951308232)))).with("type", "Polygon");
            /* r.circle([0,0], 0.1, num_vertices=3, geo_system='unit_sphere') */
            logger.info("About to run line #35: r.circle(r.array(0L, 0L), 0.1).optArg('num_vertices', 3L).optArg('geo_system', 'unit_sphere')");
            Object obtained = runOrCatch(r.circle(r.array(0L, 0L), 0.1).optArg("num_vertices", 3L).optArg("geo_system", "unit_sphere"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #35");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #35:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/primitives.yaml line #42
            /* ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0, -9.04369477050382e-06], [-7.779638566553426e-06, 4.5218473852518965e-06], [7.779638566553426e-06, 4.5218473852518965e-06], [0, -9.04369477050382e-06]]], 'type':'Polygon'}) */
            Map expected_ = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(r.array(r.array(0L, -9.04369477050382e-06), r.array(-7.779638566553426e-06, 4.5218473852518965e-06), r.array(7.779638566553426e-06, 4.5218473852518965e-06), r.array(0L, -9.04369477050382e-06)))).with("type", "Polygon");
            /* r.circle([0,0], 1.0/1000.0, num_vertices=3, unit='km') */
            logger.info("About to run line #42: r.circle(r.array(0L, 0L), r.div(1.0, 1000.0)).optArg('num_vertices', 3L).optArg('unit', 'km')");
            Object obtained = runOrCatch(r.circle(r.array(0L, 0L), r.div(1.0, 1000.0)).optArg("num_vertices", 3L).optArg("unit", "km"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #42");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #42:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // geo/primitives.yaml line #47
            /* ({'$reql_type$':'GEOMETRY', 'coordinates':[[[0, -9.04369477050382e-06], [-7.779638566553426e-06, 4.5218473852518965e-06], [7.779638566553426e-06, 4.5218473852518965e-06], [0, -9.04369477050382e-06]]], 'type':'Polygon'}) */
            Map expected_ = r.hashMap("$reql_type$", "GEOMETRY").with("coordinates", r.array(r.array(r.array(0L, -9.04369477050382e-06), r.array(-7.779638566553426e-06, 4.5218473852518965e-06), r.array(7.779638566553426e-06, 4.5218473852518965e-06), r.array(0L, -9.04369477050382e-06)))).with("type", "Polygon");
            /* r.circle([0,0], 1.0/1609.344, num_vertices=3, unit='mi') */
            logger.info("About to run line #47: r.circle(r.array(0L, 0L), r.div(1.0, 1609.344)).optArg('num_vertices', 3L).optArg('unit', 'mi')");
            Object obtained = runOrCatch(r.circle(r.array(0L, 0L), r.div(1.0, 1609.344)).optArg("num_vertices", 3L).optArg("unit", "mi"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #47");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #47:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
