// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class Default {
    // Tests r.default
    Logger logger = LoggerFactory.getLogger(Default.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Matches Python's str() function, which we use.
    // TODO: We might want to handle this in a visit_Call in convert_tests.py instead.
    private static String str(long i) {
        return String.valueOf(i);
    }

    // A hack to concatenate two List<Long>s -- see is_array_add in convert_tests.py.
    private static List<Long> concatLong(List<Long> x, List<Long> y) {
        List<Long> ret = new ArrayList<Long>(x);
        ret.addAll(y);
        return ret;
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        {
            // default.yaml line #3
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(1).default(2) */
            logger.info("About to run line #3: r.expr(1L).default_(2L)");
            Object obtained = runOrCatch(r.expr(1L).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #3");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #5
            /* 2 */
            Long expected_ = 2L;
            /* r.expr(null).default(2) */
            logger.info("About to run line #5: r.expr((ReqlExpr) null).default_(2L)");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #5");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #7
            /* 2 */
            Long expected_ = 2L;
            /* r.expr({})['b'].default(2) */
            logger.info("About to run line #7: r.expr(r.hashMap()).bracket('b').default_(2L)");
            Object obtained = runOrCatch(r.expr(r.hashMap()).bracket("b").default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #7");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #10
            /* err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", r.array());
            /* r.expr(r.expr('a')['b']).default(2) */
            logger.info("About to run line #10: r.expr(r.expr('a').bracket('b')).default_(2L)");
            Object obtained = runOrCatch(r.expr(r.expr("a").bracket("b")).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #10");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #14
            /* 2 */
            Long expected_ = 2L;
            /* r.expr([]).reduce(lambda a,b:a+b).default(2) */
            logger.info("About to run line #14: r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(2L)");
            Object obtained = runOrCatch(r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #14");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #18
            /* 2 */
            Long expected_ = 2L;
            /* r.expr([]).union([]).reduce(lambda a,b:a+b).default(2) */
            logger.info("About to run line #18: r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(2L)");
            Object obtained = runOrCatch(r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #18");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #22
            /* err("ReqlQueryLogicError", "Cannot convert STRING to SEQUENCE", []) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot convert STRING to SEQUENCE", r.array());
            /* r.expr('a').reduce(lambda a,b:a+b).default(2) */
            logger.info("About to run line #22: r.expr('a').reduce((a, b) -> r.add(a, b)).default_(2L)");
            Object obtained = runOrCatch(r.expr("a").reduce((a, b) -> r.add(a, b)).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #22");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #25
            /* 2 */
            Long expected_ = 2L;
            /* (r.expr(null) + 5).default(2) */
            logger.info("About to run line #25: r.expr((ReqlExpr) null).add(5L).default_(2L)");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).add(5L).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #25");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #28
            /* 2 */
            Long expected_ = 2L;
            /* (5 + r.expr(null)).default(2) */
            logger.info("About to run line #28: r.add(5L, r.expr((ReqlExpr) null)).default_(2L)");
            Object obtained = runOrCatch(r.add(5L, r.expr((ReqlExpr) null)).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #28");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #31
            /* 2 */
            Long expected_ = 2L;
            /* (5 - r.expr(null)).default(2) */
            logger.info("About to run line #31: r.sub(5L, r.expr((ReqlExpr) null)).default_(2L)");
            Object obtained = runOrCatch(r.sub(5L, r.expr((ReqlExpr) null)).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #31");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #34
            /* 2 */
            Long expected_ = 2L;
            /* (r.expr(null) - 5).default(2) */
            logger.info("About to run line #34: r.expr((ReqlExpr) null).sub(5L).default_(2L)");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).sub(5L).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #34");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #37
            /* err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", r.array());
            /* (r.expr('a') + 5).default(2) */
            logger.info("About to run line #37: r.expr('a').add(5L).default_(2L)");
            Object obtained = runOrCatch(r.expr("a").add(5L).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #37");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #40
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
            /* (5 + r.expr('a')).default(2) */
            logger.info("About to run line #40: r.add(5L, r.expr('a')).default_(2L)");
            Object obtained = runOrCatch(r.add(5L, r.expr("a")).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #40");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #43
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
            /* (r.expr('a') - 5).default(2) */
            logger.info("About to run line #43: r.expr('a').sub(5L).default_(2L)");
            Object obtained = runOrCatch(r.expr("a").sub(5L).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #43");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #43:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #46
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
            /* (5 - r.expr('a')).default(2) */
            logger.info("About to run line #46: r.sub(5L, r.expr('a')).default_(2L)");
            Object obtained = runOrCatch(r.sub(5L, r.expr("a")).default_(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #46");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #50
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(1).default(r.error()) */
            logger.info("About to run line #50: r.expr(1L).default_(r.error())");
            Object obtained = runOrCatch(r.expr(1L).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #50");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #52
            /* (null) */
            Object expected_ = null;
            /* r.expr(null).default(r.error()) */
            logger.info("About to run line #52: r.expr((ReqlExpr) null).default_(r.error())");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #52");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #52:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #54
            /* err("ReqlNonExistenceError", "No attribute `b` in object:", []) */
            Err expected_ = err("ReqlNonExistenceError", "No attribute `b` in object:", r.array());
            /* r.expr({})['b'].default(r.error()) */
            logger.info("About to run line #54: r.expr(r.hashMap()).bracket('b').default_(r.error())");
            Object obtained = runOrCatch(r.expr(r.hashMap()).bracket("b").default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #54");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #54:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #58
            /* err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", []) */
            Err expected_ = err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", r.array());
            /* r.expr([]).reduce(lambda a,b:a+b).default(r.error) */
            logger.info("About to run line #58: r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(r.error())");
            Object obtained = runOrCatch(r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #58");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #58:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #62
            /* err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", []) */
            Err expected_ = err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", r.array());
            /* r.expr([]).union([]).reduce(lambda a,b:a+b).default(r.error) */
            logger.info("About to run line #62: r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(r.error())");
            Object obtained = runOrCatch(r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #62");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #62:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #65
            /* err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", []) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array());
            /* (r.expr(null) + 5).default(r.error) */
            logger.info("About to run line #65: r.expr((ReqlExpr) null).add(5L).default_(r.error())");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).add(5L).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #65");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #65:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #68
            /* err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", []) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array());
            /* (5 + r.expr(null)).default(r.error) */
            logger.info("About to run line #68: r.add(5L, r.expr((ReqlExpr) null)).default_(r.error())");
            Object obtained = runOrCatch(r.add(5L, r.expr((ReqlExpr) null)).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #68");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #68:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #71
            /* err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", []) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array());
            /* (5 - r.expr(null)).default(r.error) */
            logger.info("About to run line #71: r.sub(5L, r.expr((ReqlExpr) null)).default_(r.error())");
            Object obtained = runOrCatch(r.sub(5L, r.expr((ReqlExpr) null)).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #71");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #71:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #74
            /* err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", []) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array());
            /* (r.expr(null) - 5).default(r.error) */
            logger.info("About to run line #74: r.expr((ReqlExpr) null).sub(5L).default_(r.error())");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).sub(5L).default_(r.error()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #74");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #74:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #79
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(1).default(lambda e:e) */
            logger.info("About to run line #79: r.expr(1L).default_(e -> e)");
            Object obtained = runOrCatch(r.expr(1L).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #79");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #79:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #83
            /* (null) */
            Object expected_ = null;
            /* r.expr(null).default(lambda e:e) */
            logger.info("About to run line #83: r.expr((ReqlExpr) null).default_(e -> e)");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #83");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #83:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #87
            /* "No attribute `b` in object:\n{}" */
            String expected_ = "No attribute `b` in object:\n{}";
            /* r.expr({})['b'].default(lambda e:e) */
            logger.info("About to run line #87: r.expr(r.hashMap()).bracket('b').default_(e -> e)");
            Object obtained = runOrCatch(r.expr(r.hashMap()).bracket("b").default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #87");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #87:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #91
            /* ("Cannot reduce over an empty stream.") */
            String expected_ = "Cannot reduce over an empty stream.";
            /* r.expr([]).reduce(lambda a,b:a+b).default(lambda e:e) */
            logger.info("About to run line #91: r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(e -> e)");
            Object obtained = runOrCatch(r.expr(r.array()).reduce((a, b) -> r.add(a, b)).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #91");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #91:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #95
            /* ("Cannot reduce over an empty stream.") */
            String expected_ = "Cannot reduce over an empty stream.";
            /* r.expr([]).union([]).reduce(lambda a,b:a+b).default(lambda e:e) */
            logger.info("About to run line #95: r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(e -> e)");
            Object obtained = runOrCatch(r.expr(r.array()).union(r.array()).reduce((a, b) -> r.add(a, b)).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #95");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #95:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #99
            /* ("Expected type NUMBER but found NULL.") */
            String expected_ = "Expected type NUMBER but found NULL.";
            /* (r.expr(null) + 5).default(lambda e:e) */
            logger.info("About to run line #99: r.expr((ReqlExpr) null).add(5L).default_(e -> e)");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).add(5L).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #99");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #99:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #103
            /* ("Expected type NUMBER but found NULL.") */
            String expected_ = "Expected type NUMBER but found NULL.";
            /* (5 + r.expr(null)).default(lambda e:e) */
            logger.info("About to run line #103: r.add(5L, r.expr((ReqlExpr) null)).default_(e -> e)");
            Object obtained = runOrCatch(r.add(5L, r.expr((ReqlExpr) null)).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #103");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #103:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #107
            /* ("Expected type NUMBER but found NULL.") */
            String expected_ = "Expected type NUMBER but found NULL.";
            /* (5 - r.expr(null)).default(lambda e:e) */
            logger.info("About to run line #107: r.sub(5L, r.expr((ReqlExpr) null)).default_(e -> e)");
            Object obtained = runOrCatch(r.sub(5L, r.expr((ReqlExpr) null)).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #107");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #107:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #111
            /* ("Expected type NUMBER but found NULL.") */
            String expected_ = "Expected type NUMBER but found NULL.";
            /* (r.expr(null) - 5).default(lambda e:e) */
            logger.info("About to run line #111: r.expr((ReqlExpr) null).sub(5L).default_(e -> e)");
            Object obtained = runOrCatch(r.expr((ReqlExpr) null).sub(5L).default_(e -> e),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #111");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #111:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // default.yaml line #115
        // arr = r.expr([{'a':1},{'a':null},{}]).order_by('a')
        logger.info("Possibly executing: OrderBy arr = (OrderBy) (r.expr(r.array(r.hashMap('a', 1L), r.hashMap('a', null), r.hashMap())).orderBy('a'));");
        OrderBy arr = (OrderBy) (r.expr(r.array(r.hashMap("a", 1L), r.hashMap("a", null), r.hashMap())).orderBy("a"));

        {
            // default.yaml line #118
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].eq(1)) */
            logger.info("About to run line #118: arr.filter(x -> x.bracket('a').eq(1L))");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").eq(1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #118");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #118:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #122
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].eq(1), default=False) */
            logger.info("About to run line #122: arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', false)");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #122");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #122:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #126
            /* [{}, {'a':1}] */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].eq(1), default=True) */
            logger.info("About to run line #126: arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', true)");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #126");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #126:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #131
            /* [{}, {'a':1}] */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].eq(1), default=r.js('true')) */
            logger.info("About to run line #131: arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', r.js('true'))");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", r.js("true")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #131");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #131:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #135
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].eq(1), default=r.js('false')) */
            logger.info("About to run line #135: arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', r.js('false'))");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", r.js("false")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #135");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #135:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #139
            /* err("ReqlNonExistenceError", "No attribute `a` in object:", []) */
            Err expected_ = err("ReqlNonExistenceError", "No attribute `a` in object:", r.array());
            /* arr.filter(lambda x:x['a'].eq(1), default=r.error()) */
            logger.info("About to run line #139: arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', r.error())");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", r.error()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #139");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #139:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #144
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* r.expr(False).do(lambda d:arr.filter(lambda x:x['a'].eq(1), default=d)) */
            logger.info("About to run line #144: r.expr(false).do_(d -> arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', d))");
            Object obtained = runOrCatch(r.expr(false).do_(d -> arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", d)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #144");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #144:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #148
            /* [{}, {'a':1}] */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", 1L));
            /* r.expr(True).do(lambda d:arr.filter(lambda x:x['a'].eq(1), default=d)).order_by('a') */
            logger.info("About to run line #148: r.expr(true).do_(d -> arr.filter(x -> x.bracket('a').eq(1L)).optArg('default', d)).orderBy('a')");
            Object obtained = runOrCatch(r.expr(true).do_(d -> arr.filter(x -> x.bracket("a").eq(1L)).optArg("default", d)).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #148");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #148:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #154
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].default(0).eq(1)) */
            logger.info("About to run line #154: arr.filter(x -> x.bracket('a').default_(0L).eq(1L))");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").default_(0L).eq(1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #154");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #154:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #158
            /* ([{}, {'a':null}, {'a':1}]) */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].default(1).eq(1)).order_by('a') */
            logger.info("About to run line #158: arr.filter(x -> x.bracket('a').default_(1L).eq(1L)).orderBy('a')");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").default_(1L).eq(1L)).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #158");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #158:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #162
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:x['a'].default(r.error()).eq(1)) */
            logger.info("About to run line #162: arr.filter(x -> x.bracket('a').default_(r.error()).eq(1L))");
            Object obtained = runOrCatch(arr.filter(x -> x.bracket("a").default_(r.error()).eq(1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #162");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #162:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #168
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* r.expr(0).do(lambda i:arr.filter(lambda x:x['a'].default(i).eq(1))) */
            logger.info("About to run line #168: r.expr(0L).do_(i -> arr.filter(x -> x.bracket('a').default_(i).eq(1L)))");
            Object obtained = runOrCatch(r.expr(0L).do_(i -> arr.filter(x -> x.bracket("a").default_(i).eq(1L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #168");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #168:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #172
            /* ([{},{'a':null},{'a':1}]) */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L));
            /* r.expr(1).do(lambda i:arr.filter(lambda x:x['a'].default(i).eq(1))).order_by('a') */
            logger.info("About to run line #172: r.expr(1L).do_(i -> arr.filter(x -> x.bracket('a').default_(i).eq(1L))).orderBy('a')");
            Object obtained = runOrCatch(r.expr(1L).do_(i -> arr.filter(x -> x.bracket("a").default_(i).eq(1L))).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #172");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #172:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #177
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2))) */
            logger.info("About to run line #177: arr.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L)))");
            Object obtained = runOrCatch(arr.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #177");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #177:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #181
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=False) */
            logger.info("About to run line #181: arr.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L))).optArg('default', false)");
            Object obtained = runOrCatch(arr.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #181");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #181:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #185
            /* ([{}, {'a':null}, {'a':1}]) */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L));
            /* arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=True).order_by('a') */
            logger.info("About to run line #185: arr.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L))).optArg('default', true).orderBy('a')");
            Object obtained = runOrCatch(arr.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", true).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #185");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #185:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #189
            /* err("ReqlNonExistenceError", "No attribute `a` in object:", []) */
            Err expected_ = err("ReqlNonExistenceError", "No attribute `a` in object:", r.array());
            /* arr.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=r.error()) */
            logger.info("About to run line #189: arr.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L))).optArg('default', r.error())");
            Object obtained = runOrCatch(arr.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", r.error()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #189");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #189:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #193
            /* partial({'tables_created':1}) */
            Partial expected_ = partial(r.hashMap("tables_created", 1L));
            /* r.table_create('default_test') */
            logger.info("About to run line #193: r.tableCreate('default_test')");
            Object obtained = runOrCatch(r.tableCreate("default_test"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #193");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #193:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #196
            /* ({'deleted':0,'replaced':0,'generated_keys':arrlen(3,uuid()),'unchanged':0,'errors':0,'skipped':0,'inserted':3}) */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("generated_keys", arrlen(3L, uuid())).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 3L);
            /* r.table('default_test').insert(arr) */
            logger.info("About to run line #196: r.table('default_test').insert(arr)");
            Object obtained = runOrCatch(r.table("default_test").insert(arr),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #196");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #196:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // default.yaml line #199
        // tbl = r.table('default_test').order_by('a').pluck('a')
        logger.info("Possibly executing: Pluck tbl = (Pluck) (r.table('default_test').orderBy('a').pluck('a'));");
        Pluck tbl = (Pluck) (r.table("default_test").orderBy("a").pluck("a"));

        {
            // default.yaml line #202
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* tbl.filter(lambda x:x['a'].eq(1)) */
            logger.info("About to run line #202: tbl.filter(x -> x.bracket('a').eq(1L))");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").eq(1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #202");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #202:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #206
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* tbl.filter(lambda x:x['a'].eq(1), default=False) */
            logger.info("About to run line #206: tbl.filter(x -> x.bracket('a').eq(1L)).optArg('default', false)");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #206");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #206:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #210
            /* [{}, {'a':1}] */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", 1L));
            /* tbl.filter(lambda x:x['a'].eq(1), default=True) */
            logger.info("About to run line #210: tbl.filter(x -> x.bracket('a').eq(1L)).optArg('default', true)");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", true),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #210");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #210:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #215
            /* err("ReqlNonExistenceError", "No attribute `a` in object:", []) */
            Err expected_ = err("ReqlNonExistenceError", "No attribute `a` in object:", r.array());
            /* tbl.filter(lambda x:x['a'].eq(1), default=r.error()) */
            logger.info("About to run line #215: tbl.filter(x -> x.bracket('a').eq(1L)).optArg('default', r.error())");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", r.error()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #215");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #215:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #220
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* r.expr(False).do(lambda d:tbl.filter(lambda x:x['a'].eq(1), default=d)) */
            logger.info("About to run line #220: r.expr(false).do_(d -> tbl.filter(x -> x.bracket('a').eq(1L)).optArg('default', d))");
            Object obtained = runOrCatch(r.expr(false).do_(d -> tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", d)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #220");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #220:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #224
            /* [{}, {'a':1}] */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", 1L));
            /* r.expr(True).do(lambda d:tbl.filter(lambda x:x['a'].eq(1), default=d)).order_by('a') */
            logger.info("About to run line #224: r.expr(true).do_(d -> tbl.filter(x -> x.bracket('a').eq(1L)).optArg('default', d)).orderBy('a')");
            Object obtained = runOrCatch(r.expr(true).do_(d -> tbl.filter(x -> x.bracket("a").eq(1L)).optArg("default", d)).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #224");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #224:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #230
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* tbl.filter(lambda x:x['a'].default(0).eq(1)) */
            logger.info("About to run line #230: tbl.filter(x -> x.bracket('a').default_(0L).eq(1L))");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").default_(0L).eq(1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #230");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #230:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #234
            /* ([{}, {'a':null}, {'a':1}]) */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L));
            /* tbl.filter(lambda x:x['a'].default(1).eq(1)).order_by('a') */
            logger.info("About to run line #234: tbl.filter(x -> x.bracket('a').default_(1L).eq(1L)).orderBy('a')");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").default_(1L).eq(1L)).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #234");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #234:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #238
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* tbl.filter(lambda x:x['a'].default(r.error()).eq(1)) */
            logger.info("About to run line #238: tbl.filter(x -> x.bracket('a').default_(r.error()).eq(1L))");
            Object obtained = runOrCatch(tbl.filter(x -> x.bracket("a").default_(r.error()).eq(1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #238");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #238:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #244
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* r.expr(0).do(lambda i:tbl.filter(lambda x:x['a'].default(i).eq(1))) */
            logger.info("About to run line #244: r.expr(0L).do_(i -> tbl.filter(x -> x.bracket('a').default_(i).eq(1L)))");
            Object obtained = runOrCatch(r.expr(0L).do_(i -> tbl.filter(x -> x.bracket("a").default_(i).eq(1L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #244");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #244:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #248
            /* ([{},{'a':null},{'a':1}]) */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L));
            /* r.expr(1).do(lambda i:tbl.filter(lambda x:x['a'].default(i).eq(1))).order_by('a') */
            logger.info("About to run line #248: r.expr(1L).do_(i -> tbl.filter(x -> x.bracket('a').default_(i).eq(1L))).orderBy('a')");
            Object obtained = runOrCatch(r.expr(1L).do_(i -> tbl.filter(x -> x.bracket("a").default_(i).eq(1L))).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #248");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #248:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #253
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2))) */
            logger.info("About to run line #253: tbl.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L)))");
            Object obtained = runOrCatch(tbl.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #253");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #253:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #257
            /* [{'a':1}] */
            List expected_ = r.array(r.hashMap("a", 1L));
            /* tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=False) */
            logger.info("About to run line #257: tbl.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L))).optArg('default', false)");
            Object obtained = runOrCatch(tbl.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", false),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #257");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #257:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #261
            /* ([{}, {'a':null}, {'a':1}]) */
            List expected_ = r.array(r.hashMap(), r.hashMap("a", null), r.hashMap("a", 1L));
            /* tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=True).order_by('a') */
            logger.info("About to run line #261: tbl.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L))).optArg('default', true).orderBy('a')");
            Object obtained = runOrCatch(tbl.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", true).orderBy("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #261");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #261:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #265
            /* err("ReqlNonExistenceError", "No attribute `a` in object:", []) */
            Err expected_ = err("ReqlNonExistenceError", "No attribute `a` in object:", r.array());
            /* tbl.filter(lambda x:r.or_(x['a'].eq(1), x['a']['b'].eq(2)), default=r.error()) */
            logger.info("About to run line #265: tbl.filter(x -> r.or(x.bracket('a').eq(1L), x.bracket('a').bracket('b').eq(2L))).optArg('default', r.error())");
            Object obtained = runOrCatch(tbl.filter(x -> r.or(x.bracket("a").eq(1L), x.bracket("a").bracket("b").eq(2L))).optArg("default", r.error()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #265");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #265:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // default.yaml line #269
            /* partial({'tables_dropped':1}) */
            Partial expected_ = partial(r.hashMap("tables_dropped", 1L));
            /* r.table_drop('default_test') */
            logger.info("About to run line #269: r.tableDrop('default_test')");
            Object obtained = runOrCatch(r.tableDrop("default_test"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #269");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #269:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
