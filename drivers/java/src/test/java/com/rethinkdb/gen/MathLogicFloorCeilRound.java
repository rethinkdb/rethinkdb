// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class MathLogicFloorCeilRound {
    // tests for `floor`, `ceil`, and `round`, tests inspired by the Python test suite
    Logger logger = LoggerFactory.getLogger(MathLogicFloorCeilRound.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Matches Python's str() function, which we use.
    // TODO: We might want to handle this in a visit_Call in convert_tests.py instead.
    private static String str(long i) {
        return String.valueOf(i);
    }

    // A hack to concatenate two List<Long>s -- see is_array_add in convert_tests.py.
    private static List<Long> concatLong(List<Long> x, List<Long> y) {
        List<Long> ret = new ArrayList<Long>(x);
        ret.addAll(y);
        return ret;
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        {
            // math_logic/floor_ceil_round.yaml line #3
            /* "NUMBER" */
            String expected_ = "NUMBER";
            /* r.floor(1.0).type_of() */
            logger.info("About to run line #3: r.floor(1.0).typeOf()");
            Object obtained = runOrCatch(r.floor(1.0).typeOf(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #3");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #3:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #5
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.floor(1.0) */
            logger.info("About to run line #5: r.floor(1.0)");
            Object obtained = runOrCatch(r.floor(1.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #5");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #7
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.expr(1.0).floor() */
            logger.info("About to run line #7: r.expr(1.0).floor()");
            Object obtained = runOrCatch(r.expr(1.0).floor(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #7");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #10
            /* 0.0 */
            Double expected_ = 0.0;
            /* r.floor(0.5) */
            logger.info("About to run line #10: r.floor(0.5)");
            Object obtained = runOrCatch(r.floor(0.5),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #10");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #12
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.floor(1.0) */
            logger.info("About to run line #12: r.floor(1.0)");
            Object obtained = runOrCatch(r.floor(1.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #12");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #12:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #14
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.floor(1.5) */
            logger.info("About to run line #14: r.floor(1.5)");
            Object obtained = runOrCatch(r.floor(1.5),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #14");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #16
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.floor(-0.5) */
            logger.info("About to run line #16: r.floor(-0.5)");
            Object obtained = runOrCatch(r.floor(-0.5),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #16");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #18
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.floor(-1.0) */
            logger.info("About to run line #18: r.floor(-1.0)");
            Object obtained = runOrCatch(r.floor(-1.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #18");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #18:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #20
            /* -2.0 */
            Double expected_ = -2.0;
            /* r.floor(-1.5) */
            logger.info("About to run line #20: r.floor(-1.5)");
            Object obtained = runOrCatch(r.floor(-1.5),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #20");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #20:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #23
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
            /* r.expr('X').floor() */
            logger.info("About to run line #23: r.expr('X').floor()");
            Object obtained = runOrCatch(r.expr("X").floor(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #23");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #27
            /* "NUMBER" */
            String expected_ = "NUMBER";
            /* r.ceil(1.0).type_of() */
            logger.info("About to run line #27: r.ceil(1.0).typeOf()");
            Object obtained = runOrCatch(r.ceil(1.0).typeOf(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #27");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #29
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.ceil(1.0) */
            logger.info("About to run line #29: r.ceil(1.0)");
            Object obtained = runOrCatch(r.ceil(1.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #29");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #31
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.expr(1.0).ceil() */
            logger.info("About to run line #31: r.expr(1.0).ceil()");
            Object obtained = runOrCatch(r.expr(1.0).ceil(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #31");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #34
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.ceil(0.5) */
            logger.info("About to run line #34: r.ceil(0.5)");
            Object obtained = runOrCatch(r.ceil(0.5),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #34");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #36
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.ceil(1.0) */
            logger.info("About to run line #36: r.ceil(1.0)");
            Object obtained = runOrCatch(r.ceil(1.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #36");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #36:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #38
            /* 2.0 */
            Double expected_ = 2.0;
            /* r.ceil(1.5) */
            logger.info("About to run line #38: r.ceil(1.5)");
            Object obtained = runOrCatch(r.ceil(1.5),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #38");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #38:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #40
            /* 0.0 */
            Double expected_ = 0.0;
            /* r.ceil(-0.5) */
            logger.info("About to run line #40: r.ceil(-0.5)");
            Object obtained = runOrCatch(r.ceil(-0.5),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #40");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #42
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.ceil(-1.0) */
            logger.info("About to run line #42: r.ceil(-1.0)");
            Object obtained = runOrCatch(r.ceil(-1.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #42");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #42:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #44
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.ceil(-1.5) */
            logger.info("About to run line #44: r.ceil(-1.5)");
            Object obtained = runOrCatch(r.ceil(-1.5),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #44");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #47
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
            /* r.expr('X').ceil() */
            logger.info("About to run line #47: r.expr('X').ceil()");
            Object obtained = runOrCatch(r.expr("X").ceil(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #47");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #47:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #51
            /* "NUMBER" */
            String expected_ = "NUMBER";
            /* r.round(1.0).type_of() */
            logger.info("About to run line #51: r.round(1.0).typeOf()");
            Object obtained = runOrCatch(r.round(1.0).typeOf(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #51");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #51:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #53
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.round(1.0) */
            logger.info("About to run line #53: r.round(1.0)");
            Object obtained = runOrCatch(r.round(1.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #53");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #53:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #55
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.expr(1.0).round() */
            logger.info("About to run line #55: r.expr(1.0).round()");
            Object obtained = runOrCatch(r.expr(1.0).round(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #55");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #55:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #58
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.round(0.5) */
            logger.info("About to run line #58: r.round(0.5)");
            Object obtained = runOrCatch(r.round(0.5),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #58");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #58:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #60
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.round(-0.5) */
            logger.info("About to run line #60: r.round(-0.5)");
            Object obtained = runOrCatch(r.round(-0.5),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #60");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #60:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #63
            /* 0.0 */
            Double expected_ = 0.0;
            /* r.round(0.0) */
            logger.info("About to run line #63: r.round(0.0)");
            Object obtained = runOrCatch(r.round(0.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #63");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #63:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #65
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.round(1.0) */
            logger.info("About to run line #65: r.round(1.0)");
            Object obtained = runOrCatch(r.round(1.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #65");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #65:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #67
            /* 10.0 */
            Double expected_ = 10.0;
            /* r.round(10.0) */
            logger.info("About to run line #67: r.round(10.0)");
            Object obtained = runOrCatch(r.round(10.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #67");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #67:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #69
            /* 1000000000.0 */
            Double expected_ = 1000000000.0;
            /* r.round(1000000000.0) */
            logger.info("About to run line #69: r.round(1000000000.0)");
            Object obtained = runOrCatch(r.round(1000000000.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #69");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #69:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #71
            /* 1e20 */
            Double expected_ = 1e+20;
            /* r.round(1e20) */
            logger.info("About to run line #71: r.round(1e+20)");
            Object obtained = runOrCatch(r.round(1e+20),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #71");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #71:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #74
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.round(-1.0) */
            logger.info("About to run line #74: r.round(-1.0)");
            Object obtained = runOrCatch(r.round(-1.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #74");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #74:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #76
            /* -10.0 */
            Double expected_ = -10.0;
            /* r.round(-10.0) */
            logger.info("About to run line #76: r.round(-10.0)");
            Object obtained = runOrCatch(r.round(-10.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #76");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #76:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #78
            /* -1000000000.0 */
            Double expected_ = -1000000000.0;
            /* r.round(-1000000000.0) */
            logger.info("About to run line #78: r.round(-1000000000.0)");
            Object obtained = runOrCatch(r.round(-1000000000.0),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #78");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #78:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #80
            /* -1e20 */
            Double expected_ = -1e+20;
            /* r.round(-1e20) */
            logger.info("About to run line #80: r.round(-1e+20)");
            Object obtained = runOrCatch(r.round(-1e+20),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #80");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #80:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #83
            /* 0.0 */
            Double expected_ = 0.0;
            /* r.round(0.1) */
            logger.info("About to run line #83: r.round(0.1)");
            Object obtained = runOrCatch(r.round(0.1),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #83");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #83:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #85
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.round(1.1) */
            logger.info("About to run line #85: r.round(1.1)");
            Object obtained = runOrCatch(r.round(1.1),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #85");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #85:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #87
            /* 10.0 */
            Double expected_ = 10.0;
            /* r.round(10.1) */
            logger.info("About to run line #87: r.round(10.1)");
            Object obtained = runOrCatch(r.round(10.1),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #87");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #87:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #89
            /* 1000000000.0 */
            Double expected_ = 1000000000.0;
            /* r.round(1000000000.1) */
            logger.info("About to run line #89: r.round(1000000000.1)");
            Object obtained = runOrCatch(r.round(1000000000.1),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #89");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #89:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #92
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.round(-1.1) */
            logger.info("About to run line #92: r.round(-1.1)");
            Object obtained = runOrCatch(r.round(-1.1),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #92");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #92:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #94
            /* -10.0 */
            Double expected_ = -10.0;
            /* r.round(-10.1) */
            logger.info("About to run line #94: r.round(-10.1)");
            Object obtained = runOrCatch(r.round(-10.1),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #94");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #94:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #96
            /* -1000000000.0 */
            Double expected_ = -1000000000.0;
            /* r.round(-1000000000.1) */
            logger.info("About to run line #96: r.round(-1000000000.1)");
            Object obtained = runOrCatch(r.round(-1000000000.1),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #96");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #96:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #99
            /* 1.0 */
            Double expected_ = 1.0;
            /* r.round(0.9) */
            logger.info("About to run line #99: r.round(0.9)");
            Object obtained = runOrCatch(r.round(0.9),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #99");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #99:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #101
            /* 10.0 */
            Double expected_ = 10.0;
            /* r.round(9.9) */
            logger.info("About to run line #101: r.round(9.9)");
            Object obtained = runOrCatch(r.round(9.9),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #101");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #101:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #103
            /* 1000000000.0 */
            Double expected_ = 1000000000.0;
            /* r.round(999999999.9) */
            logger.info("About to run line #103: r.round(999999999.9)");
            Object obtained = runOrCatch(r.round(999999999.9),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #103");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #103:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #106
            /* -1.0 */
            Double expected_ = -1.0;
            /* r.round(-0.9) */
            logger.info("About to run line #106: r.round(-0.9)");
            Object obtained = runOrCatch(r.round(-0.9),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #106");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #106:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #108
            /* -10.0 */
            Double expected_ = -10.0;
            /* r.round(-9.9) */
            logger.info("About to run line #108: r.round(-9.9)");
            Object obtained = runOrCatch(r.round(-9.9),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #108");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #108:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #110
            /* -1000000000.0 */
            Double expected_ = -1000000000.0;
            /* r.round(-999999999.9) */
            logger.info("About to run line #110: r.round(-999999999.9)");
            Object obtained = runOrCatch(r.round(-999999999.9),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #110");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #110:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/floor_ceil_round.yaml line #113
            /* err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array());
            /* r.expr('X').round() */
            logger.info("About to run line #113: r.expr('X').round()");
            Object obtained = runOrCatch(r.expr("X").round(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #113");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #113:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
