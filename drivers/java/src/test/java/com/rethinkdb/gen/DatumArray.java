// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class DatumArray {
    // Tests conversion to and from the RQL array type
    Logger logger = LoggerFactory.getLogger(DatumArray.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Matches Python's str() function, which we use.
    // TODO: We might want to handle this in a visit_Call in convert_tests.py instead.
    private static String str(long i) {
        return String.valueOf(i);
    }

    // A hack to concatenate two List<Long>s -- see is_array_add in convert_tests.py.
    private static List<Long> concatLong(List<Long> x, List<Long> y) {
        List<Long> ret = new ArrayList<Long>(x);
        ret.addAll(y);
        return ret;
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        {
            // datum/array.yaml line #6
            /* [] */
            List expected_ = r.array();
            /* r.expr([]) */
            logger.info("About to run line #6: r.expr(r.array())");
            Object obtained = runOrCatch(r.expr(r.array()),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #6");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #9
            /* [1] */
            List expected_ = r.array(1L);
            /* r.expr([1]) */
            logger.info("About to run line #9: r.expr(r.array(1L))");
            Object obtained = runOrCatch(r.expr(r.array(1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #9");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #9:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #14
            /* [1,2,3,4,5] */
            List expected_ = r.array(1L, 2L, 3L, 4L, 5L);
            /* r.expr([1,2,3,4,5]) */
            logger.info("About to run line #14: r.expr(r.array(1L, 2L, 3L, 4L, 5L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L, 5L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #14");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #14:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #19
            /* 'ARRAY' */
            String expected_ = "ARRAY";
            /* r.expr([]).type_of() */
            logger.info("About to run line #19: r.expr(r.array()).typeOf()");
            Object obtained = runOrCatch(r.expr(r.array()).typeOf(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #19");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #24
            /* '[1,2]' */
            String expected_ = "[1,2]";
            /* r.expr([1, 2]).coerce_to('string') */
            logger.info("About to run line #24: r.expr(r.array(1L, 2L)).coerceTo('string')");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).coerceTo("string"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #24");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #24:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #25
            /* '[1,2]' */
            String expected_ = "[1,2]";
            /* r.expr([1, 2]).coerce_to('STRING') */
            logger.info("About to run line #25: r.expr(r.array(1L, 2L)).coerceTo('STRING')");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).coerceTo("STRING"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #25");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #28
            /* [1, 2] */
            List expected_ = r.array(1L, 2L);
            /* r.expr([1, 2]).coerce_to('array') */
            logger.info("About to run line #28: r.expr(r.array(1L, 2L)).coerceTo('array')");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).coerceTo("array"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #28");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #31
            /* err('ReqlQueryLogicError', 'Cannot coerce ARRAY to NUMBER.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Cannot coerce ARRAY to NUMBER.", r.array(0L));
            /* r.expr([1, 2]).coerce_to('number') */
            logger.info("About to run line #31: r.expr(r.array(1L, 2L)).coerceTo('number')");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).coerceTo("number"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #31");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #34
            /* {'a':1,'b':2} */
            Map expected_ = r.hashMap("a", 1L).with("b", 2L);
            /* r.expr([['a', 1], ['b', 2]]).coerce_to('object') */
            logger.info("About to run line #34: r.expr(r.array(r.array('a', 1L), r.array('b', 2L))).coerceTo('object')");
            Object obtained = runOrCatch(r.expr(r.array(r.array("a", 1L), r.array("b", 2L))).coerceTo("object"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #34");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #37
            /* err('ReqlQueryLogicError', 'Expected array of size 2, but got size 0.') */
            Err expected_ = err("ReqlQueryLogicError", "Expected array of size 2, but got size 0.");
            /* r.expr([[]]).coerce_to('object') */
            logger.info("About to run line #37: r.expr(r.array(r.array())).coerceTo('object')");
            Object obtained = runOrCatch(r.expr(r.array(r.array())).coerceTo("object"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #37");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #40
            /* err('ReqlQueryLogicError', 'Expected array of size 2, but got size 3.') */
            Err expected_ = err("ReqlQueryLogicError", "Expected array of size 2, but got size 3.");
            /* r.expr([['1',2,3]]).coerce_to('object') */
            logger.info("About to run line #40: r.expr(r.array(r.array('1', 2L, 3L))).coerceTo('object')");
            Object obtained = runOrCatch(r.expr(r.array(r.array("1", 2L, 3L))).coerceTo("object"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #40");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #44
            /* [1] */
            List expected_ = r.array(1L);
            /* r.expr([r.expr(1)]) */
            logger.info("About to run line #44: r.expr(r.array(r.expr(1L)))");
            Object obtained = runOrCatch(r.expr(r.array(r.expr(1L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #44");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #44:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #47
            /* [1,2,3,4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,3,4]).insert_at(1, 2) */
            logger.info("About to run line #47: r.expr(r.array(1L, 3L, 4L)).insertAt(1L, 2L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 3L, 4L)).insertAt(1L, 2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #47");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #47:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #49
            /* [1,2,3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* r.expr([2,3]).insert_at(0, 1) */
            logger.info("About to run line #49: r.expr(r.array(2L, 3L)).insertAt(0L, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(2L, 3L)).insertAt(0L, 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #49");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #49:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #51
            /* [1,2,3,4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,2,3]).insert_at(-1, 4) */
            logger.info("About to run line #51: r.expr(r.array(1L, 2L, 3L)).insertAt(-1L, 4L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).insertAt(-1L, 4L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #51");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #51:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #53
            /* [1,2,3,4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,2,3]).insert_at(3, 4) */
            logger.info("About to run line #53: r.expr(r.array(1L, 2L, 3L)).insertAt(3L, 4L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).insertAt(3L, 4L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #53");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #53:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #55
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* r.expr(3).do(lambda x: r.expr([1,2,3]).insert_at(x, 4)) */
            logger.info("About to run line #55: r.expr(3L).do_(x -> r.expr(r.array(1L, 2L, 3L)).insertAt(x, 4L))");
            Object obtained = runOrCatch(r.expr(3L).do_(x -> r.expr(r.array(1L, 2L, 3L)).insertAt(x, 4L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #55");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #55:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #59
            /* err('ReqlNonExistenceError', 'Index `4` out of bounds for array of size: `3`.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index `4` out of bounds for array of size: `3`.", r.array(0L));
            /* r.expr([1,2,3]).insert_at(4, 5) */
            logger.info("About to run line #59: r.expr(r.array(1L, 2L, 3L)).insertAt(4L, 5L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).insertAt(4L, 5L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #59");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #59:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #61
            /* err('ReqlNonExistenceError', 'Index out of bounds: -5', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index out of bounds: -5", r.array(0L));
            /* r.expr([1,2,3]).insert_at(-5, -1) */
            logger.info("About to run line #61: r.expr(r.array(1L, 2L, 3L)).insertAt(-5L, -1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).insertAt(-5L, -1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #61");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #61:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #63
            /* err('ReqlQueryLogicError', 'Number not an integer: 1.5', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Number not an integer: 1.5", r.array(0L));
            /* r.expr([1,2,3]).insert_at(1.5, 1) */
            logger.info("About to run line #63: r.expr(r.array(1L, 2L, 3L)).insertAt(1.5, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).insertAt(1.5, 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #63");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #63:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #65
            /* err('ReqlNonExistenceError', 'Expected type NUMBER but found NULL.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array(0L));
            /* r.expr([1,2,3]).insert_at(null, 1) */
            logger.info("About to run line #65: r.expr(r.array(1L, 2L, 3L)).insertAt((ReqlExpr) null, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).insertAt((ReqlExpr) null, 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #65");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #65:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #68
            /* [1,2,3,4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,4]).splice_at(1, [2,3]) */
            logger.info("About to run line #68: r.expr(r.array(1L, 4L)).spliceAt(1L, r.array(2L, 3L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 4L)).spliceAt(1L, r.array(2L, 3L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #68");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #68:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #70
            /* [1,2,3,4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([3,4]).splice_at(0, [1,2]) */
            logger.info("About to run line #70: r.expr(r.array(3L, 4L)).spliceAt(0L, r.array(1L, 2L))");
            Object obtained = runOrCatch(r.expr(r.array(3L, 4L)).spliceAt(0L, r.array(1L, 2L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #70");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #70:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #72
            /* [1,2,3,4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,2]).splice_at(2, [3,4]) */
            logger.info("About to run line #72: r.expr(r.array(1L, 2L)).spliceAt(2L, r.array(3L, 4L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).spliceAt(2L, r.array(3L, 4L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #72");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #72:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #74
            /* [1,2,3,4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,2]).splice_at(-1, [3,4]) */
            logger.info("About to run line #74: r.expr(r.array(1L, 2L)).spliceAt(-1L, r.array(3L, 4L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).spliceAt(-1L, r.array(3L, 4L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #74");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #74:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #76
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* r.expr(2).do(lambda x: r.expr([1,2]).splice_at(x, [3,4])) */
            logger.info("About to run line #76: r.expr(2L).do_(x -> r.expr(r.array(1L, 2L)).spliceAt(x, r.array(3L, 4L)))");
            Object obtained = runOrCatch(r.expr(2L).do_(x -> r.expr(r.array(1L, 2L)).spliceAt(x, r.array(3L, 4L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #76");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #76:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #80
            /* err('ReqlNonExistenceError', 'Index `3` out of bounds for array of size: `2`.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index `3` out of bounds for array of size: `2`.", r.array(0L));
            /* r.expr([1,2]).splice_at(3, [3,4]) */
            logger.info("About to run line #80: r.expr(r.array(1L, 2L)).spliceAt(3L, r.array(3L, 4L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).spliceAt(3L, r.array(3L, 4L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #80");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #80:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #82
            /* err('ReqlNonExistenceError', 'Index out of bounds: -4', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index out of bounds: -4", r.array(0L));
            /* r.expr([1,2]).splice_at(-4, [3,4]) */
            logger.info("About to run line #82: r.expr(r.array(1L, 2L)).spliceAt(-4L, r.array(3L, 4L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L)).spliceAt(-4L, r.array(3L, 4L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #82");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #82:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #84
            /* err('ReqlQueryLogicError', 'Number not an integer: 1.5', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Number not an integer: 1.5", r.array(0L));
            /* r.expr([1,2,3]).splice_at(1.5, [1]) */
            logger.info("About to run line #84: r.expr(r.array(1L, 2L, 3L)).spliceAt(1.5, r.array(1L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).spliceAt(1.5, r.array(1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #84");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #84:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #86
            /* err('ReqlNonExistenceError', 'Expected type NUMBER but found NULL.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array(0L));
            /* r.expr([1,2,3]).splice_at(null, [1]) */
            logger.info("About to run line #86: r.expr(r.array(1L, 2L, 3L)).spliceAt((ReqlExpr) null, r.array(1L))");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).spliceAt((ReqlExpr) null, r.array(1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #86");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #86:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #88
            /* err('ReqlQueryLogicError', 'Expected type ARRAY but found NUMBER.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type ARRAY but found NUMBER.", r.array(0L));
            /* r.expr([1,4]).splice_at(1, 2) */
            logger.info("About to run line #88: r.expr(r.array(1L, 4L)).spliceAt(1L, 2L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 4L)).spliceAt(1L, 2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #88");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #88:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #91
            /* [2,3,4] */
            List expected_ = r.array(2L, 3L, 4L);
            /* r.expr([1,2,3,4]).delete_at(0) */
            logger.info("About to run line #91: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(0L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #91");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #91:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #93
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* r.expr(0).do(lambda x: r.expr([1,2,3,4]).delete_at(x)) */
            logger.info("About to run line #93: r.expr(0L).do_(x -> r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(x))");
            Object obtained = runOrCatch(r.expr(0L).do_(x -> r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(x)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #93");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #93:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #97
            /* [1,2,3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* r.expr([1,2,3,4]).delete_at(-1) */
            logger.info("About to run line #97: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(-1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(-1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #97");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #97:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #99
            /* [1,4] */
            List expected_ = r.array(1L, 4L);
            /* r.expr([1,2,3,4]).delete_at(1,3) */
            logger.info("About to run line #99: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(1L, 3L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(1L, 3L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #99");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #99:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #101
            /* [1,2,3,4] */
            List expected_ = r.array(1L, 2L, 3L, 4L);
            /* r.expr([1,2,3,4]).delete_at(4,4) */
            logger.info("About to run line #101: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(4L, 4L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(4L, 4L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #101");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #101:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #103
            /* [] */
            List expected_ = r.array();
            /* r.expr([]).delete_at(0,0) */
            logger.info("About to run line #103: r.expr(r.array()).deleteAt(0L, 0L)");
            Object obtained = runOrCatch(r.expr(r.array()).deleteAt(0L, 0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #103");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #103:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #105
            /* [1,4] */
            List expected_ = r.array(1L, 4L);
            /* r.expr([1,2,3,4]).delete_at(1,-1) */
            logger.info("About to run line #105: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(1L, -1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(1L, -1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #105");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #105:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #107
            /* err('ReqlNonExistenceError', 'Index `4` out of bounds for array of size: `4`.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index `4` out of bounds for array of size: `4`.", r.array(0L));
            /* r.expr([1,2,3,4]).delete_at(4) */
            logger.info("About to run line #107: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(4L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(4L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #107");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #107:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #109
            /* err('ReqlNonExistenceError', 'Index out of bounds: -5', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index out of bounds: -5", r.array(0L));
            /* r.expr([1,2,3,4]).delete_at(-5) */
            logger.info("About to run line #109: r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(-5L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).deleteAt(-5L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #109");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #109:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #111
            /* err('ReqlQueryLogicError', 'Number not an integer: 1.5', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Number not an integer: 1.5", r.array(0L));
            /* r.expr([1,2,3]).delete_at(1.5) */
            logger.info("About to run line #111: r.expr(r.array(1L, 2L, 3L)).deleteAt(1.5)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).deleteAt(1.5),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #111");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #111:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #113
            /* err('ReqlNonExistenceError', 'Expected type NUMBER but found NULL.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array(0L));
            /* r.expr([1,2,3]).delete_at(null) */
            logger.info("About to run line #113: r.expr(r.array(1L, 2L, 3L)).deleteAt((ReqlExpr) null)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).deleteAt((ReqlExpr) null),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #113");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #113:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #116
            /* [1,2,3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* r.expr([0,2,3]).change_at(0, 1) */
            logger.info("About to run line #116: r.expr(r.array(0L, 2L, 3L)).changeAt(0L, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(0L, 2L, 3L)).changeAt(0L, 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #116");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #116:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #118
            /* AnythingIsFine */
            Object expected_ = AnythingIsFine;
            /* r.expr(1).do(lambda x: r.expr([0,2,3]).change_at(0,x)) */
            logger.info("About to run line #118: r.expr(1L).do_(x -> r.expr(r.array(0L, 2L, 3L)).changeAt(0L, x))");
            Object obtained = runOrCatch(r.expr(1L).do_(x -> r.expr(r.array(0L, 2L, 3L)).changeAt(0L, x)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #118");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #118:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #122
            /* [1,2,3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* r.expr([1,0,3]).change_at(1, 2) */
            logger.info("About to run line #122: r.expr(r.array(1L, 0L, 3L)).changeAt(1L, 2L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 0L, 3L)).changeAt(1L, 2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #122");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #122:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #124
            /* [1,2,3] */
            List expected_ = r.array(1L, 2L, 3L);
            /* r.expr([1,2,0]).change_at(2, 3) */
            logger.info("About to run line #124: r.expr(r.array(1L, 2L, 0L)).changeAt(2L, 3L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 0L)).changeAt(2L, 3L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #124");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #124:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #126
            /* err('ReqlNonExistenceError', 'Index `3` out of bounds for array of size: `3`.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index `3` out of bounds for array of size: `3`.", r.array(0L));
            /* r.expr([1,2,3]).change_at(3, 4) */
            logger.info("About to run line #126: r.expr(r.array(1L, 2L, 3L)).changeAt(3L, 4L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).changeAt(3L, 4L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #126");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #126:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #128
            /* err('ReqlNonExistenceError', 'Index out of bounds: -5', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Index out of bounds: -5", r.array(0L));
            /* r.expr([1,2,3,4]).change_at(-5, 1) */
            logger.info("About to run line #128: r.expr(r.array(1L, 2L, 3L, 4L)).changeAt(-5L, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L, 4L)).changeAt(-5L, 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #128");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #128:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #130
            /* err('ReqlQueryLogicError', 'Number not an integer: 1.5', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Number not an integer: 1.5", r.array(0L));
            /* r.expr([1,2,3]).change_at(1.5, 1) */
            logger.info("About to run line #130: r.expr(r.array(1L, 2L, 3L)).changeAt(1.5, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).changeAt(1.5, 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #130");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #130:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // datum/array.yaml line #132
            /* err('ReqlNonExistenceError', 'Expected type NUMBER but found NULL.', [0]) */
            Err expected_ = err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", r.array(0L));
            /* r.expr([1,2,3]).change_at(null, 1) */
            logger.info("About to run line #132: r.expr(r.array(1L, 2L, 3L)).changeAt((ReqlExpr) null, 1L)");
            Object obtained = runOrCatch(r.expr(r.array(1L, 2L, 3L)).changeAt((ReqlExpr) null, 1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #132");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #132:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
