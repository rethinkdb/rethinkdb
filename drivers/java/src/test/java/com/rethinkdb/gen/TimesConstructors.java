// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class TimesConstructors {
    // Test basic time arithmetic
    Logger logger = LoggerFactory.getLogger(TimesConstructors.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Matches Python's str() function, which we use.
    // TODO: We might want to handle this in a visit_Call in convert_tests.py instead.
    private static String str(long i) {
        return String.valueOf(i);
    }

    // A hack to concatenate two List<Long>s -- see is_array_add in convert_tests.py.
    private static List<Long> concatLong(List<Long> x, List<Long> y) {
        List<Long> ret = new ArrayList<Long>(x);
        ret.addAll(y);
        return ret;
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        {
            // times/constructors.yaml line #5
            /* datetime.fromtimestamp(896571240, r.ast.RqlTzinfo('00:00')) */
            OffsetDateTime expected_ = datetime.fromtimestamp(896571240L, ast.rqlTzinfo("00:00"));
            /* r.expr(r.epoch_time(896571240)) */
            logger.info("About to run line #5: r.expr(r.epochTime(896571240L))");
            Object obtained = runOrCatch(r.expr(r.epochTime(896571240L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #5");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #5:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #11
            /* {'stuff':datetime.fromtimestamp(896571240, r.ast.RqlTzinfo('00:00')), 'more':[datetime.fromtimestamp(996571240, r.ast.RqlTzinfo('00:00'))]} */
            Map expected_ = r.hashMap("stuff", datetime.fromtimestamp(896571240L, ast.rqlTzinfo("00:00"))).with("more", r.array(datetime.fromtimestamp(996571240L, ast.rqlTzinfo("00:00"))));
            /* r.expr({'stuff':r.epoch_time(896571240), 'more':[r.epoch_time(996571240)]}) */
            logger.info("About to run line #11: r.expr(r.hashMap('stuff', r.epochTime(896571240L)).with('more', r.array(r.epochTime(996571240L))))");
            Object obtained = runOrCatch(r.expr(r.hashMap("stuff", r.epochTime(896571240L)).with("more", r.array(r.epochTime(996571240L)))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #11");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #11:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #17
            /* [datetime.fromtimestamp(796571240, r.ast.RqlTzinfo('00:00')), datetime.fromtimestamp(896571240, r.ast.RqlTzinfo('00:00')), {'stuff':datetime.fromtimestamp(996571240, r.ast.RqlTzinfo('00:00'))}] */
            List expected_ = r.array(datetime.fromtimestamp(796571240L, ast.rqlTzinfo("00:00")), datetime.fromtimestamp(896571240L, ast.rqlTzinfo("00:00")), r.hashMap("stuff", datetime.fromtimestamp(996571240L, ast.rqlTzinfo("00:00"))));
            /* r.expr([r.epoch_time(796571240), r.epoch_time(896571240), {'stuff':r.epoch_time(996571240)}]) */
            logger.info("About to run line #17: r.expr(r.array(r.epochTime(796571240L), r.epochTime(896571240L), r.hashMap('stuff', r.epochTime(996571240L))))");
            Object obtained = runOrCatch(r.expr(r.array(r.epochTime(796571240L), r.epochTime(896571240L), r.hashMap("stuff", r.epochTime(996571240L)))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #17");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #17:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #23
            /* {'nested':{'time':datetime.fromtimestamp(896571240, r.ast.RqlTzinfo('00:00'))}} */
            Map expected_ = r.hashMap("nested", r.hashMap("time", datetime.fromtimestamp(896571240L, ast.rqlTzinfo("00:00"))));
            /* r.expr({'nested':{'time':r.epoch_time(896571240)}}) */
            logger.info("About to run line #23: r.expr(r.hashMap('nested', r.hashMap('time', r.epochTime(896571240L))))");
            Object obtained = runOrCatch(r.expr(r.hashMap("nested", r.hashMap("time", r.epochTime(896571240L)))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #23");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #29
            /* [1, "two", ["a", datetime.fromtimestamp(896571240, r.ast.RqlTzinfo('00:00')), 3]] */
            List expected_ = r.array(1L, "two", r.array("a", datetime.fromtimestamp(896571240L, ast.rqlTzinfo("00:00")), 3L));
            /* r.expr([1, "two", ["a", r.epoch_time(896571240), 3]]) */
            logger.info("About to run line #29: r.expr(r.array(1L, 'two', r.array('a', r.epochTime(896571240L), 3L)))");
            Object obtained = runOrCatch(r.expr(r.array(1L, "two", r.array("a", r.epochTime(896571240L), 3L))),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #29");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #29:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #35
            /* 1 */
            Long expected_ = 1L;
            /* r.epoch_time(1).to_epoch_time() */
            logger.info("About to run line #35: r.epochTime(1L).toEpochTime()");
            Object obtained = runOrCatch(r.epochTime(1L).toEpochTime(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #35");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #35:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #37
            /* -1 */
            Long expected_ = -1L;
            /* r.epoch_time(-1).to_epoch_time() */
            logger.info("About to run line #37: r.epochTime(-1L).toEpochTime()");
            Object obtained = runOrCatch(r.epochTime(-1L).toEpochTime(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #37");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #39
            /* 1.444 */
            Double expected_ = 1.444;
            /* r.epoch_time(1.4444445).to_epoch_time() */
            logger.info("About to run line #39: r.epochTime(1.4444445).toEpochTime()");
            Object obtained = runOrCatch(r.epochTime(1.4444445).toEpochTime(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #39");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #42
            /* "1970-01-01T00:00:01.444+00:00" */
            String expected_ = "1970-01-01T00:00:01.444+00:00";
            /* r.epoch_time(1.4444445).to_iso8601() */
            logger.info("About to run line #42: r.epochTime(1.4444445).toIso8601()");
            Object obtained = runOrCatch(r.epochTime(1.4444445).toIso8601(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #42");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #42:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #45
            /* 1.444 */
            Double expected_ = 1.444;
            /* r.epoch_time(1.4444445).seconds() */
            logger.info("About to run line #45: r.epochTime(1.4444445).seconds()");
            Object obtained = runOrCatch(r.epochTime(1.4444445).seconds(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals((double) expected_,
                             ((Number) obtained).doubleValue(),
                             0.00000000001);
            logger.info("Finished running line #45");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #45:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #48
            /* 10000 */
            Long expected_ = 10000L;
            /* r.epoch_time(253430000000).year() */
            logger.info("About to run line #48: r.epochTime(253430000000L).year()");
            Object obtained = runOrCatch(r.epochTime(253430000000L).year(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #48");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #50
            /* err("ReqlQueryLogicError", "Year `10000` out of valid ISO 8601 range [0, 9999].", []) */
            Err expected_ = err("ReqlQueryLogicError", "Year `10000` out of valid ISO 8601 range [0, 9999].", r.array());
            /* r.epoch_time(253430000000).to_iso8601() */
            logger.info("About to run line #50: r.epochTime(253430000000L).toIso8601()");
            Object obtained = runOrCatch(r.epochTime(253430000000L).toIso8601(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #50");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #53
            /* err("ReqlQueryLogicError", "Error in time logic: Year is out of valid range: 1400..10000.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Error in time logic: Year is out of valid range: 1400..10000.", r.array());
            /* r.epoch_time(253440000000).year() */
            logger.info("About to run line #53: r.epochTime(253440000000L).year()");
            Object obtained = runOrCatch(r.epochTime(253440000000L).year(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #53");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #53:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #55
            /* 253440000000 */
            Long expected_ = 253440000000L;
            /* r.epoch_time(253440000000).to_epoch_time() */
            logger.info("About to run line #55: r.epochTime(253440000000L).toEpochTime()");
            Object obtained = runOrCatch(r.epochTime(253440000000L).toEpochTime(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #55");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #55:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #57
            /* 1400 */
            Long expected_ = 1400L;
            /* r.epoch_time(-17980000000).year() */
            logger.info("About to run line #57: r.epochTime(-17980000000L).year()");
            Object obtained = runOrCatch(r.epochTime(-17980000000L).year(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #57");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #57:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #59
            /* err("ReqlQueryLogicError", "Error in time logic: Year is out of valid range: 1400..10000.", []) */
            Err expected_ = err("ReqlQueryLogicError", "Error in time logic: Year is out of valid range: 1400..10000.", r.array());
            /* r.epoch_time(-17990000000).year() */
            logger.info("About to run line #59: r.epochTime(-17990000000L).year()");
            Object obtained = runOrCatch(r.epochTime(-17990000000L).year(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #59");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #59:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/constructors.yaml line #61
            /* -17990000000 */
            Long expected_ = -17990000000L;
            /* r.epoch_time(-17990000000).to_epoch_time() */
            logger.info("About to run line #61: r.epochTime(-17990000000L).toEpochTime()");
            Object obtained = runOrCatch(r.epochTime(-17990000000L).toEpochTime(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #61");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #61:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // times/constructors.yaml line #65
        // cdate = "2013-01-01"
        logger.info("Possibly executing: String cdate = (String) ('2013-01-01');");
        String cdate = (String) ("2013-01-01");

        // times/constructors.yaml line #66
        // dates = ["2013", "2013-01", "2013-01-01", "20130101", "2013-001", "2013001"]
        logger.info("Possibly executing: List dates = (List) (r.array('2013', '2013-01', '2013-01-01', '20130101', '2013-001', '2013001'));");
        List dates = (List) (r.array("2013", "2013-01", "2013-01-01", "20130101", "2013-001", "2013001"));

        // times/constructors.yaml line #67
        // ctime = "13:00:00"
        logger.info("Possibly executing: String ctime = (String) ('13:00:00');");
        String ctime = (String) ("13:00:00");

        // times/constructors.yaml line #68
        // times = ["13", "13:00", "1300", "13:00:00", "13:00:00.000000", "130000.000000"]
        logger.info("Possibly executing: List times = (List) (r.array('13', '13:00', '1300', '13:00:00', '13:00:00.000000', '130000.000000'));");
        List times = (List) (r.array("13", "13:00", "1300", "13:00:00", "13:00:00.000000", "130000.000000"));

        // times/constructors.yaml line #69
        // ctz = "+00:00"
        logger.info("Possibly executing: String ctz = (String) ('+00:00');");
        String ctz = (String) ("+00:00");

        // times/constructors.yaml line #70
        // tzs = ["Z", "+00", "+0000", "+00:00"]
        logger.info("Possibly executing: List tzs = (List) (r.array('Z', '+00', '+0000', '+00:00'));");
        List tzs = (List) (r.array("Z", "+00", "+0000", "+00:00"));

        // times/constructors.yaml line #71
        // cdt = [cdate+"T"+ctime+ctz]
        logger.info("Possibly executing: List cdt = (List) (r.array(cdate + 'T' + ctime + ctz));");
        List cdt = (List) (r.array(cdate + "T" + ctime + ctz));

        // times/constructors.yaml line #81
        // bad_dates = ["201301", "2013-0101", "2a13", "2013+01", "2013-01-01.1"]
        logger.info("Possibly executing: List bad_dates = (List) (r.array('201301', '2013-0101', '2a13', '2013+01', '2013-01-01.1'));");
        List bad_dates = (List) (r.array("201301", "2013-0101", "2a13", "2013+01", "2013-01-01.1"));

        // times/constructors.yaml line #82
        // bad_times = ["a3", "13:0000", "13:000", "13:00.00", "130000.00000000a"]
        logger.info("Possibly executing: List bad_times = (List) (r.array('a3', '13:0000', '13:000', '13:00.00', '130000.00000000a'));");
        List bad_times = (List) (r.array("a3", "13:0000", "13:000", "13:00.00", "130000.00000000a"));

        // times/constructors.yaml line #83
        // bad_tzs = ["X", "-7", "-07:-1", "+07+01", "PST", "UTC", "Z+00"]
        logger.info("Possibly executing: List bad_tzs = (List) (r.array('X', '-7', '-07:-1', '+07+01', 'PST', 'UTC', 'Z+00'));");
        List bad_tzs = (List) (r.array("X", "-7", "-07:-1", "+07+01", "PST", "UTC", "Z+00"));
    }
}
