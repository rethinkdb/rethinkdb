// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class TransformFold {
    // Tests that manipulation data in tables
    Logger logger = LoggerFactory.getLogger(TransformFold.class);
    public static final RethinkDB r = RethinkDB.r;
    public static final Table tbl = r.db("test").table("tbl");
    public static final Table tbl2 = r.db("test").table("tbl2");
    public static final Table tbl3 = r.db("test").table("tbl3");

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
        try {
            r.db("test").tableCreate("tbl").run(conn);
            r.db("test").table(tbl).wait_().run(conn);
        }catch (Exception e){}
        try {
            r.db("test").tableCreate("tbl2").run(conn);
            r.db("test").table(tbl2).wait_().run(conn);
        }catch (Exception e){}
        try {
            r.db("test").tableCreate("tbl3").run(conn);
            r.db("test").table(tbl3).wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.db("test").tableDrop("tbl").run(conn);
        r.db("test").tableDrop("tbl2").run(conn);
        r.db("test").tableDrop("tbl3").run(conn);
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        {
            // transform/fold.yaml line #6
            /* {'deleted':0,'replaced':0,'unchanged':0,'errors':0,'skipped':0,'inserted':100} */
            Map expected_ = r.hashMap("deleted", 0L).with("replaced", 0L).with("unchanged", 0L).with("errors", 0L).with("skipped", 0L).with("inserted", 100L);
            /* tbl.insert(r.range(100).map(lambda i: {'id':i, 'a':i%4}).coerce_to("array")) */
            logger.info("About to run line #6: tbl.insert(r.range(100L).map(i -> r.hashMap('id', i).with('a', r.mod(i, 4L))).coerceTo('array'))");
            Object obtained = runOrCatch(tbl.insert(r.range(100L).map(i -> r.hashMap("id", i).with("a", r.mod(i, 4L))).coerceTo("array")),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #6");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #6:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/fold.yaml line #19
            /* 10 */
            Long expected_ = 10L;
            /* r.range(0, 10).fold(0, lambda acc, row: acc.add(1)) */
            logger.info("About to run line #19: r.range(0L, 10L).fold(0L, (acc, row) -> acc.add(1L))");
            Object obtained = runOrCatch(r.range(0L, 10L).fold(0L, (acc, row) -> acc.add(1L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #19");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/fold.yaml line #23
            /* 20 */
            Long expected_ = 20L;
            /* r.range(0, 10).fold(0, lambda acc, row: acc.add(1), final_emit=lambda acc: acc.mul(2)) */
            logger.info("About to run line #23: r.range(0L, 10L).fold(0L, (acc, row) -> acc.add(1L)).optArg('final_emit', acc -> acc.mul(2L))");
            Object obtained = runOrCatch(r.range(0L, 10L).fold(0L, (acc, row) -> acc.add(1L)).optArg("final_emit", acc -> acc.mul(2L)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #23");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #23:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/fold.yaml line #27
            /* [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] */
            List expected_ = r.array(0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L);
            /* r.range(0, 10).fold(0, lambda acc, row: acc.add(1), emit=lambda old,row,acc: [row]).coerce_to("array") */
            logger.info("About to run line #27: r.range(0L, 10L).fold(0L, (acc, row) -> acc.add(1L)).optArg('emit', (old, row, acc) -> r.array(row)).coerceTo('array')");
            Object obtained = runOrCatch(r.range(0L, 10L).fold(0L, (acc, row) -> acc.add(1L)).optArg("emit", (old, row, acc) -> r.array(row)).coerceTo("array"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #27");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #27:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/fold.yaml line #31
            /* [2, 5, 8, 10] */
            List expected_ = r.array(2L, 5L, 8L, 10L);
            /* r.range(0, 10).fold(0, lambda acc, row: acc.add(1), emit=lambda old,row,acc: r.branch(acc.mod(3).eq(0),[row],[]),final_emit=lambda acc: [acc]).coerce_to("array") */
            logger.info("About to run line #31: r.range(0L, 10L).fold(0L, (acc, row) -> acc.add(1L)).optArg('emit', (old, row, acc) -> r.branch(acc.mod(3L).eq(0L), r.array(row), r.array())).optArg('final_emit', acc -> r.array(acc)).coerceTo('array')");
            Object obtained = runOrCatch(r.range(0L, 10L).fold(0L, (acc, row) -> acc.add(1L)).optArg("emit", (old, row, acc) -> r.branch(acc.mod(3L).eq(0L), r.array(row), r.array())).optArg("final_emit", acc -> r.array(acc)).coerceTo("array"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #31");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/fold.yaml line #35
            /* [1, 2, 3, 5, 8, 13, 21, 34, 55, 89] */
            List expected_ = r.array(1L, 2L, 3L, 5L, 8L, 13L, 21L, 34L, 55L, 89L);
            /* r.range(0, 10).fold([1, 1], lambda acc, row: [acc[1], acc[0].add(acc[1])], emit=lambda old,row,acc: [acc[0]]).coerce_to("array") */
            logger.info("About to run line #35: r.range(0L, 10L).fold(r.array(1L, 1L), (acc, row) -> r.array(acc.bracket(1L), acc.bracket(0L).add(acc.bracket(1L)))).optArg('emit', (old, row, acc) -> r.array(acc.bracket(0L))).coerceTo('array')");
            Object obtained = runOrCatch(r.range(0L, 10L).fold(r.array(1L, 1L), (acc, row) -> r.array(acc.bracket(1L), acc.bracket(0L).add(acc.bracket(1L)))).optArg("emit", (old, row, acc) -> r.array(acc.bracket(0L))).coerceTo("array"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #35");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #35:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/fold.yaml line #37
            /* "STREAM" */
            String expected_ = "STREAM";
            /* r.range(0, 10).fold(0, lambda acc, row: acc, emit=lambda old,row,acc: acc).type_of() */
            logger.info("About to run line #37: r.range(0L, 10L).fold(0L, (acc, row) -> acc).optArg('emit', (old, row, acc) -> acc).typeOf()");
            Object obtained = runOrCatch(r.range(0L, 10L).fold(0L, (acc, row) -> acc).optArg("emit", (old, row, acc) -> acc).typeOf(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #37");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/fold.yaml line #39
            /* [{'a': 0, 'id': 20}, {'a': 3, 'id': 15}, {'a': 2, 'id': 46}, {'a': 2, 'id': 78}, {'a': 2, 'id': 90}] */
            List expected_ = r.array(r.hashMap("a", 0L).with("id", 20L), r.hashMap("a", 3L).with("id", 15L), r.hashMap("a", 2L).with("id", 46L), r.hashMap("a", 2L).with("id", 78L), r.hashMap("a", 2L).with("id", 90L));
            /* tbl.filter("id").fold(0, lambda acc, row: acc.add(1), emit=lambda old,row,acc: r.branch(old.mod(20).eq(0),[row],[])).coerce_to("array") */
            logger.info("About to run line #39: tbl.filter('id').fold(0L, (acc, row) -> acc.add(1L)).optArg('emit', (old, row, acc) -> r.branch(old.mod(20L).eq(0L), r.array(row), r.array())).coerceTo('array')");
            Object obtained = runOrCatch(tbl.filter("id").fold(0L, (acc, row) -> acc.add(1L)).optArg("emit", (old, row, acc) -> r.branch(old.mod(20L).eq(0L), r.array(row), r.array())).coerceTo("array"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #39");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #39:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/fold.yaml line #42
            /* [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] */
            List expected_ = r.array(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L);
            /* r.range().fold(0, lambda acc, row: acc.add(1), emit=lambda old,row,acc: [acc]).limit(10) */
            logger.info("About to run line #42: r.range().fold(0L, (acc, row) -> acc.add(1L)).optArg('emit', (old, row, acc) -> r.array(acc)).limit(10L)");
            Object obtained = runOrCatch(r.range().fold(0L, (acc, row) -> acc.add(1L)).optArg("emit", (old, row, acc) -> r.array(acc)).limit(10L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #42");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #42:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/fold.yaml line #45
            /* err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.") */
            Err expected_ = err("ReqlQueryLogicError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.");
            /* r.range().fold(0, lambda acc, row: acc.add(1), emit=lambda old,row,acc: [acc]).map(lambda doc: 1).reduce(lambda l, r: l+r) */
            logger.info("About to run line #45: r.range().fold(0L, (acc, row) -> acc.add(1L)).optArg('emit', (old, row, acc) -> r.array(acc)).map(doc -> 1L).reduce((l, r) -> r.add(l, r))");
            Object obtained = runOrCatch(r.range().fold(0L, (acc, row) -> acc.add(1L)).optArg("emit", (old, row, acc) -> r.array(acc)).map(doc -> 1L).reduce((l, r) -> r.add(l, r)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #45");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #45:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // transform/fold.yaml line #48
            /* [x for x in range(1, 1001)] */
            List expected_ = LongStream.range(1L, 1001L).boxed().map(x -> x).collect(Collectors.toList());
            /* r.range(0, 1000).fold(0, lambda acc, row: acc.add(1), emit=lambda old,row,acc: [acc]).coerce_to("array") */
            logger.info("About to run line #48: r.range(0L, 1000L).fold(0L, (acc, row) -> acc.add(1L)).optArg('emit', (old, row, acc) -> r.array(acc)).coerceTo('array')");
            Object obtained = runOrCatch(r.range(0L, 1000L).fold(0L, (acc, row) -> acc.add(1L)).optArg("emit", (old, row, acc) -> r.array(acc)).coerceTo("array"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #48");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
