// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.gen.exc.*;
import com.rethinkdb.gen.ast.*;
import com.rethinkdb.ast.ReqlAst;
import com.rethinkdb.model.MapObject;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;
import com.rethinkdb.net.Cursor;
import junit.framework.TestCase;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.Instant;
import java.util.stream.LongStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import java.util.Collections;
import java.nio.charset.StandardCharsets;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class TimesIndex {
    // secondary indexes on times
    Logger logger = LoggerFactory.getLogger(TimesIndex.class);
    public static final RethinkDB r = RethinkDB.r;
    public static final Table tbl = r.db("test").table("tbl");

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
        try {
            r.db("test").tableCreate("tbl").run(conn);
            r.db("test").table(tbl).wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.db("test").tableDrop("tbl").run(conn);
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Matches Python's str() function, which we use.
    // TODO: We might want to handle this in a visit_Call in convert_tests.py instead.
    private static String str(long i) {
        return String.valueOf(i);
    }

    // A hack to concatenate two List<Long>s -- see is_array_add in convert_tests.py.
    private static List<Long> concatLong(List<Long> x, List<Long> y) {
        List<Long> ret = new ArrayList<Long>(x);
        ret.addAll(y);
        return ret;
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        // times/index.yaml line #7
        // ts={"timezone":"-07:00","epoch_time":1375445162.0872,"$reql_type$":"TIME"}
        logger.info("Possibly executing: Map ts = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445162.0872).with('$reql_type$', 'TIME'));");
        Map ts = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445162.0872).with("$reql_type$", "TIME"));

        // times/index.yaml line #11
        // t1={"timezone":"-07:00","epoch_time":1375445163.0872,"$reql_type$":"TIME"}
        logger.info("Possibly executing: Map t1 = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445163.0872).with('$reql_type$', 'TIME'));");
        Map t1 = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445163.0872).with("$reql_type$", "TIME"));

        // times/index.yaml line #15
        // t2={"timezone":"-07:00","epoch_time":1375445163.08832,"$reql_type$":"TIME"}
        logger.info("Possibly executing: Map t2 = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445163.08832).with('$reql_type$', 'TIME'));");
        Map t2 = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445163.08832).with("$reql_type$", "TIME"));

        // times/index.yaml line #19
        // t3={"timezone":"-07:00","epoch_time":1375445163.08943,"$reql_type$":"TIME"}
        logger.info("Possibly executing: Map t3 = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445163.08943).with('$reql_type$', 'TIME'));");
        Map t3 = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445163.08943).with("$reql_type$", "TIME"));

        // times/index.yaml line #23
        // t4={"timezone":"-07:00","epoch_time":1375445163.09055,"$reql_type$":"TIME"}
        logger.info("Possibly executing: Map t4 = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445163.09055).with('$reql_type$', 'TIME'));");
        Map t4 = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445163.09055).with("$reql_type$", "TIME"));

        // times/index.yaml line #27
        // t5={"timezone":"-07:00","epoch_time":1375445163.09166,"$reql_type$":"TIME"}
        logger.info("Possibly executing: Map t5 = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445163.09166).with('$reql_type$', 'TIME'));");
        Map t5 = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445163.09166).with("$reql_type$", "TIME"));

        // times/index.yaml line #31
        // te={"timezone":"-07:00","epoch_time":1375445164.0872,"$reql_type$":"TIME"}
        logger.info("Possibly executing: Map te = (Map) (r.hashMap('timezone', '-07:00').with('epoch_time', 1375445164.0872).with('$reql_type$', 'TIME'));");
        Map te = (Map) (r.hashMap("timezone", "-07:00").with("epoch_time", 1375445164.0872).with("$reql_type$", "TIME"));

        // times/index.yaml line #36
        // trows = [{'id':t1}, {'id':t2}, {'id':t3}, {'id':t4}, {'id':t5}]
        logger.info("Possibly executing: List trows = (List) (r.array(r.hashMap('id', t1), r.hashMap('id', t2), r.hashMap('id', t3), r.hashMap('id', t4), r.hashMap('id', t5)));");
        List trows = (List) (r.array(r.hashMap("id", t1), r.hashMap("id", t2), r.hashMap("id", t3), r.hashMap("id", t4), r.hashMap("id", t5)));

        {
            // times/index.yaml line #37
            /* 5 */
            Long expected_ = 5L;
            /* tbl.insert(trows)['inserted'] */
            logger.info("About to run line #37: tbl.insert(trows).bracket('inserted')");
            Object obtained = runOrCatch(tbl.insert(trows).bracket("inserted"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #37");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // times/index.yaml line #41
        // bad_insert = [{'id':r.expr(t1).in_timezone("Z")}]
        logger.info("Possibly executing: List bad_insert = (List) (r.array(r.hashMap('id', r.expr(t1).inTimezone('Z'))));");
        List bad_insert = (List) (r.array(r.hashMap("id", r.expr(t1).inTimezone("Z"))));

        {
            // times/index.yaml line #42
            /* ("Duplicate primary key `id`:\n{\n\t\"id\":\t{\n\t\t\"$reql_type$\":\t\"TIME\",\n\t\t\"epoch_time\":\t1375445163.087,\n\t\t\"timezone\":\t\"-07:00\"\n\t}\n}\n{\n\t\"id\":\t{\n\t\t\"$reql_type$\":\t\"TIME\",\n\t\t\"epoch_time\":\t1375445163.087,\n\t\t\"timezone\":\t\"+00:00\"\n\t}\n}") */
            String expected_ = "Duplicate primary key `id`:\n{\n\t\"id\":\t{\n\t\t\"$reql_type$\":\t\"TIME\",\n\t\t\"epoch_time\":\t1375445163.087,\n\t\t\"timezone\":\t\"-07:00\"\n\t}\n}\n{\n\t\"id\":\t{\n\t\t\"$reql_type$\":\t\"TIME\",\n\t\t\"epoch_time\":\t1375445163.087,\n\t\t\"timezone\":\t\"+00:00\"\n\t}\n}";
            /* tbl.insert(bad_insert)['first_error'] */
            logger.info("About to run line #42: tbl.insert(bad_insert).bracket('first_error')");
            Object obtained = runOrCatch(tbl.insert(bad_insert).bracket("first_error"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #42");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #42:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #46
            /* 5 */
            Long expected_ = 5L;
            /* tbl.between(ts, te).count() */
            logger.info("About to run line #46: tbl.between(ts, te).count()");
            Object obtained = runOrCatch(tbl.between(ts, te).count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #46");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #46:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #48
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, t4).count() */
            logger.info("About to run line #48: tbl.between(t1, t4).count()");
            Object obtained = runOrCatch(tbl.between(t1, t4).count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #48");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #48:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #51
            /* 4 */
            Long expected_ = 4L;
            /* tbl.between(t1, t4, right_bound='closed').count() */
            logger.info("About to run line #51: tbl.between(t1, t4).optArg('right_bound', 'closed').count()");
            Object obtained = runOrCatch(tbl.between(t1, t4).optArg("right_bound", "closed").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #51");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #51:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #54
            /* 5 */
            Long expected_ = 5L;
            /* tbl.between(r.expr(ts).in_timezone("+06:00"), te).count() */
            logger.info("About to run line #54: tbl.between(r.expr(ts).inTimezone('+06:00'), te).count()");
            Object obtained = runOrCatch(tbl.between(r.expr(ts).inTimezone("+06:00"), te).count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #54");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #54:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #56
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, r.expr(t4).in_timezone("+08:00")).count() */
            logger.info("About to run line #56: tbl.between(t1, r.expr(t4).inTimezone('+08:00')).count()");
            Object obtained = runOrCatch(tbl.between(t1, r.expr(t4).inTimezone("+08:00")).count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #56");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #56:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #59
            /* 4 */
            Long expected_ = 4L;
            /* tbl.between(r.expr(t1).in_timezone("Z"), t4, right_bound='closed').count() */
            logger.info("About to run line #59: tbl.between(r.expr(t1).inTimezone('Z'), t4).optArg('right_bound', 'closed').count()");
            Object obtained = runOrCatch(tbl.between(r.expr(t1).inTimezone("Z"), t4).optArg("right_bound", "closed").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #59");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #59:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #64
            /* 5 */
            Long expected_ = 5L;
            /* tbl.update(lambda row:{'a':row['id']})['replaced'] */
            logger.info("About to run line #64: tbl.update(row -> r.hashMap('a', row.bracket('id'))).bracket('replaced')");
            Object obtained = runOrCatch(tbl.update(row -> r.hashMap("a", row.bracket("id"))).bracket("replaced"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #64");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #64:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #67
            /* ({'created':1}) */
            Map expected_ = r.hashMap("created", 1L);
            /* tbl.index_create('a') */
            logger.info("About to run line #67: tbl.indexCreate('a')");
            Object obtained = runOrCatch(tbl.indexCreate("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #67");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #67:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #69
            /* 1 */
            Long expected_ = 1L;
            /* tbl.index_wait('a').count() */
            logger.info("About to run line #69: tbl.indexWait('a').count()");
            Object obtained = runOrCatch(tbl.indexWait("a").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #69");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #69:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #73
            /* 5 */
            Long expected_ = 5L;
            /* tbl.between(ts, te, index='a').count() */
            logger.info("About to run line #73: tbl.between(ts, te).optArg('index', 'a').count()");
            Object obtained = runOrCatch(tbl.between(ts, te).optArg("index", "a").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #73");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #73:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #77
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, t4, index='a').count() */
            logger.info("About to run line #77: tbl.between(t1, t4).optArg('index', 'a').count()");
            Object obtained = runOrCatch(tbl.between(t1, t4).optArg("index", "a").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #77");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #77:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #81
            /* 4 */
            Long expected_ = 4L;
            /* tbl.between(t1, t4, right_bound='closed', index='a').count() */
            logger.info("About to run line #81: tbl.between(t1, t4).optArg('right_bound', 'closed').optArg('index', 'a').count()");
            Object obtained = runOrCatch(tbl.between(t1, t4).optArg("right_bound", "closed").optArg("index", "a").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #81");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #81:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #85
            /* 5 */
            Long expected_ = 5L;
            /* tbl.between(r.expr(ts).in_timezone("+06:00"), te, index='a').count() */
            logger.info("About to run line #85: tbl.between(r.expr(ts).inTimezone('+06:00'), te).optArg('index', 'a').count()");
            Object obtained = runOrCatch(tbl.between(r.expr(ts).inTimezone("+06:00"), te).optArg("index", "a").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #85");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #85:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #89
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, r.expr(t4).in_timezone("+08:00"), index='a').count() */
            logger.info("About to run line #89: tbl.between(t1, r.expr(t4).inTimezone('+08:00')).optArg('index', 'a').count()");
            Object obtained = runOrCatch(tbl.between(t1, r.expr(t4).inTimezone("+08:00")).optArg("index", "a").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #89");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #89:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #93
            /* 4 */
            Long expected_ = 4L;
            /* tbl.between(r.expr(t1).in_timezone("Z"), t4, right_bound='closed', index='a').count() */
            logger.info("About to run line #93: tbl.between(r.expr(t1).inTimezone('Z'), t4).optArg('right_bound', 'closed').optArg('index', 'a').count()");
            Object obtained = runOrCatch(tbl.between(r.expr(t1).inTimezone("Z"), t4).optArg("right_bound", "closed").optArg("index", "a").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #93");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #93:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #98
            /* ({'created':1}) */
            Map expected_ = r.hashMap("created", 1L);
            /* tbl.index_create('b', lambda row:r.branch(row['id'] < t4, row['a'], null)) */
            logger.info("About to run line #98: tbl.indexCreate('b', row -> r.branch(row.bracket('id').lt(t4), row.bracket('a'), (ReqlExpr) null))");
            Object obtained = runOrCatch(tbl.indexCreate("b", row -> r.branch(row.bracket("id").lt(t4), row.bracket("a"), (ReqlExpr) null)),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #98");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #98:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #101
            /* 1 */
            Long expected_ = 1L;
            /* tbl.index_wait('b').count() */
            logger.info("About to run line #101: tbl.indexWait('b').count()");
            Object obtained = runOrCatch(tbl.indexWait("b").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #101");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #101:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #105
            /* 1 */
            Long expected_ = 1L;
            /* tbl.index_wait('b').count() */
            logger.info("About to run line #105: tbl.indexWait('b').count()");
            Object obtained = runOrCatch(tbl.indexWait("b").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #105");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #105:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #109
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(ts, te, index='b').count() */
            logger.info("About to run line #109: tbl.between(ts, te).optArg('index', 'b').count()");
            Object obtained = runOrCatch(tbl.between(ts, te).optArg("index", "b").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #109");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #109:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #113
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, t4, index='b').count() */
            logger.info("About to run line #113: tbl.between(t1, t4).optArg('index', 'b').count()");
            Object obtained = runOrCatch(tbl.between(t1, t4).optArg("index", "b").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #113");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #113:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #117
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, t4, right_bound='closed', index='b').count() */
            logger.info("About to run line #117: tbl.between(t1, t4).optArg('right_bound', 'closed').optArg('index', 'b').count()");
            Object obtained = runOrCatch(tbl.between(t1, t4).optArg("right_bound", "closed").optArg("index", "b").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #117");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #117:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #121
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(r.expr(ts).in_timezone("+06:00"), te, index='b').count() */
            logger.info("About to run line #121: tbl.between(r.expr(ts).inTimezone('+06:00'), te).optArg('index', 'b').count()");
            Object obtained = runOrCatch(tbl.between(r.expr(ts).inTimezone("+06:00"), te).optArg("index", "b").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #121");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #121:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #125
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(t1, r.expr(t4).in_timezone("+08:00"), index='b').count() */
            logger.info("About to run line #125: tbl.between(t1, r.expr(t4).inTimezone('+08:00')).optArg('index', 'b').count()");
            Object obtained = runOrCatch(tbl.between(t1, r.expr(t4).inTimezone("+08:00")).optArg("index", "b").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #125");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #125:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #129
            /* 3 */
            Long expected_ = 3L;
            /* tbl.between(r.expr(t1).in_timezone("Z"), t4, right_bound='closed', index='b').count() */
            logger.info("About to run line #129: tbl.between(r.expr(t1).inTimezone('Z'), t4).optArg('right_bound', 'closed').optArg('index', 'b').count()");
            Object obtained = runOrCatch(tbl.between(r.expr(t1).inTimezone("Z"), t4).optArg("right_bound", "closed").optArg("index", "b").count(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #129");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #129:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        // times/index.yaml line #135
        // oldtime = datetime.fromtimestamp(1375147296.681, PacificTimeZone())
        logger.info("Possibly executing: OffsetDateTime oldtime = (OffsetDateTime) (datetime.fromtimestamp(1375147296.681, PacificTimeZone()));");
        OffsetDateTime oldtime = (OffsetDateTime) (datetime.fromtimestamp(1375147296.681, PacificTimeZone()));

        // times/index.yaml line #139
        // curtime = datetime.now()
        logger.info("Possibly executing: OffsetDateTime curtime = (OffsetDateTime) (datetime.now());");
        OffsetDateTime curtime = (OffsetDateTime) (datetime.now());

        {
            // times/index.yaml line #142
            /* 1 */
            Long expected_ = 1L;
            /* tbl.insert([{'id':oldtime}])['inserted'] */
            logger.info("About to run line #142: tbl.insert(r.array(r.hashMap('id', oldtime))).bracket('inserted')");
            Object obtained = runOrCatch(tbl.insert(r.array(r.hashMap("id", oldtime))).bracket("inserted"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #142");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #142:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // times/index.yaml line #148
            /* ("PTYPE<TIME>") */
            String expected_ = "PTYPE<TIME>";
            /* tbl.get(oldtime)['id'].type_of() */
            logger.info("About to run line #148: tbl.get(oldtime).bracket('id').typeOf()");
            Object obtained = runOrCatch(tbl.get(oldtime).bracket("id").typeOf(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #148");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #148:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
