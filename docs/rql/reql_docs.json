{
  "api/javascript/add/": {
    "body": "number.add(number) &rarr; numberstring.add(string) &rarr; stringarray.add(array) &rarr; arraytime.add(number) &rarr; time", 
    "description": "<p>Sum two numbers, concatenate two strings, or concatenate 2 arrays.</p>", 
    "example": "<p><strong>Example:</strong> It's as easy as 2 + 2 = 4.</p>\n<p><code>r.expr(2).add(2).run(conn, callback)</code></p>", 
    "io": [
      [
        "number", 
        "number"
      ], 
      [
        "string", 
        "string"
      ], 
      [
        "array", 
        "array"
      ], 
      [
        "time", 
        "time"
      ], 
      [
        "time", 
        "number"
      ]
    ], 
    "name": "add", 
    "url": "add"
  }, 
  "api/javascript/add_listener/": {
    "body": "conn.addListener(event, listener)", 
    "description": "<p>The connection object also supports the event emitter interface so you can listen for\nchanges in connection state.</p>", 
    "example": "<p><strong>Example:</strong> Monitor connection state with events 'connect', 'close', and 'error'.</p>\n<p>```\nr.connect({}, function(err, conn) {\n    if (err) throw err;</p>\n<pre><code>conn.addListener('error', function(e) {\n    processNetworkError(e);\n});\n\nconn.addListener('close', function() {\n    cleanup();\n});\n\nrunQueries(conn);\n</code></pre>\n<p>});</p>\n<p>```</p>", 
    "io": [
      [
        "connection", 
        "undefined"
      ]
    ], 
    "name": "addListener", 
    "url": "add_listener"
  }, 
  "api/javascript/and/": {
    "body": "bool.and(bool) &rarr; bool", 
    "description": "<p>Compute the logical and of two values.</p>", 
    "example": "<p><strong>Example:</strong> True and false anded is false?</p>\n<p><code>r.expr(true).and(false).run(conn, callback)</code></p>", 
    "io": [
      [
        "bool", 
        "bool"
      ]
    ], 
    "name": "and", 
    "url": "and"
  }, 
  "api/javascript/append/": {
    "body": "array.append(value) &rarr; array", 
    "description": "<p>Append a value to an array.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve Iron Man's equipment list with the addition of some new boots.</p>\n<p><code>r.table('marvel').get('IronMan')('equipment').append('newBoots').run(conn, callback)</code></p>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "append", 
    "url": "append"
  }, 
  "api/javascript/args/": {
    "body": "r.args(array) &rarr; special", 
    "description": "<p><code>r.args</code> is a special term that's used to splice an array of arguments\ninto another term.  This is useful when you want to call a variadic\nterm such as <code>getAll</code> with a set of arguments produced at runtime.</p>\n<p>This is analagous to using <strong>apply</strong> in Javascript.</p>", 
    "example": "<p><strong>Example:</strong> Get Alice and Bob from the table <code>people</code>.</p>\n<p><code>r.table('people').getAll('Alice', 'Bob').run(conn, callback)\n// or\nr.table('people').getAll(r.args(['Alice', 'Bob'])).run(conn, callback)</code></p>", 
    "io": [
      "r", 
      "special"
    ], 
    "name": "args", 
    "url": "args"
  }, 
  "api/javascript/avg/": {
    "body": "sequence.avg([fieldOrFunction]) &rarr; number", 
    "description": "<p>Averages all the elements of a sequence.  If called with a field name,\naverages all the values of that field in the sequence, skipping\nelements of the sequence that lack that field.  If called with a\nfunction, calls that function on every element of the sequence and\naverages the results, skipping elements of the sequence where that\nfunction returns <code>null</code> or a non-existence error.</p>", 
    "example": "<p><strong>Example:</strong> What's the average of 3, 5, and 7?</p>\n<p><code>r.expr([3, 5, 7]).avg().run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "number"
      ]
    ], 
    "name": "avg", 
    "url": "avg"
  }, 
  "api/javascript/between/": {
    "body": "table.between(lowerKey, upperKey[, {index:'id', left_bound:'closed', right_bound:'open'}])&rarr; selection", 
    "description": "<p>Get all documents between two keys. Accepts three optional arguments: <code>index</code>,\n<code>left_bound</code>, and <code>right_bound</code>. If <code>index</code> is set to the name of a secondary index,\n<code>between</code> will return all documents where that index's value is in the specified range\n(it uses the primary key by default). <code>left_bound</code> or <code>right_bound</code> may be set to <code>open</code>\nor <code>closed</code> to indicate whether or not to include that endpoint of the range (by default,\n<code>left_bound</code> is closed and <code>right_bound</code> is open).</p>", 
    "example": "<p><strong>Example:</strong> Find all users with primary key &gt;= 10 and &lt; 20 (a normal half-open interval).</p>\n<p><code>r.table('marvel').between(10, 20).run(conn, callback)</code></p>", 
    "io": [
      [
        "table", 
        "selection"
      ]
    ], 
    "name": "between", 
    "url": "between"
  }, 
  "api/javascript/branch/": {
    "body": "r.branch(test, true_branch, false_branch) &rarr; any", 
    "description": "<p>If the <code>test</code> expression returns <code>false</code> or <code>null</code>, the <code>false_branch</code> will be evaluated.\nOtherwise, the <code>true_branch</code> will be evaluated.</p>\n<p>The <code>branch</code> command is effectively an <code>if</code> renamed due to language constraints.\nThe type of the result is determined by the type of the branch that gets executed.</p>", 
    "example": "<p><strong>Example:</strong> Return heroes and superheroes.</p>\n<p><code>r.table('marvel').map(\n    r.branch(\n        r.row('victories').gt(100),\n        r.row('name').add(' is a superhero'),\n        r.row('name').add(' is a hero')\n    )\n).run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "any"
      ]
    ], 
    "name": "branch", 
    "url": "branch"
  }, 
  "api/javascript/change_at/": {
    "body": "array.changeAt(index, value) &rarr; array", 
    "description": "<p>Change a value in an array at a given index. Returns the modified array.</p>", 
    "example": "<p><strong>Example:</strong> Bruce Banner hulks out.</p>\n<p><code>r.expr([\"Iron Man\", \"Bruce\", \"Spider-Man\"]).changeAt(1, \"Hulk\").run(conn, callback)</code></p>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "changeAt", 
    "url": "change_at"
  }, 
  "api/javascript/changes/": {
    "body": "table.changes() &rarr; stream", 
    "description": "<p>Takes a table and returns an infinite stream of objects representing\nchanges to that table.  Whenever an <code>insert</code>, <code>delete</code>, <code>update</code> or\n<code>replace</code> is performed on the table, an object of the form\n<code>{old_val:..., new_val:...}</code> will be added to the stream.  For an\n<code>insert</code>, <code>old_val</code> will be <code>null</code>, and for a <code>delete</code>, <code>new_val</code> will\nbe <code>null</code>.</p>", 
    "example": "<p><strong>Example:</strong> Subscribe to the changes on a table.</p>\n<p><code>r.table('games').changes().run(conn, function(err, cursor) {\n  cursor.each(console.log)\n})</code></p>", 
    "io": [
      [
        "table", 
        "stream"
      ]
    ], 
    "name": "changes", 
    "url": "changes"
  }, 
  "api/javascript/close-cursor/": {
    "body": "cursor.close()", 
    "description": "<p>Close a cursor. Closing a cursor cancels the corresponding query and frees the memory\nassociated with the open request.</p>", 
    "example": "<p><strong>Example:</strong> Close a cursor.</p>\n<p><code>cursor.close()</code></p>", 
    "io": [
      [
        "cursor", 
        "undefined"
      ]
    ], 
    "name": "close (cursor)", 
    "url": "close-cursor"
  }, 
  "api/javascript/close/": {
    "body": "conn.close([opts, ]callback)conn.close([opts]) &rarr; promise", 
    "description": "<p>Close an open connection.  Accepts the following options:</p>\n<ul>\n<li><code>noreplyWait</code>: whether to wait for noreply writes to complete\n  before closing (default <code>true</code>).  If this is set to <code>false</code>, some\n  outstanding noreply writes may be aborted.</li>\n</ul>\n<p>Closing a connection waits until all outstanding requests have\nfinished and then frees any open resources associated with the\nconnection.  If <code>noreplyWait</code> is set to <code>false</code>, all outstanding\nrequests are canceled immediately.</p>", 
    "example": "<p><strong>Example:</strong> Close an open connection, waiting for noreply writes to finish.</p>\n<p><code>conn.close(function(err) { if (err) throw err; })</code></p>\n<p><strong>Example:</strong> Close an open connection immediately.</p>\n<p><code>conn.close({noreplyWait: false}, function(err) { if (err) throw err; })</code></p>", 
    "io": [
      [
        "connection", 
        "undefined"
      ]
    ], 
    "name": "close", 
    "url": "close"
  }, 
  "api/javascript/coerce_to/": {
    "body": "sequence.coerceTo(typeName) &rarr; arrayvalue.coerceTo(typeName) &rarr; stringarray.coerceTo(typeName) &rarr; objectobject.coerceTo(typeName) &rarr; array", 
    "description": "<p>Converts a value of one type into another.</p>\n<p>You can convert: a selection, sequence, or object into an ARRAY, an array of pairs into an OBJECT, and any DATUM into a STRING.</p>", 
    "example": "<p><strong>Example:</strong> Convert a table to an array.</p>\n<p><code>r.table('marvel').coerceTo('array').run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "array"
      ], 
      [
        "value", 
        "string"
      ], 
      [
        "array", 
        "object"
      ], 
      [
        "object", 
        "array"
      ]
    ], 
    "name": "coerceTo", 
    "url": "coerce_to"
  }, 
  "api/javascript/concat_map/": {
    "body": "stream.concatMap(mappingFunction) &rarr; streamarray.concatMap(mappingFunction) &rarr; array", 
    "description": "<p>Concatenate one or more elements into a single sequence using a mapping function.</p>", 
    "example": "<p><strong>Example:</strong> Construct a sequence of all monsters defeated by Marvel heroes. The field \"defeatedMonsters\" is an array of one or more monster names.</p>\n<p><code>r.table('marvel').concatMap(function(hero) {\n    return hero('defeatedMonsters')\n}).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "concatMap", 
    "url": "concat_map"
  }, 
  "api/javascript/connect/": {
    "body": "r.connect(options, callback)r.connect(host, callback)r.connect(options) &rarr; promiser.connect(host) &rarr; promise", 
    "description": "<p>Create a new connection to the database server.  Accepts the following options:</p>\n<ul>\n<li><code>host</code>: the host to connect to (default <code>localhost</code>).</li>\n<li><code>port</code>: the port to connect on (default <code>28015</code>).</li>\n<li><code>db</code>: the default database (default <code>test</code>).</li>\n<li><code>authKey</code>: the authentication key (default none).</li>\n</ul>\n<p>If the connection cannot be established, a <code>RqlDriverError</code> will be passed to the callback instead of a connection.</p>", 
    "example": "<p><strong>Example:</strong> Opens a new connection to the database.</p>\n<p><code>r.connect({ host: 'localhost',\n            port: 28015,\n            db: 'marvel',\n            authKey: 'hunter2' },\n          function(err, conn) { ... })</code></p>", 
    "io": [
      [
        "r", 
        "undefined"
      ]
    ], 
    "name": "connect", 
    "url": "connect"
  }, 
  "api/javascript/contains/": {
    "body": "sequence.contains(value1[, value2...]) &rarr; bool", 
    "description": "<p>Returns whether or not a sequence contains all the specified values, or if functions are\nprovided instead, returns whether or not a sequence contains values matching all the\nspecified functions.</p>", 
    "example": "<p><strong>Example:</strong> Has Iron Man ever fought Superman?</p>\n<p><code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "bool"
      ]
    ], 
    "name": "contains", 
    "url": "contains"
  }, 
  "api/javascript/count/": {
    "body": "sequence.count([filter]) &rarr; number", 
    "description": "<p>Count the number of elements in the sequence. With a single argument, count the number\nof elements equal to it. If the argument is a function, it is equivalent to calling\nfilter before count.</p>", 
    "example": "<p><strong>Example:</strong> Just how many super heroes are there?</p>\n<p><code>r.table('marvel').count().add(r.table('dc').count()).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "number"
      ]
    ], 
    "name": "count", 
    "url": "count"
  }, 
  "api/javascript/date/": {
    "body": "time.date() &rarr; time", 
    "description": "<p>Return a new time object only based on the day, month and year (ie. the same day at 00:00).</p>", 
    "example": "<p><strong>Example:</strong> Retrieve all the users whose birthday is today</p>\n<p><code>r.table(\"users\").filter(function(user) {\n    return user(\"birthdate\").date().eq(r.now().date())\n}).run(conn, callback)</code></p>", 
    "io": [
      [
        "time", 
        "time"
      ]
    ], 
    "name": "date", 
    "url": "date"
  }, 
  "api/javascript/day/": {
    "body": "time.day() &rarr; number", 
    "description": "<p>Return the day of a time object as a number between 1 and 31.</p>", 
    "example": "<p><strong>Example:</strong> Return the users born on the 24th of any month.</p>\n<p><code>r.table(\"users\").filter(\n    r.row(\"birthdate\").day().eq(24)\n).run(conn, callback)</code></p>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "day", 
    "url": "day"
  }, 
  "api/javascript/day_of_week/": {
    "body": "time.dayOfWeek() &rarr; number", 
    "description": "<p>Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard). For your convenience, the terms r.monday, r.tuesday etc. are defined and map to the appropriate integer.</p>", 
    "example": "<p><strong>Example:</strong> Return today's day of week.</p>\n<p><code>r.now().dayOfWeek().run(conn, callback)</code></p>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "dayOfWeek", 
    "url": "day_of_week"
  }, 
  "api/javascript/day_of_year/": {
    "body": "time.dayOfYear() &rarr; number", 
    "description": "<p>Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).</p>", 
    "example": "<p><strong>Example:</strong> Retrieve all the users who were born the first day of a year.</p>\n<p><code>r.table(\"users\").filter(\n    r.row(\"birthdate\").dayOfYear().eq(1)\n)</code></p>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "dayOfYear", 
    "url": "day_of_year"
  }, 
  "api/javascript/db/": {
    "body": "r.db(dbName) &rarr; db", 
    "description": "<p>Reference a database.</p>", 
    "example": "<p><strong>Example:</strong> Before we can query a table we have to select the correct database.</p>\n<p><code>r.db('heroes').table('marvel').run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "db"
      ]
    ], 
    "name": "db", 
    "url": "db"
  }, 
  "api/javascript/db_create/": {
    "body": "r.dbCreate(dbName) &rarr; object", 
    "description": "<p>Create a database. A RethinkDB database is a collection of tables, similar to\nrelational databases.</p>\n<p>If successful, the operation returns an object: <code>{created: 1}</code>. If a database with the\nsame name already exists the operation throws <code>RqlRuntimeError</code>.</p>\n<p>Note: that you can only use alphanumeric characters and underscores for the database name.</p>", 
    "example": "<p><strong>Example:</strong> Create a database named 'superheroes'.</p>\n<p><code>r.dbCreate('superheroes').run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "object"
      ]
    ], 
    "name": "dbCreate", 
    "url": "db_create"
  }, 
  "api/javascript/db_drop/": {
    "body": "r.dbDrop(dbName) &rarr; object", 
    "description": "<p>Drop a database. The database, all its tables, and corresponding data will be deleted.</p>\n<p>If successful, the operation returns the object <code>{dropped: 1}</code>. If the specified database\ndoesn't exist a <code>RqlRuntimeError</code> is thrown.</p>", 
    "example": "<p><strong>Example:</strong> Drop a database named 'superheroes'.</p>\n<p><code>r.dbDrop('superheroes').run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "object"
      ]
    ], 
    "name": "dbDrop", 
    "url": "db_drop"
  }, 
  "api/javascript/db_list/": {
    "body": "r.dbList() &rarr; array", 
    "description": "<p>List all database names in the system. The result is a list of strings.</p>", 
    "example": "<p><strong>Example:</strong> List all databases.</p>\n<p><code>r.dbList().run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "array"
      ]
    ], 
    "name": "dbList", 
    "url": "db_list"
  }, 
  "api/javascript/default/": {
    "body": "value.default(default_value) &rarr; anysequence.default(default_value) &rarr; any", 
    "description": "<p>Handle non-existence errors. Tries to evaluate and return its first argument. If an\nerror related to the absence of a value is thrown in the process, or if its first\nargument returns <code>null</code>, returns its second argument. (Alternatively, the second argument\nmay be a function which will be called with either the text of the non-existence error\nor <code>null</code>.)</p>", 
    "example": "<p><strong>Example:</strong> Suppose we want to retrieve the titles and authors of the table <code>posts</code>.\nIn the case where the author field is missing or <code>null</code>, we want to retrieve the string\n<code>Anonymous</code>.</p>\n<p><code>r.table(\"posts\").map( function(post) {\n    return {\n        title: post(\"title\"),\n        author: post(\"author\").default(\"Anonymous\")\n    }\n}).run(conn, callback)</code></p>", 
    "io": [
      [
        "value", 
        "any"
      ], 
      [
        "sequence", 
        "any"
      ]
    ], 
    "name": "default", 
    "url": "default"
  }, 
  "api/javascript/delete/": {
    "body": "table.delete([{durability: \"hard\", returnVals: false}])&rarr; objectselection.delete([{durability: \"hard\", returnVals: false}])&rarr; objectsingleSelection.delete([{durability: \"hard\", returnVals: false}])&rarr; object", 
    "description": "<p>Delete one or more documents from a table.</p>", 
    "example": "<p><strong>Example:</strong> Delete a single document from the table <code>comments</code>.</p>\n<p><code>r.table(\"comments\").get(\"7eab9e63-73f1-4f33-8ce4-95cbea626f59\").delete().run(conn, callback)</code></p>", 
    "io": [
      [
        "table", 
        "object"
      ], 
      [
        "selection", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "delete", 
    "url": "delete"
  }, 
  "api/javascript/delete_at/": {
    "body": "array.deleteAt(index [,endIndex]) &rarr; array", 
    "description": "<p>Remove an element from an array at a given index. Returns the modified array.</p>", 
    "example": "<p><strong>Example:</strong> Hulk decides to leave the avengers.</p>\n<p><code>r.expr([\"Iron Man\", \"Hulk\", \"Spider-Man\"]).deleteAt(1).run(conn, callback)</code></p>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "deleteAt", 
    "url": "delete_at"
  }, 
  "api/javascript/difference/": {
    "body": "array.difference(array) &rarr; array", 
    "description": "<p>Remove the elements of one array from another array.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve Iron Man's equipment list without boots.</p>\n<p><code>r.table('marvel').get('IronMan')('equipment').difference(['Boots']).run(conn, callback)</code></p>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "difference", 
    "url": "difference"
  }, 
  "api/javascript/distinct/": {
    "body": "sequence.distinct() &rarr; array", 
    "description": "<p>Remove duplicate elements from the sequence.</p>", 
    "example": "<p><strong>Example:</strong> Which unique villains have been vanquished by marvel heroes?</p>\n<p><code>r.table('marvel').concatMap(function(hero) {return hero('villainList')}).distinct()\n    .run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "value"
      ]
    ], 
    "name": "distinct", 
    "url": "distinct"
  }, 
  "api/javascript/div/": {
    "body": "number.div(number) &rarr; number", 
    "description": "<p>Divide two numbers.</p>", 
    "example": "<p><strong>Example:</strong> It's as easy as 2 / 2 = 1.</p>\n<p><code>r.expr(2).div(2).run(conn, callback)</code></p>", 
    "io": [
      [
        "number", 
        "number"
      ]
    ], 
    "name": "div", 
    "url": "div"
  }, 
  "api/javascript/do/": {
    "body": "any.do(function) &rarr; anyr.do([args]*, function) &rarr; anyany.do(expr) &rarr; anyr.do([args]*, expr) &rarr; any", 
    "description": "<p>Evaluate an expression and pass its values as arguments to a function or to an expression.</p>\n<p><strong>Example:</strong> Compute a golfer's net score for a game.</p>\n<p><code>js\nr.table('players').get('f19b5f16-ef14-468f-bd48-e194761df255').do(\n    function (player) {\n        return player('gross_score').sub(player('course_handicap'));\n    }\n).run(conn, callback);</code></p>", 
    "example": "", 
    "io": [
      [
        "any", 
        "any"
      ]
    ], 
    "name": "do", 
    "url": "do"
  }, 
  "api/javascript/downcase/": {
    "body": "string.downcase() &rarr; string", 
    "description": "<p>Downcases a string.</p>", 
    "example": "<p><strong>Example:</strong></p>\n<p><code>r.expr(\"Sentence about LaTeX.\").downcase().run(conn, callback)</code></p>", 
    "io": [
      [
        "string", 
        "string"
      ]
    ], 
    "name": "downcase", 
    "url": "downcase"
  }, 
  "api/javascript/during/": {
    "body": "time.during(startTime, endTime[, options]) &rarr; bool", 
    "description": "<p>Return if a time is between two other times (by default, inclusive for the start, exclusive for the end).</p>", 
    "example": "<p><strong>Example:</strong> Retrieve all the posts that were posted between December 1st, 2013 (inclusive) and December 10th, 2013 (exclusive).</p>\n<p><code>r.table(\"posts\").filter(\n    r.row('date').during(r.time(2013, 12, 1), r.time(2013, 12, 10))\n).run(conn, callback)</code></p>", 
    "io": [
      [
        "time", 
        "bool"
      ]
    ], 
    "name": "during", 
    "url": "during"
  }, 
  "api/javascript/each/": {
    "body": "cursor.each(callback[, onFinishedCallback])array.each(callback[, onFinishedCallback])", 
    "description": "<p>Lazily iterate over the result set one element at a time.</p>", 
    "example": "<p><strong>Example:</strong> Let's process all the elements!</p>\n<p><code>cursor.each(function(err, row) {\n    if (err) throw err;\n    processRow(row);\n});</code></p>", 
    "io": [
      [
        "cursor", 
        "undefined"
      ]
    ], 
    "name": "each", 
    "url": "each"
  }, 
  "api/javascript/epoch_time/": {
    "body": "r.epochTime(epochTime) &rarr; time", 
    "description": "<p>Create a time object based on seconds since epoch. The first argument is a double and\nwill be rounded to three decimal places (millisecond-precision).</p>", 
    "example": "<p><strong>Example:</strong> Update the birthdate of the user \"John\" to November 3rd, 1986.</p>\n<p><code>r.table(\"user\").get(\"John\").update({birthdate: r.epochTime(531360000)})\n    .run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "time"
      ]
    ], 
    "name": "epochTime", 
    "url": "epoch_time"
  }, 
  "api/javascript/eq/": {
    "body": "value.eq(value) &rarr; bool", 
    "description": "<p>Test if two values are equal.</p>", 
    "example": "<p><strong>Example:</strong> Does 2 equal 2?</p>\n<p><code>r.expr(2).eq(2).run(conn, callback)</code></p>", 
    "io": [
      [
        "value", 
        "bool"
      ]
    ], 
    "name": "eq", 
    "url": "eq"
  }, 
  "api/javascript/eq_join/": {
    "body": "sequence.eqJoin(leftField, rightTable[, {index:'id'}]) &rarr; sequence", 
    "description": "<p>Join tables using a field on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</p>\n<p><strong>Example:</strong> Match players with the games they've played against one another.</p>\n<p><code>js\nr.table('players').eqJoin('gameId', r.table('games')).run(conn, callback)</code></p>", 
    "example": "", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "eqJoin", 
    "url": "eq_join"
  }, 
  "api/javascript/error/": {
    "body": "r.error(message) &rarr; error", 
    "description": "<p>Throw a runtime error. If called with no arguments inside the second argument to <code>default</code>, re-throw the current error.</p>", 
    "example": "<p><strong>Example:</strong> Iron Man can't possibly have lost a battle:</p>\n<p><code>r.table('marvel').get('IronMan').do(function(ironman) {\n    return r.branch(ironman('victories').lt(ironman('battles')),\n        r.error('impossible code path'),\n        ironman)\n}).run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "error"
      ]
    ], 
    "name": "error", 
    "url": "error"
  }, 
  "api/javascript/expr/": {
    "body": "r.expr(value) &rarr; value", 
    "description": "<p>Construct a ReQL JSON object from a native object.</p>", 
    "example": "<p><strong>Example:</strong> Objects wrapped with <code>expr</code> can then be manipulated by ReQL API functions.</p>\n<p><code>r.expr({a:'b'}).merge({b:[1,2,3]}).run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "value"
      ]
    ], 
    "name": "expr", 
    "url": "expr"
  }, 
  "api/javascript/filter/": {
    "body": "sequence.filter(predicate[, {default: false}]) &rarr; selectionstream.filter(predicate[, {default: false}]) &rarr; streamarray.filter(predicate[, {default: false}]) &rarr; array", 
    "description": "<p>Get all the documents for which the given predicate is true.</p>\n<p><code>filter</code> can be called on a sequence, selection, or a field containing an array of\nelements. The return type is the same as the type on which the function was called on.</p>\n<p>The body of every filter is wrapped in an implicit <code>.default(false)</code>, which means that\nif a non-existence errors is thrown (when you try to access a field that does not exist\nin a document), RethinkDB will just ignore the document.\nThe <code>default</code> value can be changed by passing an object with a <code>default</code> field.\nSetting this optional argument to <code>r.error()</code> will cause any non-existence errors to\nreturn a <code>RqlRuntimeError</code>.</p>", 
    "example": "<p><strong>Example:</strong> Get all the users that are 30 years old.</p>\n<p><code>r.table('users').filter({age: 30}).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "selection"
      ], 
      [
        "stream", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "filter", 
    "url": "filter"
  }, 
  "api/javascript/for_each/": {
    "body": "sequence.forEach(write_query) &rarr; object", 
    "description": "<p>Loop over a sequence, evaluating the given write query for each element.</p>", 
    "example": "<p><strong>Example:</strong> Now that our heroes have defeated their villains, we can safely remove them from the villain table.</p>\n<p><code>r.table('marvel').forEach(function(hero) {\n    return r.table('villains').get(hero('villainDefeated')).delete()\n}).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "object"
      ]
    ], 
    "name": "forEach", 
    "url": "for_each"
  }, 
  "api/javascript/ge/": {
    "body": "value.ge(value) &rarr; bool", 
    "description": "<p>Test if the first value is greater than or equal to other.</p>", 
    "example": "<p><strong>Example:</strong> Is 2 greater than or equal to 2?</p>\n<p><code>r.expr(2).ge(2).run(conn, callback)</code></p>", 
    "io": [
      [
        "value", 
        "bool"
      ]
    ], 
    "name": "ge", 
    "url": "ge"
  }, 
  "api/javascript/get/": {
    "body": "table.get(key) &rarr; singleRowSelection", 
    "description": "<p>Get a document by primary key.</p>\n<p>If no document exists with that primary key, <code>get</code> will return <code>null</code>.</p>", 
    "example": "<p><strong>Example:</strong> Find a document by UUID.</p>\n<p><code>r.table('posts').get('a9849eef-7176-4411-935b-79a6e3c56a74').run(conn, callback)</code></p>", 
    "io": [
      [
        "table", 
        "singleSelection"
      ]
    ], 
    "name": "get", 
    "url": "get"
  }, 
  "api/javascript/get_all/": {
    "body": "table.getAll(key[, key2...], [, {index:'id'}]) &rarr; selection", 
    "description": "<p>Get all documents where the given value matches the value of the requested index.</p>", 
    "example": "<p><strong>Example:</strong> Secondary index keys are not guaranteed to be unique so we cannot query via\n\"get\" when using a secondary index.</p>\n<p><code>r.table('marvel').getAll('man_of_steel', {index:'code_name'}).run(conn, callback)</code></p>", 
    "io": [
      [
        "table", 
        "selection"
      ]
    ], 
    "name": "getAll", 
    "url": "get_all"
  }, 
  "api/javascript/get_field/": {
    "body": "sequence(attr) &rarr; sequencesingleSelection(attr) &rarr; valueobject(attr) &rarr; value", 
    "description": "<p>Get a single field from an object. If called on a sequence, gets that field from every\nobject in the sequence, skipping objects that lack it.</p>", 
    "example": "<p><strong>Example:</strong> What was Iron Man's first appearance in a comic?</p>\n<p><code>r.table('marvel').get('IronMan')('firstAppearance').run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "sequence"
      ], 
      [
        "singleSelection", 
        "value"
      ], 
      [
        "object", 
        "value"
      ]
    ], 
    "name": "()", 
    "url": "get_field"
  }, 
  "api/javascript/group/": {
    "body": "sequence.group(fieldOrFunction..., [{index: \"indexName\"}) &rarr; grouped_stream", 
    "description": "<p>Takes a stream and partitions it into multiple groups based on the\nfields or functions provided.  Commands chained after <code>group</code> will be\ncalled on each of these grouped sub-streams, producing grouped data.</p>", 
    "example": "<p><strong>Example:</strong> What is each player's best game?</p>\n<p><code>r.table('games').group('player').max('points').run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "grouped_stream"
      ]
    ], 
    "name": "group", 
    "url": "group"
  }, 
  "api/javascript/gt/": {
    "body": "value.gt(value) &rarr; bool", 
    "description": "<p>Test if the first value is greater than other.</p>", 
    "example": "<p><strong>Example:</strong> Is 2 greater than 2?</p>\n<p><code>r.expr(2).gt(2).run(conn, callback)</code></p>", 
    "io": [
      [
        "value", 
        "bool"
      ]
    ], 
    "name": "gt", 
    "url": "gt"
  }, 
  "api/javascript/has_fields/": {
    "body": "sequence.hasFields([selector1, selector2...]) &rarr; streamarray.hasFields([selector1, selector2...]) &rarr; arrayobject.hasFields([selector1, selector2...]) &rarr; boolean", 
    "description": "<p>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code>{'a': 1,'b': 2,'c': null}</code> has the fields <code>a</code> and <code>b</code>.</p>", 
    "example": "<p><strong>Example:</strong> Return the players who have won games.</p>\n<p><code>r.table('players').hasFields('games_won').run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ], 
      [
        "singleSelection", 
        "boolean"
      ], 
      [
        "object", 
        "boolean"
      ]
    ], 
    "name": "hasFields", 
    "url": "has_fields"
  }, 
  "api/javascript/hours/": {
    "body": "time.hours() &rarr; number", 
    "description": "<p>Return the hour in a time object as a number between 0 and 23.</p>", 
    "example": "<p><strong>Example:</strong> Return all the posts submitted after midnight and before 4am.</p>\n<p><code>r.table(\"posts\").filter(function(post) {\n    return post(\"date\").hours().lt(4)\n})</code></p>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "hours", 
    "url": "hours"
  }, 
  "api/javascript/http/": {
    "body": "r.http(url [, options]) &rarr; value", 
    "description": "<p>Retrieve data from the specified URL over HTTP.  The return type depends on the <code>resultFormat</code> option, which checks the <code>Content-Type</code> of the response by default.</p>", 
    "example": "<p><strong>Example:</strong> Perform a simple HTTP <code>GET</code> request, and store the result in a table.</p>\n<p><code>js\nr.table('posts').insert(r.http('httpbin.org/get')).run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "value"
      ], 
      [
        "r", 
        "stream"
      ]
    ], 
    "name": "http", 
    "url": "http"
  }, 
  "api/javascript/in_timezone/": {
    "body": "time.inTimezone(timezone) &rarr; time", 
    "description": "<p>Return a new time object with a different timezone. While the time stays the same, the results returned by methods such as hours() will change since they take the timezone into account. The timezone argument has to be of the ISO 8601 format.</p>", 
    "example": "<p><strong>Example:</strong> Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).</p>\n<p><code>r.now().inTimezone('-08:00').hours().run(conn, callback)</code></p>", 
    "io": [
      [
        "time", 
        "time"
      ]
    ], 
    "name": "inTimezone", 
    "url": "in_timezone"
  }, 
  "api/javascript/index_create/": {
    "body": "table.indexCreate(indexName[, indexFunction]) &rarr; object", 
    "description": "<p>Create a new secondary index on this table.</p>", 
    "example": "<p><strong>Example:</strong> To efficiently query our heros by code name we have to create a secondary\nindex.</p>\n<p><code>r.table('dc').indexCreate('code_name').run(conn, callback)</code></p>", 
    "io": [
      [
        "table", 
        "object"
      ]
    ], 
    "name": "indexCreate", 
    "url": "index_create"
  }, 
  "api/javascript/index_drop/": {
    "body": "table.indexDrop(indexName) &rarr; object", 
    "description": "<p>Delete a previously created secondary index of this table.</p>", 
    "example": "<p><strong>Example:</strong> Drop a secondary index named 'code_name'.</p>\n<p><code>r.table('dc').indexDrop('code_name').run(conn, callback)</code></p>", 
    "io": [
      [
        "table", 
        "object"
      ]
    ], 
    "name": "indexDrop", 
    "url": "index_drop"
  }, 
  "api/javascript/index_list/": {
    "body": "table.indexList() &rarr; array", 
    "description": "<p>List all the secondary indexes of this table.</p>", 
    "example": "<p><strong>Example:</strong> List the available secondary indexes for this table.</p>\n<p><code>r.table('marvel').indexList().run(conn, callback)</code></p>", 
    "io": [
      [
        "table", 
        "array"
      ]
    ], 
    "name": "indexList", 
    "url": "index_list"
  }, 
  "api/javascript/index_status/": {
    "body": "table.indexStatus([, index...]) &rarr; array", 
    "description": "<p>Get the status of the specified indexes on this table, or the status\nof all indexes on this table if no indexes are specified.</p>", 
    "example": "<p><strong>Example:</strong> Get the status of all the indexes on <code>test</code>:</p>\n<p><code>r.table('test').indexStatus().run(conn, callback)</code></p>\n<p><strong>Example:</strong> Get the status of the <code>timestamp</code> index:</p>\n<p><code>r.table('test').indexStatus('timestamp').run(conn, callback)</code></p>", 
    "io": [
      [
        "table", 
        "array"
      ]
    ], 
    "name": "indexStatus", 
    "url": "index_status"
  }, 
  "api/javascript/index_wait/": {
    "body": "table.indexWait([, index...]) &rarr; array", 
    "description": "<p>Wait for the specified indexes on this table to be ready, or for all\nindexes on this table to be ready if no indexes are specified.</p>", 
    "example": "<p><strong>Example:</strong> Wait for all indexes on the table <code>test</code> to be ready:</p>\n<p><code>r.table('test').indexWait().run(conn, callback)</code></p>\n<p><strong>Example:</strong> Wait for the index <code>timestamp</code> to be ready:</p>\n<p><code>r.table('test').indexWait('timestamp').run(conn, callback)</code></p>", 
    "io": [
      [
        "table", 
        "array"
      ]
    ], 
    "name": "indexWait", 
    "url": "index_wait"
  }, 
  "api/javascript/indexes_of/": {
    "body": "sequence.indexesOf(datum | predicate) &rarr; array", 
    "description": "<p>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</p>", 
    "example": "<p><strong>Example:</strong> Find the position of the letter 'c'.</p>\n<p><code>r.expr(['a','b','c']).indexesOf('c').run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "array"
      ]
    ], 
    "name": "indexesOf", 
    "url": "indexes_of"
  }, 
  "api/javascript/info/": {
    "body": "any.info() &rarr; object", 
    "description": "<p>Get information about a ReQL value.</p>", 
    "example": "<p><strong>Example:</strong> Get information about a table such as primary key, or cache size.</p>\n<p><code>r.table('marvel').info().run(conn, callback)</code></p>", 
    "io": [
      [
        "any", 
        "object"
      ]
    ], 
    "name": "info", 
    "url": "info"
  }, 
  "api/javascript/inner_join/": {
    "body": "sequence.innerJoin(otherSequence, predicate) &rarr; streamarray.innerJoin(otherSequence, predicate) &rarr; array", 
    "description": "<p>Returns the inner product of two sequences (e.g. a table, a filter result) filtered by\nthe predicate. The query compares each row of the left sequence with each row of the\nright sequence to find all pairs of rows which satisfy the predicate. When the predicate\nis satisfied, each matched pair of rows of both sequences are combined into a result row.</p>", 
    "example": "<p><strong>Example:</strong> Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose.</p>\n<p><code>r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {\n    return marvelRow('strength').lt(dcRow('strength'))\n}).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "innerJoin", 
    "url": "inner_join"
  }, 
  "api/javascript/insert/": {
    "body": "table.insert(json | [json][, {durability: \"hard\", returnVals: false, upsert: false}])&rarr; object", 
    "description": "<p>Insert JSON documents into a table. Accepts a single JSON document or an array of\ndocuments.</p>", 
    "example": "<p><strong>Example:</strong> Insert a document into the table <code>posts</code>.</p>\n<p><code>r.table(\"posts\").insert({\n    id: 1,\n    title: \"Lorem ipsum\",\n    content: \"Dolor sit amet\"\n}).run(conn, callback)</code></p>", 
    "io": [
      [
        "table", 
        "object"
      ], 
      [
        "selection", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "insert", 
    "url": "insert"
  }, 
  "api/javascript/insert_at/": {
    "body": "array.insertAt(index, value) &rarr; array", 
    "description": "<p>Insert a value in to an array at a given index. Returns the modified array.</p>", 
    "example": "<p><strong>Example:</strong> Hulk decides to join the avengers.</p>\n<p><code>r.expr([\"Iron Man\", \"Spider-Man\"]).insertAt(1, \"Hulk\").run(conn, callback)</code></p>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "insertAt", 
    "url": "insert_at"
  }, 
  "api/javascript/is_empty/": {
    "body": "sequence.isEmpty() &rarr; bool", 
    "description": "<p>Test if a sequence is empty.</p>", 
    "example": "<p><strong>Example:</strong> Are there any documents in the marvel table?</p>\n<p><code>r.table('marvel').isEmpty().run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "bool"
      ]
    ], 
    "name": "isEmpty", 
    "url": "is_empty"
  }, 
  "api/javascript/iso8601/": {
    "body": "r.ISO8601(iso8601Date[, {default_timezone:''}]) &rarr; time", 
    "description": "<p>Create a time object based on an iso8601 date-time string (e.g.\n'2013-01-01T01:01:01+00:00'). We support all valid ISO 8601 formats except for week\ndates. If you pass an ISO 8601 date-time without a time zone, you must specify the time\nzone with the optarg <code>default_timezone</code>. Read more about the ISO 8601 format on the\nWikipedia page.</p>", 
    "example": "<p><strong>Example:</strong> Update the time of John's birth.</p>\n<p><code>r.table(\"user\").get(\"John\").update({birth: r.ISO8601('1986-11-03T08:30:00-07:00')}).run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "time"
      ]
    ], 
    "name": "ISO8601", 
    "url": "iso8601"
  }, 
  "api/javascript/js/": {
    "body": "r.js(jsString[, {timeout: <number>}]) &rarr; value", 
    "description": "<p>Create a javascript expression.</p>", 
    "example": "<p><strong>Example:</strong> Concatenate two strings using Javascript'</p>\n<p><code>r.js(\"'str1' + 'str2'\").run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "value"
      ]
    ], 
    "name": "js", 
    "url": "js"
  }, 
  "api/javascript/json/": {
    "body": "r.json(json_string) &rarr; value", 
    "description": "<p>Parse a JSON string on the server.</p>", 
    "example": "<p><strong>Example:</strong> Send an array to the server.</p>\n<p><code>r.json(\"[1,2,3]\").run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "value"
      ]
    ], 
    "name": "json", 
    "url": "json"
  }, 
  "api/javascript/keys/": {
    "body": "singleSelection.keys() &rarr; arrayobject.keys() &rarr; array", 
    "description": "<p>Return an array containing all of the object's keys.</p>", 
    "example": "<p><strong>Example:</strong> Get all the keys of a row.</p>\n<p><code>r.table('marvel').get('ironman').keys().run(conn, callback)</code></p>", 
    "io": [
      [
        "singleSelection", 
        "array"
      ], 
      [
        "object", 
        "array"
      ]
    ], 
    "name": "keys", 
    "url": "keys"
  }, 
  "api/javascript/le/": {
    "body": "value.le(value) &rarr; bool", 
    "description": "<p>Test if the first value is less than or equal to other.</p>", 
    "example": "<p><strong>Example:</strong> Is 2 less than or equal to 2?</p>\n<p><code>r.expr(2).le(2).run(conn, callback)</code></p>", 
    "io": [
      [
        "value", 
        "bool"
      ]
    ], 
    "name": "le", 
    "url": "le"
  }, 
  "api/javascript/limit/": {
    "body": "sequence.limit(n) &rarr; streamarray.limit(n) &rarr; array", 
    "description": "<p>End the sequence after the given number of elements.</p>", 
    "example": "<p><strong>Example:</strong> Only so many can fit in our Pantheon of heroes.</p>\n<p><code>r.table('marvel').orderBy('belovedness').limit(10).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "limit", 
    "url": "limit"
  }, 
  "api/javascript/lt/": {
    "body": "value.lt(value) &rarr; bool", 
    "description": "<p>Test if the first value is less than other.</p>", 
    "example": "<p><strong>Example:</strong> Is 2 less than 2?</p>\n<p><code>r.expr(2).lt(2).run(conn, callback)</code></p>", 
    "io": [
      [
        "value", 
        "bool"
      ]
    ], 
    "name": "lt", 
    "url": "lt"
  }, 
  "api/javascript/map/": {
    "body": "sequence.map(mappingFunction) &rarr; streamarray.map(mappingFunction) &rarr; array", 
    "description": "<p>Transform each element of the sequence by applying the given mapping function.</p>", 
    "example": "<p><strong>Example:</strong> Construct a sequence of hero power ratings.</p>\n<p><code>r.table('marvel').map(function(hero) {\n    return hero('combatPower').add(hero('compassionPower').mul(2))\n}).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "map", 
    "url": "map"
  }, 
  "api/javascript/match/": {
    "body": "string.match(regexp) &rarr; null/object", 
    "description": "<p>Matches against a regular expression. If there is a match, returns an object with the fields:</p>\n<ul>\n<li><code>str</code>: The matched string</li>\n<li><code>start</code>: The matched string's start</li>\n<li><code>end</code>: The matched string's end</li>\n<li><code>groups</code>: The capture groups defined with parentheses</li>\n</ul>\n<p>If no match is found, returns <code>null</code>.</p>", 
    "example": "<p><strong>Example:</strong> Get all users whose name starts with \"A\". </p>\n<p><code>r.table('users').filter(function(doc){\n    return doc('name').match(\"^A\")\n}).run(conn, callback)</code></p>", 
    "io": [
      [
        "string", 
        "object"
      ]
    ], 
    "name": "match", 
    "url": "match"
  }, 
  "api/javascript/max/": {
    "body": "sequence.max([fieldOrFunction]) &rarr; element", 
    "description": "<p>Finds the maximum of a sequence.  If called with a field name, finds\nthe element of that sequence with the largest value in that field.  If\ncalled with a function, calls that function on every element of the\nsequence and returns the element which produced the largest value,\nignoring any elements where the function returns <code>null</code> or produces a\nnon-existence error.</p>", 
    "example": "<p><strong>Example:</strong> What's the maximum of 3, 5, and 7?</p>\n<p><code>r.expr([3, 5, 7]).max().run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "value"
      ]
    ], 
    "name": "max", 
    "url": "max"
  }, 
  "api/javascript/merge/": {
    "body": "singleSelection.merge(object) &rarr; objectobject.merge(object) &rarr; objectsequence.merge(object) &rarr; streamarray.merge(object) &rarr; array", 
    "description": "<p>Merge two objects together to construct a new object with properties from both. Gives preference to attributes from other when there is a conflict.</p>", 
    "example": "<p><strong>Example:</strong> Equip IronMan for battle.</p>\n<p><code>r.table('marvel').get('IronMan').merge(\n    r.table('loadouts').get('alienInvasionKit')\n).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ], 
      [
        "object", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "merge", 
    "url": "merge"
  }, 
  "api/javascript/min/": {
    "body": "sequence.min([fieldOrFunction]) &rarr; element", 
    "description": "<p>Finds the minimum of a sequence.  If called with a field name, finds\nthe element of that sequence with the smallest value in that field.\nIf called with a function, calls that function on every element of the\nsequence and returns the element which produced the smallest value,\nignoring any elements where the function returns <code>null</code> or produces a\nnon-existence error.</p>", 
    "example": "<p><strong>Example:</strong> What's the minimum of 3, 5, and 7?</p>\n<p><code>r.expr([3, 5, 7]).min().run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "value"
      ]
    ], 
    "name": "min", 
    "url": "min"
  }, 
  "api/javascript/minutes/": {
    "body": "time.minutes() &rarr; number", 
    "description": "<p>Return the minute in a time object as a number between 0 and 59.</p>", 
    "example": "<p><strong>Example:</strong> Return all the posts submitted during the first 10 minutes of every hour.</p>\n<p><code>r.table(\"posts\").filter(function(post) {\n    return post(\"date\").minutes().lt(10)\n})</code></p>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "minutes", 
    "url": "minutes"
  }, 
  "api/javascript/mod/": {
    "body": "number.mod(number) &rarr; number", 
    "description": "<p>Find the remainder when dividing two numbers.</p>", 
    "example": "<p><strong>Example:</strong> It's as easy as 2 % 2 = 0.</p>\n<p><code>r.expr(2).mod(2).run(conn, callback)</code></p>", 
    "io": [
      [
        "number", 
        "number"
      ]
    ], 
    "name": "mod", 
    "url": "mod"
  }, 
  "api/javascript/month/": {
    "body": "time.month() &rarr; number", 
    "description": "<p>Return the month of a time object as a number between 1 and 12. For your convenience, the terms r.january, r.february etc. are defined and map to the appropriate integer.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve all the users who were born in November.</p>\n<p><code>r.table(\"users\").filter(\n    r.row(\"birthdate\").month().eq(11)\n)</code></p>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "month", 
    "url": "month"
  }, 
  "api/javascript/mul/": {
    "body": "number.mul(number) &rarr; numberarray.mul(number) &rarr; array", 
    "description": "<p>Multiply two numbers, or make a periodic array.</p>", 
    "example": "<p><strong>Example:</strong> It's as easy as 2 * 2 = 4.</p>\n<p><code>r.expr(2).mul(2).run(conn, callback)</code></p>", 
    "io": [
      [
        "number", 
        "number"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "mul", 
    "url": "mul"
  }, 
  "api/javascript/ne/": {
    "body": "value.ne(value) &rarr; bool", 
    "description": "<p>Test if two values are not equal.</p>", 
    "example": "<p><strong>Example:</strong> Does 2 not equal 2?</p>\n<p><code>r.expr(2).ne(2).run(conn, callback)</code></p>", 
    "io": [
      [
        "value", 
        "bool"
      ]
    ], 
    "name": "ne", 
    "url": "ne"
  }, 
  "api/javascript/next/": {
    "body": "cursor.next(callback)array.next(callback)cursor.next() &rarr; promisearray.next() &rarr; promise", 
    "description": "<p>Get the next element in the cursor.</p>", 
    "example": "<p><strong>Example:</strong> Let's grab the next element!</p>\n<p><code>cursor.next(function(err, row) {\n    if (err) throw err;\n    processRow(row);\n});</code></p>", 
    "io": [
      [
        "cursor", 
        "undefined"
      ]
    ], 
    "name": "next", 
    "url": "next"
  }, 
  "api/javascript/noreply_wait/": {
    "body": "conn.noreplyWait(callback)conn.noreplyWait() &rarr; promise", 
    "description": "<p><code>noreplyWait</code> ensures that previous queries with the <code>noreply</code> flag have been processed\nby the server. Note that this guarantee only applies to queries run on the given connection.</p>", 
    "example": "<p><strong>Example:</strong> We have previously run queries with the <code>noreply</code> argument set to <code>true</code>. Now\nwait until the server has processed them.</p>\n<p><code>conn.noreplyWait(function(err) { ... })</code></p>", 
    "io": [
      [
        "connection", 
        null
      ]
    ], 
    "name": "noreplyWait", 
    "url": "noreply_wait"
  }, 
  "api/javascript/not/": {
    "body": "bool.not() &rarr; boolnot(bool) &rarr; bool", 
    "description": "<p>Compute the logical inverse (not) of an expression.</p>\n<p><code>not</code> can be called either via method chaining, immediately after an expression that evaluates as a boolean value, or by passing the expression as a parameter to <code>not</code>.</p>", 
    "example": "<p><strong>Example:</strong> Not true is false.</p>\n<p><code>r(true).not().run(conn, callback)\nr.not(true).run(conn, callback)</code></p>", 
    "io": [
      [
        "bool", 
        "bool"
      ]
    ], 
    "name": "not", 
    "url": "not"
  }, 
  "api/javascript/now/": {
    "body": "r.now() &rarr; time", 
    "description": "<p>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</p>", 
    "example": "<p><strong>Example:</strong> Add a new user with the time at which he subscribed.</p>\n<p><code>r.table(\"users\").insert({\n    name: \"John\",\n    subscription_date: r.now()\n}).run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "time"
      ]
    ], 
    "name": "now", 
    "url": "now"
  }, 
  "api/javascript/nth/": {
    "body": "sequence.nth(index) &rarr; objectselection.nth(index) &rarr; selection&lt;object&gt;", 
    "description": "<p>Get the <em>nth</em> element of a sequence.</p>", 
    "example": "<p><strong>Example:</strong> Select the second element in the array.</p>\n<p><code>r.expr([1,2,3]).nth(1).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "object"
      ]
    ], 
    "name": "nth", 
    "url": "nth"
  }, 
  "api/javascript/object/": {
    "body": "r.object([key, value,]...) &rarr; object", 
    "description": "<p>Creates an object from a list of key-value pairs, where the keys must\nbe strings.  <code>r.object(A, B, C, D)</code> is equivalent to\n<code>r.expr([[A, B], [C, D]]).coerce_to('OBJECT')</code>.</p>", 
    "example": "<p><strong>Example:</strong> Create a simple object.</p>\n<p><code>r.object('id', 5, 'data', ['foo', 'bar']).run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "object"
      ]
    ], 
    "name": "object", 
    "url": "object"
  }, 
  "api/javascript/or/": {
    "body": "bool.or(bool) &rarr; bool", 
    "description": "<p>Compute the logical or of two values.</p>", 
    "example": "<p><strong>Example:</strong> True or false ored is true?</p>\n<p><code>r.expr(true).or(false).run(conn, callback)</code></p>", 
    "io": [
      [
        "bool", 
        "bool"
      ]
    ], 
    "name": "or", 
    "url": "or"
  }, 
  "api/javascript/order_by/": {
    "body": "table.orderBy([key1...], {index: index_name}) &rarr; selection<stream>selection.orderBy(key1, [key2...]) &rarr; selection<array>sequence.orderBy(key1, [key2...]) &rarr; array", 
    "description": "<p>Sort the sequence by document values of the given key(s). To specify\nthe ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>\n(defaults to ascending).</p>\n<p>Sorting without an index requires the server to hold the sequence in\nmemory, and is limited to 100,000 documents. Sorting with an index can\nbe done on arbitrarily large tables, or after a <code>between</code> command\nusing the same index.</p>", 
    "example": "<p><strong>Example:</strong> Order all the posts using the index <code>date</code>.   </p>\n<p><code>r.table('posts').orderBy({index: 'date'}).run(conn, callback)</code></p>\n<p>The index must have been previously created with <a href=\"/api/javascript/index_create/\">indexCreate</a>.</p>\n<p><code>r.table('posts').indexCreate('date').run(conn, callback)</code></p>\n<p>You can also select a descending ordering:</p>\n<p><code>r.table('posts').orderBy({index: r.desc('date')}).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "orderBy", 
    "url": "order_by"
  }, 
  "api/javascript/outer_join/": {
    "body": "sequence.outerJoin(otherSequence, predicate) &rarr; streamarray.outerJoin(otherSequence, predicate) &rarr; array", 
    "description": "<p>Computes a left outer join by retaining each row in the left table even if no match was\nfound in the right table.</p>", 
    "example": "<p><strong>Example:</strong> Construct a sequence of documents containing all cross-universe matchups\nwhere a marvel hero would lose, but keep marvel heroes who would never lose a matchup in\nthe sequence.</p>\n<p><code>r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {\n    return marvelRow('strength').lt(dcRow('strength'))\n}).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "outerJoin", 
    "url": "outer_join"
  }, 
  "api/javascript/pluck/": {
    "body": "sequence.pluck([selector1, selector2...]) &rarr; streamarray.pluck([selector1, selector2...]) &rarr; arrayobject.pluck([selector1, selector2...]) &rarr; objectsingleSelection.pluck([selector1, selector2...]) &rarr; object", 
    "description": "<p>Plucks out one or more attributes from either an object or a sequence of objects\n(projection).</p>", 
    "example": "<p><strong>Example:</strong> We just need information about IronMan's reactor and not the rest of the\ndocument.</p>\n<p><code>r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ], 
      [
        "object", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "pluck", 
    "url": "pluck"
  }, 
  "api/javascript/prepend/": {
    "body": "array.prepend(value) &rarr; array", 
    "description": "<p>Prepend a value to an array.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve Iron Man's equipment list with the addition of some new boots.</p>\n<p><code>r.table('marvel').get('IronMan')('equipment').prepend('newBoots').run(conn, callback)</code></p>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "prepend", 
    "url": "prepend"
  }, 
  "api/javascript/r/": {
    "body": "r &rarr; r", 
    "description": "<p>The top-level ReQL namespace.</p>", 
    "example": "<p><strong>Example:</strong> Set up your top-level namespace.</p>\n<p><code>var r = require('rethinkdb');</code></p>", 
    "io": [
      [
        null, 
        "r"
      ]
    ], 
    "name": "r", 
    "url": "r"
  }, 
  "api/javascript/random/": {
    "body": "r.random() &rarr numberr.random(integer) &rarr integerr.random(integer, integer) &rarr integerr.random(number, number, {float: true}) &rarr number", 
    "description": "<p>Generate a random number between the given bounds. If no arguments are given, the result\nwill be a floating-point number in the range <code>[0,1)</code>.</p>\n<p>When passing a single argument, <code>r.random(x)</code>, the result will be in the range <code>[0,x)</code>,\nand when passing two arguments, <code>r.random(x,y)</code>, the range is <code>[x,y)</code>. If <code>x</code> and <code>y</code> are\nequal, an error will occur, unless generating a floating-point number, for which <code>x</code> will\nbe returned.</p>\n<p>Note: The last argument given will always be the 'open' side of the range, but when\ngenerating a floating-point number, the 'open' side may be less than the 'closed' side.</p>", 
    "example": "<p><strong>Example:</strong> Generate a random integer in the range <code>[0,100)</code></p>\n<p><code>r.random(100).run(conn, callback)\nr.random(0, 100).run(conn, callback)</code></p>", 
    "io": [
      "r", 
      "number"
    ], 
    "name": "random", 
    "url": "random"
  }, 
  "api/javascript/reconnect/": {
    "body": "conn.reconnect([opts, ]callback)conn.reconnect([opts]) &rarr; promise", 
    "description": "<p>Close and reopen a connection.  Accepts the following options:</p>\n<ul>\n<li><code>noreplyWait</code>: whether to wait for noreply writes to complete\n  before closing (default <code>true</code>).  If this is set to <code>false</code>, some\n  outstanding noreply writes may be aborted.</li>\n</ul>\n<p>Closing a connection waits until all outstanding requests have\nfinished.  If <code>noreplyWait</code> is set to <code>false</code>, all outstanding\nrequests are canceled immediately.</p>", 
    "example": "<p><strong>Example:</strong> Cancel outstanding requests/queries that are no longer needed.</p>\n<p><code>conn.reconnect({noreplyWait: false}, function(errror, connection) { ... })</code></p>", 
    "io": [
      [
        "connection", 
        "undefined"
      ]
    ], 
    "name": "reconnect", 
    "url": "reconnect"
  }, 
  "api/javascript/reduce/": {
    "body": "sequence.reduce(reductionFunction) &rarr; value", 
    "description": "<p>Produce a single value from a sequence through repeated application of a reduction\nfunction.</p>", 
    "example": "<p><strong>Example:</strong> Return the number of documents in the table `posts.</p>\n<p><code>r.table(\"posts\").map(function(doc) {\n    return 1\n}).reduce(function(left, right) {\n    return left.add(right)\n}).run(conn, callback);</code></p>", 
    "io": [
      [
        "sequence", 
        "value"
      ]
    ], 
    "name": "reduce", 
    "url": "reduce"
  }, 
  "api/javascript/replace/": {
    "body": "table.replace(json | expr[, {durability: \"hard\", returnVals: false, nonAtomic: false}])&rarr; objectselection.replace(json | expr[, {durability: \"hard\", returnVals: false, nonAtomic: false}])&rarr; objectsingleSelection.replace(json | expr[, {durability: \"hard\", returnVals: false, nonAtomic: false}])&rarr; object", 
    "description": "<p>Replace documents in a table. Accepts a JSON document or a ReQL expression, and replaces\nthe original document with the new one. The new document must have the same primary key\nas the original document.</p>", 
    "example": "<p><strong>Example:</strong> Replace the document with the primary key <code>1</code>.</p>\n<p><code>r.table(\"posts\").get(1).replace({\n    id: 1,\n    title: \"Lorem ipsum\",\n    content: \"Aleas jacta est\",\n    status: \"draft\"\n}).run(conn, callback)</code></p>", 
    "io": [
      [
        "table", 
        "object"
      ], 
      [
        "selection", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "replace", 
    "url": "replace"
  }, 
  "api/javascript/row/": {
    "body": "r.row &rarr; value", 
    "description": "<p>Returns the currently visited document.</p>", 
    "example": "<p><strong>Example:</strong> Get all users whose age is greater than 5.</p>\n<p><code>r.table('users').filter(r.row('age').gt(5)).run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "value"
      ]
    ], 
    "name": "row", 
    "url": "row"
  }, 
  "api/javascript/run/": {
    "body": "query.run(conn[, options], callback)query.run(conn[, options]) &rarr; promise", 
    "description": "<p>Run a query on a connection. </p>\n<p>The callback will get either an error, a single JSON result, or a\ncursor, depending on the query.</p>", 
    "example": "<p><strong>Example:</strong> Run a query on the connection <code>conn</code> and log each row in\nthe result to the console.</p>\n<p><code>r.table('marvel').run(conn, function(err, cursor) { cursor.each(console.log); })</code></p>", 
    "io": [
      [
        "any", 
        null
      ]
    ], 
    "name": "run", 
    "url": "run"
  }, 
  "api/javascript/sample/": {
    "body": "sequence.sample(number) &rarr; selectionstream.sample(number) &rarr; arrayarray.sample(number) &rarr; array", 
    "description": "<p>Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.</p>", 
    "example": "<p><strong>Example:</strong> Select 3 random heroes.</p>\n<p><code>r.table('marvel').sample(3).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "selection"
      ], 
      [
        "stream", 
        "array"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "sample", 
    "url": "sample"
  }, 
  "api/javascript/seconds/": {
    "body": "time.seconds() &rarr; number", 
    "description": "<p>Return the seconds in a time object as a number between 0 and 59.999 (double precision).</p>", 
    "example": "<p><strong>Example:</strong> Return the post submitted during the first 30 seconds of every minute.</p>\n<p><code>r.table(\"posts\").filter(function(post) {\n    return post(\"date\").seconds().lt(30)\n})</code></p>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "seconds", 
    "url": "seconds"
  }, 
  "api/javascript/set_difference/": {
    "body": "array.setDifference(array) &rarr; array", 
    "description": "<p>Remove the elements of one array from another and return them as a set (an array with\ndistinct values).</p>", 
    "example": "<p><strong>Example:</strong> Check which pieces of equipment Iron Man has, excluding a fixed list.</p>\n<p><code>r.table('marvel').get('IronMan')('equipment').setDifference(['newBoots', 'arc_reactor']).run(conn, callback)</code></p>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "setDifference", 
    "url": "set_difference"
  }, 
  "api/javascript/set_insert/": {
    "body": "array.setInsert(value) &rarr; array", 
    "description": "<p>Add a value to an array and return it as a set (an array with distinct values).</p>", 
    "example": "<p><strong>Example:</strong> Retrieve Iron Man's equipment list with the addition of some new boots.</p>\n<p><code>r.table('marvel').get('IronMan')('equipment').setInsert('newBoots').run(conn, callback)</code></p>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "setInsert", 
    "url": "set_insert"
  }, 
  "api/javascript/set_intersection/": {
    "body": "array.setIntersection(array) &rarr; array", 
    "description": "<p>Intersect two arrays returning values that occur in both of them as a set (an array with\ndistinct values).</p>", 
    "example": "<p><strong>Example:</strong> Check which pieces of equipment Iron Man has from a fixed list.</p>\n<p><code>r.table('marvel').get('IronMan')('equipment').setIntersection(['newBoots', 'arc_reactor']).run(conn, callback)</code></p>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "setIntersection", 
    "url": "set_intersection"
  }, 
  "api/javascript/set_union/": {
    "body": "array.setUnion(array) &rarr; array", 
    "description": "<p>Add a several values to an array and return it as a set (an array with distinct values).</p>", 
    "example": "<p><strong>Example:</strong> Retrieve Iron Man's equipment list with the addition of some new boots and an arc reactor.</p>\n<p><code>r.table('marvel').get('IronMan')('equipment').setUnion(['newBoots', 'arc_reactor']).run(conn, callback)</code></p>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "setUnion", 
    "url": "set_union"
  }, 
  "api/javascript/skip/": {
    "body": "sequence.skip(n) &rarr; streamarray.skip(n) &rarr; array", 
    "description": "<p>Skip a number of elements from the head of the sequence.</p>", 
    "example": "<p><strong>Example:</strong> Here in conjunction with <code>order_by</code> we choose to ignore the most successful heroes.</p>\n<p><code>r.table('marvel').orderBy('successMetric').skip(10).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "skip", 
    "url": "skip"
  }, 
  "api/javascript/slice/": {
    "body": "selection.slice(startIndex[, endIndex, {leftBound:'closed', rightBound:'open'}]) &rarr; selectionstream.slice(startIndex[, endIndex, {leftBound:'closed', rightBound:'open'}]) &rarr; streamarray.slice(startIndex[, endIndex, {leftBound:'closed', rightBound:'open'}]) &rarr; array", 
    "description": "<p>Return the elements of a sequence within the specified range.</p>\n<p><strong>Example:</strong> Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3&ndash;5.)</p>\n<p><code>js\nr.table('players').orderBy({index: 'age'}).slice(3,6).run(conn, callback)</code></p>", 
    "example": "", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "slice", 
    "url": "slice"
  }, 
  "api/javascript/splice_at/": {
    "body": "array.spliceAt(index, array) &rarr; array", 
    "description": "<p>Insert several values in to an array at a given index. Returns the modified array.</p>", 
    "example": "<p><strong>Example:</strong> Hulk and Thor decide to join the avengers.</p>\n<p><code>r.expr([\"Iron Man\", \"Spider-Man\"]).spliceAt(1, [\"Hulk\", \"Thor\"]).run(conn, callback)</code></p>", 
    "io": [
      [
        "array", 
        "array"
      ]
    ], 
    "name": "spliceAt", 
    "url": "splice_at"
  }, 
  "api/javascript/split/": {
    "body": "string.split([separator, [max_splits]]) &rarr; array", 
    "description": "<p>Splits a string into substrings.  Splits on whitespace when called\nwith no arguments.  When called with a separator, splits on that\nseparator.  When called with a separator and a maximum number of\nsplits, splits on that separator at most <code>max_splits</code> times.  (Can be\ncalled with <code>null</code> as the separator if you want to split on whitespace\nwhile still specifying <code>max_splits</code>.)</p>\n<p>Mimics the behavior of Python's <code>string.split</code> in edge cases, except\nfor splitting on the empty string, which instead produces an array of\nsingle-character strings.</p>", 
    "example": "<p><strong>Example:</strong> Split on whitespace.</p>\n<p><code>r.expr(\"foo  bar bax\").split().run(conn, callback)</code></p>", 
    "io": [
      [
        "string", 
        "array"
      ]
    ], 
    "name": "split", 
    "url": "split"
  }, 
  "api/javascript/sub/": {
    "body": "number.sub(number) &rarr; numbertime.sub(time) &rarr; numbertime.sub(number) &rarr; time", 
    "description": "<p>Subtract two numbers.</p>", 
    "example": "<p><strong>Example:</strong> It's as easy as 2 - 2 = 0.</p>\n<p><code>r.expr(2).sub(2).run(conn, callback)</code></p>", 
    "io": [
      [
        "number", 
        "number"
      ], 
      [
        "time", 
        "time"
      ], 
      [
        "time", 
        "number"
      ]
    ], 
    "name": "sub", 
    "url": "sub"
  }, 
  "api/javascript/sum/": {
    "body": "sequence.sum([fieldOrFunction]) &rarr; number", 
    "description": "<p>Sums all the elements of a sequence.  If called with a field name,\nsums all the values of that field in the sequence, skipping elements\nof the sequence that lack that field.  If called with a function,\ncalls that function on every element of the sequence and sums the\nresults, skipping elements of the sequence where that function returns\n<code>null</code> or a non-existence error.</p>", 
    "example": "<p><strong>Example:</strong> What's 3 + 5 + 7?</p>\n<p><code>r.expr([3, 5, 7]).sum().run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "number"
      ]
    ], 
    "name": "sum", 
    "url": "sum"
  }, 
  "api/javascript/sync/": {
    "body": "table.sync()&rarr; object", 
    "description": "<p><code>sync</code> ensures that writes on a given table are written to permanent storage. Queries\nthat specify soft durability (<code>{durability: 'soft'}</code>) do not give such guarantees, so\n<code>sync</code> can be used to ensure the state of these queries. A call to <code>sync</code> does not return\nuntil all previous writes to the table are persisted.</p>", 
    "example": "<p><strong>Example:</strong> After having updated multiple heroes with soft durability, we now want to wait\nuntil these changes are persisted.</p>\n<p><code>r.table('marvel').sync().run(conn, callback)</code></p>", 
    "io": [
      [
        "table", 
        "object"
      ]
    ], 
    "name": "sync", 
    "url": "sync"
  }, 
  "api/javascript/table/": {
    "body": "db.table(name[, {useOutdated: false}]) &rarr; table", 
    "description": "<p>Select all documents in a table. This command can be chained with other commands to do\nfurther processing on the data.</p>", 
    "example": "<p><strong>Example:</strong> Return all documents in the table 'marvel' of the default database.</p>\n<p><code>r.table('marvel').run(conn, callback)</code></p>", 
    "io": [
      [
        "db", 
        "table"
      ]
    ], 
    "name": "table", 
    "url": "table"
  }, 
  "api/javascript/table_create/": {
    "body": "db.tableCreate(tableName[, options]) &rarr; object", 
    "description": "<p>Create a table. A RethinkDB table is a collection of JSON documents.</p>\n<p>If successful, the operation returns an object: <code>{created: 1}</code>. If a table with the same\nname already exists, the operation throws <code>RqlRuntimeError</code>.</p>\n<p>Note: that you can only use alphanumeric characters and underscores for the table name.</p>\n<p>When creating a table you can specify the following options:</p>\n<ul>\n<li><code>primaryKey</code>: the name of the primary key. The default primary key is id;</li>\n<li><code>durability</code>: if set to <code>'soft'</code>, this enables <em>soft durability</em> on this table:\nwrites will be acknowledged by the server immediately and flushed to disk in the\nbackground. Default is <code>'hard'</code> (acknowledgement of writes happens after data has been\nwritten to disk);</li>\n<li><code>datacenter</code>: the name of the datacenter this table should be assigned to.</li>\n</ul>", 
    "example": "<p><strong>Example:</strong> Create a table named 'dc_universe' with the default settings.</p>\n<p><code>r.db('test').tableCreate('dc_universe').run(conn, callback)</code></p>", 
    "io": [
      [
        "db", 
        "table"
      ]
    ], 
    "name": "tableCreate", 
    "url": "table_create"
  }, 
  "api/javascript/table_drop/": {
    "body": "db.tableDrop(tableName) &rarr; object", 
    "description": "<p>Drop a table. The table and all its data will be deleted.</p>\n<p>If succesful, the operation returns an object: {dropped: 1}. If the specified table\ndoesn't exist a <code>RqlRuntimeError</code> is thrown.</p>", 
    "example": "<p><strong>Example:</strong> Drop a table named 'dc_universe'.</p>\n<p><code>r.db('test').tableDrop('dc_universe').run(conn, callback)</code></p>", 
    "io": [
      [
        "db", 
        "object"
      ]
    ], 
    "name": "tableDrop", 
    "url": "table_drop"
  }, 
  "api/javascript/table_list/": {
    "body": "db.tableList() &rarr; array", 
    "description": "<p>List all table names in a database. The result is a list of strings.</p>", 
    "example": "<p><strong>Example:</strong> List all tables of the 'test' database.</p>\n<p><code>r.db('test').tableList().run(conn, callback)</code></p>", 
    "io": [
      [
        "db", 
        "array"
      ]
    ], 
    "name": "tableList", 
    "url": "table_list"
  }, 
  "api/javascript/time/": {
    "body": "r.time(year, month, day[, hour, minute, second], timezone)&rarr; time", 
    "description": "<p>Create a time object for a specific time.</p>\n<p>A few restrictions exist on the arguments:</p>\n<ul>\n<li><code>year</code> is an integer between 1400 and 9,999.</li>\n<li><code>month</code> is an integer between 1 and 12.</li>\n<li><code>day</code> is an integer between 1 and 31.</li>\n<li><code>hour</code> is an integer.</li>\n<li><code>minutes</code> is an integer.</li>\n<li><code>seconds</code> is a double. Its value will be rounded to three decimal places\n(millisecond-precision).</li>\n<li><code>timezone</code> can be <code>'Z'</code> (for UTC) or a string with the format <code>\u00b1[hh]:[mm]</code>.</li>\n</ul>", 
    "example": "<p><strong>Example:</strong> Update the birthdate of the user \"John\" to November 3rd, 1986 UTC.</p>\n<p><code>r.table(\"user\").get(\"John\").update({birthdate: r.time(1986, 11, 3, 'Z')})\n    .run(conn, callback)</code></p>", 
    "io": [
      [
        "r", 
        "time"
      ]
    ], 
    "name": "time", 
    "url": "time"
  }, 
  "api/javascript/time_of_day/": {
    "body": "time.timeOfDay() &rarr; number", 
    "description": "<p>Return the number of seconds elapsed since the beginning of the day stored in the time object.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve posts that were submitted before noon.</p>\n<p><code>r.table(\"posts\").filter(\n    r.row(\"date\").timeOfDay().le(12*60*60)\n).run(conn, callback)</code></p>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "timeOfDay", 
    "url": "time_of_day"
  }, 
  "api/javascript/timezone/": {
    "body": "time.timezone() &rarr; string", 
    "description": "<p>Return the timezone of the time object.</p>", 
    "example": "<p><strong>Example:</strong> Return all the users in the \"-07:00\" timezone.</p>\n<p><code>r.table(\"users\").filter( function(user) {\n    return user(\"subscriptionDate\").timezone().eq(\"-07:00\")\n})</code></p>", 
    "io": [
      [
        "time", 
        "time"
      ]
    ], 
    "name": "timezone", 
    "url": "timezone"
  }, 
  "api/javascript/to_array/": {
    "body": "cursor.toArray(callback)array.toArray(callback)cursor.toArray() &rarr; promisearray.toArray() &rarr; promise", 
    "description": "<p>Retrieve all results and pass them as an array to the given callback.</p>", 
    "example": "<p><strong>Example:</strong> For small result sets it may be more convenient to process them at once as\nan array.</p>\n<p><code>cursor.toArray(function(err, results) {\n    if (err) throw err;\n    processResults(results);\n});</code></p>", 
    "io": [
      [
        "cursor", 
        "undefined"
      ]
    ], 
    "name": "toArray", 
    "url": "to_array"
  }, 
  "api/javascript/to_epoch_time/": {
    "body": "time.toEpochTime() &rarr; number", 
    "description": "<p>Convert a time object to its epoch time.</p>", 
    "example": "<p><strong>Example:</strong> Return the current time in seconds since the Unix Epoch with millisecond-precision.</p>\n<p><code>r.now().toEpochTime()</code></p>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "toEpochTime", 
    "url": "to_epoch_time"
  }, 
  "api/javascript/to_iso8601/": {
    "body": "time.toISO8601() &rarr; string", 
    "description": "<p>Convert a time object to its iso 8601 format.</p>", 
    "example": "<p><strong>Example:</strong> Return the current time in an ISO8601 format.</p>\n<p><code>r.now().toISO8601()</code></p>", 
    "io": [
      [
        "time", 
        "string"
      ]
    ], 
    "name": "toISO8601", 
    "url": "to_iso8601"
  }, 
  "api/javascript/type_of/": {
    "body": "any.typeOf() &rarr; string", 
    "description": "<p>Gets the type of a value.</p>", 
    "example": "<p><strong>Example:</strong> Get the type of a string.</p>\n<p><code>r.expr(\"foo\").typeOf().run(conn, callback)</code></p>", 
    "io": [
      [
        "any", 
        "string"
      ]
    ], 
    "name": "typeOf", 
    "url": "type_of"
  }, 
  "api/javascript/ungroup/": {
    "body": "grouped_stream.ungroup() &rarr; arraygrouped_data.ungroup() &rarr; array", 
    "description": "<p>Takes a grouped stream or grouped data and turns it into an array of\nobjects representing the groups.  Any commands chained after <code>ungroup</code>\nwill operate on this array, rather than operating on each group\nindividually.  This is useful if you want to e.g. order the groups by\nthe value of their reduction.</p>", 
    "example": "<p><strong>Example:</strong> What is the maximum number of points scored by each\nplayer, with the highest scorers first?</p>\n<p><code>r.table('games')\n    .group('player').max('points')['points']\n    .ungroup().order_by(r.desc('reduction')).run(conn)</code></p>", 
    "io": [
      [
        "grouped_stream", 
        "array"
      ]
    ], 
    "name": "ungroup", 
    "url": "ungroup"
  }, 
  "api/javascript/union/": {
    "body": "sequence.union(sequence) &rarr; array", 
    "description": "<p>Concatenate two sequences.</p>", 
    "example": "<p><strong>Example:</strong> Construct a stream of all heroes.</p>\n<p><code>r.table('marvel').union(r.table('dc')).run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "array"
      ]
    ], 
    "name": "union", 
    "url": "union"
  }, 
  "api/javascript/upcase/": {
    "body": "string.upcase() &rarr; string", 
    "description": "<p>Upcases a string.</p>", 
    "example": "<p><strong>Example:</strong></p>\n<p><code>r.expr(\"Sentence about LaTeX.\").upcase().run(conn, callback)</code></p>", 
    "io": [
      [
        "string", 
        "string"
      ]
    ], 
    "name": "upcase", 
    "url": "upcase"
  }, 
  "api/javascript/update/": {
    "body": "table.update(json | expr[, {durability: \"hard\", returnVals: false, nonAtomic: false}])&rarr; objectselection.update(json | expr[, {durability: \"hard\", returnVals: false, nonAtomic: false}])&rarr; objectsingleSelection.update(json | expr[, {durability: \"hard\", returnVals: false, nonAtomic: false}])&rarr; object", 
    "description": "<p>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a\ncombination of the two. You can pass options like <code>returnVals</code> that will return the old\nand new values of the row you have modified.</p>", 
    "example": "<p><strong>Example:</strong> Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</p>\n<p><code>r.table(\"posts\").get(1).update({status: \"published\"}).run(conn, callback)</code></p>", 
    "io": [
      [
        "table", 
        "object"
      ], 
      [
        "selection", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "update", 
    "url": "update"
  }, 
  "api/javascript/use/": {
    "body": "conn.use(dbName)", 
    "description": "<p>Change the default database on this connection.</p>", 
    "example": "<p><strong>Example:</strong> Change the default database so that we don't need to\nspecify the database when referencing a table.</p>\n<p><code>conn.use('marvel')\nr.table('heroes').run(conn, ...) // refers to r.db('marvel').table('heroes')</code></p>", 
    "io": [
      [
        "connection", 
        "undefined"
      ]
    ], 
    "name": "use", 
    "url": "use"
  }, 
  "api/javascript/with_fields/": {
    "body": "sequence.withFields([selector1, selector2...]) &rarr; streamarray.withFields([selector1, selector2...]) &rarr; array", 
    "description": "<p>Takes a sequence of objects and a list of fields. If any objects in the sequence don't\nhave all of the specified fields, they're dropped from the sequence. The remaining\nobjects have the specified fields plucked out. (This is identical to <code>has_fields</code>\nfollowed by <code>pluck</code> on a sequence.)</p>", 
    "example": "<p><strong>Example:</strong> Get a list of heroes and their nemeses, excluding any heroes that lack one.</p>\n<p><code>r.table('marvel').withFields('id', 'nemesis')</code></p>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "withFields", 
    "url": "with_fields"
  }, 
  "api/javascript/without/": {
    "body": "sequence.without([selector1, selector2...]) &rarr; streamarray.without([selector1, selector2...]) &rarr; arraysingleSelection.without([selector1, selector2...]) &rarr; objectobject.without([selector1, selector2...]) &rarr; object", 
    "description": "<p>The opposite of pluck; takes an object or a sequence of objects, and returns them with\nthe specified paths removed.</p>", 
    "example": "<p><strong>Example:</strong> Since we don't need it for this computation we'll save bandwidth and leave\nout the list of IronMan's romantic conquests.</p>\n<p><code>r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn, callback)</code></p>", 
    "io": [
      [
        "sequence", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ], 
      [
        "object", 
        "object"
      ], 
      [
        "singleSelection", 
        "object"
      ]
    ], 
    "name": "without", 
    "url": "without"
  }, 
  "api/javascript/year/": {
    "body": "time.year() &rarr; number", 
    "description": "<p>Return the year of a time object.</p>", 
    "example": "<p><strong>Example:</strong> Retrieve all the users born in 1986.</p>\n<p><code>r.table(\"users\").filter(function(user) {\n    return user(\"birthdate\").year().eq(1986)\n}).run(conn, callback)</code></p>", 
    "io": [
      [
        "time", 
        "number"
      ]
    ], 
    "name": "year", 
    "url": "year"
  }, 
  "api/javascript/zip/": {
    "body": "stream.zip() &rarr; streamarray.zip() &rarr; array", 
    "description": "<p>Used to 'zip' up the result of a join by merging the 'right' fields into 'left' fields of each member of the sequence.</p>", 
    "example": "<p><strong>Example:</strong> 'zips up' the sequence by merging the left and right fields produced by a join.</p>\n<p><code>r.table('marvel').eqJoin('main_dc_collaborator', r.table('dc'))\n    .zip().run(conn, callback)</code></p>", 
    "io": [
      [
        "stream", 
        "stream"
      ], 
      [
        "array", 
        "array"
      ]
    ], 
    "name": "zip", 
    "url": "zip"
  }
}