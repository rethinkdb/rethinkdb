{
  "name": "native-buffer-browserify",
  "version": "2.0.17",
  "description": "buffer module compatibility for browserify (backed by ArrayBuffer so its fast!)",
  "main": "index.js",
  "dependencies": {
    "base64-js": "~0.0.4",
    "ieee754": "~1.1.1"
  },
  "devDependencies": {
    "benchmark": "*",
    "browserify": "3.x",
    "tape": "*"
  },
  "scripts": {
    "test": "tape test/*.js",
    "prepublish": "./bundle.sh",
    "perf": "cd perf/solo && browserify --debug readUInt32BE.js > bundle.js && open index.html"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/6..latest",
      "chrome/4..latest",
      "firefox/3..latest",
      "safari/5.1..latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/native-buffer-browserify.git"
  },
  "keywords": [
    "buffer",
    "browserify",
    "compatible",
    "browser",
    "arraybuffer",
    "uint8array",
    "dataview"
  ],
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "contributors": [
    {
      "name": "Romain Beauxis",
      "email": "toots@rastageeks.org"
    },
    {
      "name": "James Halliday",
      "email": "mail@substack.net"
    }
  ],
  "license": "MIT",
  "readme": "# native-buffer-browserify\n[![Build Status](http://img.shields.io/travis/feross/native-buffer-browserify.svg)](https://travis-ci.org/feross/native-buffer-browserify)\n[![NPM Version](http://img.shields.io/npm/v/native-buffer-browserify.svg)](https://npmjs.org/package/native-buffer-browserify)\n[![NPM](http://img.shields.io/npm/dm/native-buffer-browserify.svg)](https://npmjs.org/package/native-buffer-browserify)\n[![Gittip](http://img.shields.io/gittip/feross.svg)](https://www.gittip.com/feross/)\n\nThe buffer module from [node.js](http://nodejs.org/), but for browsers. This is a fork of [buffer-browserify](https://github.com/toots/buffer-browserify).\n\n[![testling badge](https://ci.testling.com/feross/native-buffer-browserify.png)](https://ci.testling.com/feross/native-buffer-browserify)\n\n## usage\n\nWhen you `require('buffer')` or reference the `Buffer` global in [browserify](http://github.com/substack/node-browserify), this module will automatically be loaded.\n\nIf you want to manually install it for some reason, do:\n\n```\nnpm install native-buffer-browserify\n```\n\n## features\n\n- **Backed by Typed Arrays (`Uint8Array` and `ArrayBuffer`) (not `Object`, so it's fast)**\n- **Bundle size is nearly half of the original `buffer-browserify` (35KB vs 65KB!)**\n- **Excellent browser support (IE 6+, Chrome 4+, Firefox 3+, Safari 5.1+, Opera 11+, iOS).**\n- Preserves Node API exactly.\n- Faster pretty much across the board (see perf results below)\n- `.slice()` returns instances of the same type (Buffer)\n- Square-bracket `buf[4]` notation works, even in old browsers like IE6!\n- Does not modify any browser prototypes.\n- All tests from the original `buffer-browserify` project pass, plus additional ones.\n\n## how does it work?\n\nThe `Buffer` constructor returns instances of `Uint8Array` that are augmented with function properties for all the Buffer API functions. We use `Uint8Array` so that square bracket notation works as expected -- it returns a single octet.\n\nBy augmenting the instances, we can avoid modifying the `Uint8Array` prototype.\n\n## important differences\n\n### use `Buffer.isBuffer` instead of `instanceof Buffer`\n\nThe Buffer constructor returns a `Uint8Array` (as discussed above) for performance reasons, so `instanceof Buffer` won't work. In node `Buffer.isBuffer` just does `instanceof Buffer`, but in browserify we use a `Buffer.isBuffer` shim that detects our special `Uint8Array`-based Buffers.\n\n### don't rely on `slice()` to modify the memory of the parent buffer\n\nIf the browser is using the Typed Array implementation then modifying a buffer created by `slice()` will modify the original memory, [just like in Node](http://nodejs.org/api/buffer.html#buffer_buf_slice_start_end). But for the Object implementation (used in unsupported browsers), this is not possible. Therefore, do not rely on this behavior until browser support gets better. (Note: currently even Firefox isn't using the Typed Array implementation because of [this bug](https://bugzilla.mozilla.org/show_bug.cgi?id=952403).)\n\n## performance\n\nSee perf tests in `/perf`.\n\n```\n# Chrome 33\n\nNewBuffer#bracket-notation x 11,194,815 ops/sec ±1.73% (64 runs sampled)\nOldBuffer#bracket-notation x 9,546,694 ops/sec ±0.76% (67 runs sampled)\nFastest is NewBuffer#bracket-notation\n\nNewBuffer#concat x 949,714 ops/sec ±2.48% (63 runs sampled)\nOldBuffer#concat x 634,906 ops/sec ±0.42% (68 runs sampled)\nFastest is NewBuffer#concat\n\nNewBuffer#copy x 15,436,458 ops/sec ±1.74% (67 runs sampled)\nOldBuffer#copy x 3,990,346 ops/sec ±0.42% (68 runs sampled)\nFastest is NewBuffer#copy\n\nNewBuffer#readDoubleBE x 1,132,954 ops/sec ±2.36% (65 runs sampled)\nOldBuffer#readDoubleBE x 846,337 ops/sec ±0.58% (68 runs sampled)\nFastest is NewBuffer#readDoubleBE\n\nNewBuffer#new x 1,419,300 ops/sec ±3.50% (66 runs sampled)\nUint8Array#new x 3,898,573 ops/sec ±0.88% (67 runs sampled) (used internally by NewBuffer)\nOldBuffer#new x 2,284,568 ops/sec ±0.57% (67 runs sampled)\nFastest is Uint8Array#new\n\nNewBuffer#readFloatBE x 1,203,763 ops/sec ±1.81% (68 runs sampled)\nOldBuffer#readFloatBE x 954,923 ops/sec ±0.66% (70 runs sampled)\nFastest is NewBuffer#readFloatBE\n\nNewBuffer#readUInt32LE x 750,341 ops/sec ±1.70% (66 runs sampled)\nOldBuffer#readUInt32LE x 1,408,478 ops/sec ±0.60% (68 runs sampled)\nFastest is OldBuffer#readUInt32LE\n\nNewBuffer#slice x 1,802,870 ops/sec ±1.87% (64 runs sampled)\nOldBuffer#slice x 1,725,928 ops/sec ±0.74% (68 runs sampled)\nFastest is NewBuffer#slice\n\nNewBuffer#writeFloatBE x 830,407 ops/sec ±3.09% (66 runs sampled)\nOldBuffer#writeFloatBE x 508,446 ops/sec ±0.49% (69 runs sampled)\nFastest is NewBuffer#writeFloatBE\n\n# Node 0.11\n\nNewBuffer#bracket-notation x 10,912,085 ops/sec ±0.89% (92 runs sampled)\nOldBuffer#bracket-notation x 9,051,638 ops/sec ±0.84% (92 runs sampled)\nBuffer#bracket-notation x 10,721,608 ops/sec ±0.63% (91 runs sampled)\nFastest is NewBuffer#bracket-notation\n\nNewBuffer#concat x 1,438,825 ops/sec ±1.80% (91 runs sampled)\nOldBuffer#concat x 888,614 ops/sec ±2.09% (93 runs sampled)\nBuffer#concat x 1,832,307 ops/sec ±1.20% (90 runs sampled)\nFastest is Buffer#concat\n\nNewBuffer#copy x 5,987,167 ops/sec ±0.85% (94 runs sampled)\nOldBuffer#copy x 3,892,165 ops/sec ±1.28% (93 runs sampled)\nBuffer#copy x 11,208,889 ops/sec ±0.76% (91 runs sampled)\nFastest is Buffer#copy\n\nNewBuffer#readDoubleBE x 1,057,233 ops/sec ±1.28% (88 runs sampled)\nOldBuffer#readDoubleBE x 4,094 ops/sec ±1.09% (86 runs sampled)\nBuffer#readDoubleBE x 1,587,308 ops/sec ±0.87% (84 runs sampled)\nFastest is Buffer#readDoubleBE\n\nNewBuffer#new x 739,791 ops/sec ±0.89% (89 runs sampled)\nUint8Array#new x 2,745,243 ops/sec ±0.95% (91 runs sampled)\nOldBuffer#new x 2,604,537 ops/sec ±0.93% (88 runs sampled)\nBuffer#new x 1,836,218 ops/sec ±0.74% (92 runs sampled)\nFastest is Uint8Array#new\n\nNewBuffer#readFloatBE x 1,111,263 ops/sec ±0.41% (97 runs sampled)\nOldBuffer#readFloatBE x 4,026 ops/sec ±1.24% (90 runs sampled)\nBuffer#readFloatBE x 1,611,800 ops/sec ±0.58% (96 runs sampled)\nFastest is Buffer#readFloatBE\n\nNewBuffer#readUInt32LE x 502,024 ops/sec ±0.59% (94 runs sampled)\nOldBuffer#readUInt32LE x 1,259,028 ops/sec ±0.79% (87 runs sampled)\nBuffer#readUInt32LE x 2,778,635 ops/sec ±0.46% (97 runs sampled)\nFastest is Buffer#readUInt32LE\n\nNewBuffer#slice x 1,174,908 ops/sec ±1.47% (89 runs sampled)\nOldBuffer#slice x 2,396,302 ops/sec ±4.36% (86 runs sampled)\nBuffer#slice x 2,994,029 ops/sec ±0.79% (89 runs sampled)\nFastest is Buffer#slice\n\nNewBuffer#writeFloatBE x 721,081 ops/sec ±1.10% (86 runs sampled)\nOldBuffer#writeFloatBE x 4,020 ops/sec ±1.04% (92 runs sampled)\nBuffer#writeFloatBE x 1,811,134 ops/sec ±0.67% (91 runs sampled)\nFastest is Buffer#writeFloatBE\n```\n\n## license\n\nMIT. Copyright (C) [Feross Aboukhadijeh](http://feross.org), Romain Beauxis, and other contributors.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/feross/native-buffer-browserify/issues"
  },
  "_id": "native-buffer-browserify@2.0.17",
  "dist": {
    "shasum": "3c839234972e455fcc6c935f7b85711d79ea19cc"
  },
  "_from": "https://registry.npmjs.org/native-buffer-browserify/-/native-buffer-browserify-2.0.17.tgz",
  "_resolved": "https://registry.npmjs.org/native-buffer-browserify/-/native-buffer-browserify-2.0.17.tgz"
}
