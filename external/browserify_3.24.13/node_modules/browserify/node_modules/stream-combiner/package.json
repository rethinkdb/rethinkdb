{
  "name": "stream-combiner",
  "version": "0.0.4",
  "homepage": "https://github.com/dominictarr/stream-combiner",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/stream-combiner.git"
  },
  "dependencies": {
    "duplexer": "~0.1.1"
  },
  "devDependencies": {
    "tape": "~2.3.0",
    "event-stream": "~3.0.7"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "author": {
    "name": "'Dominic Tarr'",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "license": "MIT",
  "readme": "# stream-combiner\n\n<img src=https://secure.travis-ci.org/dominictarr/stream-combiner.png?branch=master>\n\n## Combine (stream1,...,streamN)\n\nTurn a pipeline into a single stream. `pipeline` returns a stream that writes to the first stream\nand reads from the last stream. \n\nListening for 'error' will recieve errors from all streams inside the pipe.\n\n``` js\n  var Combine = require('stream-combiner')\n  var es      = require('event-stream')\n\n  Combine(                         //connect streams together with `pipe`\n    process.openStdin(),              //open stdin\n    es.split(),                       //split stream to break on newlines\n    es.map(function (data, callback) {//turn this async function into a stream\n      callback(null\n        , inspect(JSON.parse(data)))  //render it nicely\n    }),\n    process.stdout                    // pipe it to stdout !\n    )\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "description": "<img src=https://secure.travis-ci.org/dominictarr/stream-combiner.png?branch=master>",
  "bugs": {
    "url": "https://github.com/dominictarr/stream-combiner/issues"
  },
  "_id": "stream-combiner@0.0.4",
  "dist": {
    "shasum": "2fbabc5c481b593086f490647396506b42f6fe6c"
  },
  "_from": "https://registry.npmjs.org/stream-combiner/-/stream-combiner-0.0.4.tgz",
  "_resolved": "https://registry.npmjs.org/stream-combiner/-/stream-combiner-0.0.4.tgz"
}
