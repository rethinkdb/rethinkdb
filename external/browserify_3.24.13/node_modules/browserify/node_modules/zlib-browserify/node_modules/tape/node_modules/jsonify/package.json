{
  "name": "jsonify",
  "version": "0.0.0",
  "description": "JSON without touching any globals",
  "main": "index.js",
  "directories": {
    "lib": ".",
    "test": "test"
  },
  "devDependencies": {
    "tap": "0.0.x",
    "garbage": "0.0.x"
  },
  "scripts": {
    "test": "tap test"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/jsonify.git"
  },
  "keywords": [
    "json",
    "browser"
  ],
  "author": {
    "name": "Douglas Crockford",
    "url": "http://crockford.com/"
  },
  "license": "Public Domain",
  "readme": "jsonify\n=======\n\nThis module provides Douglas Crockford's JSON implementation without modifying\nany globals.\n\n`stringify` and `parse` are merely exported without respect to whether or not a\nglobal `JSON` object exists.\n\nmethods\n=======\n\nvar json = require('jsonify');\n\njson.parse(source, reviver)\n---------------------------\n\nReturn a new javascript object from a parse of the `source` string.\n\nIf a `reviver` function is specified, walk the structure passing each name/value\npair to `reviver.call(parent, key, value)` to transform the `value` before\nparsing it.\n\njson.stringify(value, replacer, space)\n--------------------------------------\n\nReturn a string representation for `value`.\n\nIf `replacer` is specified, walk the structure passing each name/value pair to\n`replacer.call(parent, key, value)` to transform the `value` before stringifying\nit.\n\nIf `space` is a number, indent the result by that many spaces.\nIf `space` is a string, use `space` as the indentation.\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/substack/jsonify/issues"
  },
  "_id": "jsonify@0.0.0",
  "dist": {
    "shasum": "6dc5b43684e6b563662ada2fcf237af7d716b698"
  },
  "_from": "https://registry.npmjs.org/jsonify/-/jsonify-0.0.0.tgz",
  "_resolved": "https://registry.npmjs.org/jsonify/-/jsonify-0.0.0.tgz"
}
