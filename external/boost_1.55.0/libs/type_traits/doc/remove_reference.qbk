[/ 
  Copyright 2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:remove_reference remove_reference]

   template <class T>
   struct remove_reference
   {
      typedef __below type;
   };
  
__type The same type as `T`, but with any reference modifier removed.

__std_ref 8.3.2.

__compat If the compiler does not support partial specialization of class-templates
then this template will compile, but the member `type` will always be the same as 
type `T` except where __transform_workaround have been applied.

__header ` #include <boost/type_traits/remove_reference.hpp>` or ` #include <boost/type_traits.hpp>`

[table Examples

[ [Expression] [Result Type]]

[[`remove_reference<int>::type`][`int`]]

[[`remove_reference<int const&>::type`] [`int const`]]

[[`remove_reference<int&&>::type`] [`int`]]

[[`remove_reference<int*>::type`] [`int*`]]

[[`remove_reference<int*&>::type`] [`int*`]]

]

[endsect]

