[/ 
  Copyright 2007 John Maddock.
  Copyright 2013 Antony Polukhin.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:is_nothrow_move_assignable is_nothrow_move_assignable]

   template <class T>
   struct is_nothrow_move_assignable : public __tof {};
  
__inherit If `T` is a (possibly cv-qualified) type with a non-throwing move assignment-operator
or a type without move assignment-operator but with non-throwing assignment-operator,
then inherits from __true_type, otherwise inherits from __false_type.  Type `T`
must be a complete type.

In other words, inherits from __true_type only if expression `varaible1 = std::move(varaible2)`
won't throw (`varaible1` and `varaible2` are variables of type `T`).

__compat If the compiler does not support partial-specialization of class 
templates, then this template can not be used with function types.

Without some (C++11 noexcept shall work correctly) help from the compiler, 
`is_nothrow_move_assignable` will never report that a class or struct has a 
non-throwing assignment-operator; this is always safe, if possibly sub-optimal.
Currently (February 2013) Clang and GCC 4.7 have the necessary compiler support to ensure that this
trait "just works".

__header ` #include <boost/type_traits/is_nothrow_move_assignable.hpp>` or ` #include <boost/type_traits.hpp>`

[endsect]

