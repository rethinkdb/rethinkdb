[/
    Copyright 2010 Neil Groves
    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
/]
[section:adjacent_filtered adjacent_filtered]

[table
    [[Syntax] [Code]]
    [[Pipe] [`rng | boost::adaptors::adjacent_filtered(bi_pred)`]]
    [[Function] [`boost::adaptors::adjacent_filter(rng, bi_pred)`]]
]

* [*Precondition:]  The `value_type` of the range is convertible to both argument types of `bi_pred`.
* [*Postcondition:] For all adjacent elements `[x,y]` in the returned range, `bi_pred(x,y)` is `true`.
* [*Throws:] Whatever the copy constructor of `bi_pred` might throw.
* [*Range Category:] __single_pass_range__
* [*Return Type:] `boost::adjacent_filtered_range<typeof(rng)>`
* [*Returned Range Category:] The minimum of the range category of `rng` and __forward_range__

[section:adjacent_filtered_example adjacent_filtered example]
[import ../../../test/adaptor_test/adjacent_filtered_example.cpp]
[adjacent_filtered_example]
[endsect]

This would produce the output:
``
1,2,3,4,5,6,
``
[endsect]


