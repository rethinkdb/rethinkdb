<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE language SYSTEM "language.dtd">
<language

name="boost"
version="0.1.0"
kateversion="2.4"
section="boost::hs"
extensions="*.boost"
mimetype="allFiles"
author="Copyright 2006 -2007 Matias Capeletto, matias.capeletto@gmail.com"
license="Distributed under the Boost Software License, Version 1.0.
http://www.boost.org/LICENSE_1_0.txt"

>

<highlighting>


<list name="boost.free.function">

    <!-- boost.any -->

    <item> any_cast </item>

    <!-- boost.asign -->

    <item> ptr_list_of </item>
    <item> list_of </item>
    <item> map_list_of </item>
    <item> tuple_list_of </item>
    <item> ref_list_of </item>
    <item> cref_list_of </item>
    <item> make_list_inserter </item>

    <!-- boost.bind -->

    <item> bind </item>
    <item> mem_fn </item>

    <!-- boost.conversion -->

    <item> polymorphic_cast </item>
    <item> polymorphic_downcast </item>
    <item> lexical_cast </item>

    <!-- boost.fusion -->

    <item> at </item>
    <item> value_at </item>
    <item> has_key </item>
    <item> at_key </item>
    <item> value_at_key </item>
    <item> at_c </item>
    <item> value_at_c </item>

    <item> advance_c </item>
    <item> next </item>
    <item> equal_to </item>
    <item> advance </item>
    <item> distance </item>
    <item> deref </item>
    <item> value_of </item>
    <item> prior </item>
    <item> begin </item>
    <item> end </item>
    <item> size </item>
    <item> empty </item>
    <item> front </item>
    <item> back </item>

    <item> is_sequence </item>
    <item> is_view </item>
    <item> value_of </item>
    <item> tag_of </item>
    <item> category_of </item>

    <item> as_list </item>
    <item> as_vector </item>
    <item> as_set </item>
    <item> as_map </item>

    <item> make_list </item>
    <item> make_cons </item>
    <item> make_vector </item>
    <item> make_set </item>
    <item> make_map </item>

    <item> tuple_open </item>
    <item> tuple_close </item>
    <item> tuple_delimiter </item>

    <item> fold </item>
    <item> accumulate </item>
    <item> for_each </item>

    <item> any </item>
    <item> all </item>
    <item> none </item>
    <item> find </item>
    <item> find_if </item>
    <item> count </item>
    <item> count_if </item>

    <item> filter </item>
    <item> filter_if </item>
    <item> transform </item>
    <item> replace </item>
    <item> replace_if </item>
    <item> remove </item>
    <item> remove_if </item>
    <item> reverse </item>
    <item> clear </item>
    <item> erase </item>
    <item> erase_key </item>
    <item> insert </item>
    <item> insert_range </item>
    <item> join </item>
    <item> zip </item>
    <item> pop_back </item>
    <item> pop_front </item>
    <item> push_back </item>
    <item> push_front </item>

    <item> tuple_size </item>
    <item> tuple_element </item>
    <item> get </item>
    <item> tag_of </item>

    <!-- boost.hash -->

    <item> hash_combine </item>
    <item> hash_range </item>
    <item> hash_value </item>

    <!-- boost.multi_index -->

    <item> get </item>
    <item> project </item>

    <!-- boost.optional -->

    <item> get_pointer </item>

    <!-- boost.property_map -->

    <item> put </item>

    <!-- boost.ref -->

    <item> unwrap_reference </item>

    <!-- boost.test -->

    <item> init_unit_test_suite </item>

    <!-- boost.concepts -->

    <item> distance </item>
    <item> advance </item>
    <item> swap </item>

</list>




<list name="boost.template.classes">

    <!-- boost.any -->

    <item> any </item>

    <!-- boost.commpressed_pair -->

    <item> compressed_pair </item>

    <!-- boost.fusion -->

    <item> cons </item>
    <item> single_view </item>
    <item> filter_view </item>
    <item> iterator_range </item>
    <item> joint_view </item>
    <item> zip_view </item>
    <item> transform_view </item>
    <item> reverse_view </item>
    <item> list_tie </item>
    <item> vector_tie </item>

    <!-- boost.hash -->

    <item> hash </item>

    <!-- boost.iterators -->

    <item> counting_iterator </item>
    <item> filter_iterator </item>
    <item> function_output_iterator </item>
    <item> dereferenced iterator </item>
    <item> indirect_iterator </item>
    <item> permutation_iterator </item>
    <item> reverse_iterator </item>
    <item> shared_container_iterator </item>
    <item> transform_iterator </item>
    <item> zip_iterator </item>

    <!-- boost.iterator -->

    <item> iterator_facade </item>
    <item> iterator_adaptor </item>
    <item> iterator_adaptor_ </item>

    <!-- boost.multi_index -->

    <item> nth_index </item>
    <item> index </item>
    <item> nth_index_iterator </item>
    <item> nth_index_const_iterator </item>
    <item> index_iterator </item>
    <item> index_const_iterator </item>

    <item> sequenced </item>
    <item> ordered_unique </item>
    <item> ordered_non_unique </item>
    <item> hashed_unique </item>
    <item> hashed_non_unique </item>
    <item> identity </item>
    <item> member </item>
    <item> member_offset </item>

    <item> const_mem_fun </item>
    <item> mem_fun </item>
    <item> const_mem_fun_explicit </item>
    <item> mem_fun_explicit </item>

    <item> composite_key </item>
    <item> composite_key_result </item>
    <item> composite_key_equal_to </item>
    <item> composite_key_result_equal_to </item>
    <item> composite_key_compare </item>
    <item> composite_key_result_less </item>
    <item> composite_key_result_greater </item>
    <item> composite_key_hash </item>
    <item> composite_key_result_hash </item>

    <item> indexed_by </item>
    <item> tag </item>

    <!-- boost.optional -->

    <item> optional </item>

    <!-- boost.ref -->

    <item> ref </item>
    <item> cref </item>
    <item> reference_wrapper </item>

    <!-- boost.bimap -->

    <item> set_of </item>
    <item> multiset_of </item>
    <item> unordered_set_of </item>
    <item> unordered_multiset_of </item>
    <item> list_of </item>
    <item> vector_of </item>
    <item> set_of_relation </item>
    <item> multiset_of_relation </item>
    <item> unordered_set_of_relation </item>
    <item> unordered_multiset_of_relation </item>
    <item> list_of_relation </item>
    <item> vector_of_relation </item>

    <!-- boost.function -->

    <item> function </item>

</list>



<list name="boost.classes">

    <!-- boost.fusion -->

    <item> ignore </item>

    <!-- boost.iterator -->

    <item> iterator_core_access </item>

    <!-- boost.test -->

    <item> execution_monitor </item>
    <item> execution_exception </item>
    <item> execution_aborted </item>


</list>


<list name="boost.metaprogramming">

    <!-- boost.call_traits -->

    <item> call_traits </item>

    <!-- boost.ConceptCheck -->

    <item> function_requires </item>
    <item> IntegerConcept </item>
    <item> SignedIntegerConcept </item>
    <item> UnsignedIntegerConcept </item>
    <item> ConvertibleConcept </item>
    <item> AssignableConcept </item>
    <item> SGIAssignableConcept </item>
    <item> DefaultConstructibleConcept </item>
    <item> CopyConstructibleConcept </item>
    <item> EqualityComparableConcept </item>
    <item> LessThanComparableConcept </item>
    <item> ComparableConcept </item>
    <item> InputIteratorConcept </item>
    <item> OutputIteratorConcept </item>
    <item> ForwardIteratorConcept </item>
    <item> Mutable_ForwardIteratorConcept </item>
    <item> BidirectionalIteratorConcept </item>
    <item> Mutable_BidirectionalIteratorConcept </item>
    <item> RandomAccessIteratorConcept </item>
    <item> Mutable_RandomAccessIteratorConcept </item>
    <item> GeneratorConcept </item>
    <item> UnaryFunctionConcept </item>
    <item> BinaryFunctionConcept </item>
    <item> UnaryPredicateConcept </item>
    <item> BinaryPredicateConcept </item>
    <item> Const_BinaryPredicateConcept </item>
    <item> AdaptableGeneratorConcept </item>
    <item> AdaptableUnaryFunctionConcept </item>
    <item> AdaptableBinaryFunctionConcept </item>
    <item> AdaptablePredicateConcept </item>
    <item> AdaptableBinaryPredicateConcept </item>
    <item> ContainerConcept </item>
    <item> Mutable_ContainerConcept </item>
    <item> ForwardContainerConcept </item>
    <item> Mutable_ForwardContainerConcept </item>
    <item> ReversibleContainerConcept </item>
    <item> Mutable_ReversibleContainerConcept </item>
    <item> RandomAccessContainerConcept </item>
    <item> Mutable_RandomAccessContainerConcept </item>
    <item> SequenceConcept </item>
    <item> FrontInsertionSequenceConcept </item>
    <item> BackInsertionSequenceConcept </item>
    <item> AssociativeContainerConcept </item>
    <item> UniqueAssociativeContainerConcept </item>
    <item> MultipleAssociativeContainerConcept </item>
    <item> SimpleAssociativeContainerConcept </item>
    <item> PairAssociativeContainerConcept </item>
    <item> SortedAssociativeContainerConcept </item>
    <item> null_archetype </item>
    <item> default_constructible_archetype </item>
    <item> assignable_archetype </item>
    <item> copy_constructible_archetype </item>
    <item> equality_comparable_archetype </item>
    <item> convertible_to_archetype </item>
    <item> trivial_iterator_archetype </item>
    <item> mutable_trivial_iterator_archetype </item>
    <item> input_iterator_archetype </item>
    <item> forward_iterator_archetype </item>
    <item> bidirectional_iterator_archetype </item>
    <item> random_access_iterator_archetype </item>
    <item> unary_function_archetype </item>
    <item> binary_function_archetype </item>
    <item> predicate_archetype </item>
    <item> binary_predicate_archetype </item>

    <!-- boost.iterator -->

    <item> ReadableIteratorConcept </item>
    <item> WritableIteratorConcept </item>
    <item> SwappableIteratorConcept </item>
    <item> LvalueIteratorConcept </item>
    <item> IncrementableIteratorConcept </item>
    <item> SinglePassIteratorConcept </item>
    <item> ForwardTraversalConcept </item>
    <item> BidirectionalTraversalConcept </item>
    <item> RandomAccessTraversalConcept </item>
    <item> InteroperableIteratorConcept </item>

    <!-- boost.enable_if -->

    <item> enable_if </item>
    <item> disable_if </item>
    <item> lazy_enable_if </item>
    <item> lazy_disable_if </item>
    <item> enable_if_c </item>
    <item> disable_if_c </item>
    <item> lazy_enable_if_c </item>
    <item> lazy_disable_if_c </item>

    <!-- boost.iterator -->

    <item> indirect_reference </item>
    <item> pointee </item>

    <!-- boost.mpl -->

    <item> empty_sequence </item>
    <item> filter_view </item>
    <item> iterator_range </item>
    <item> joint_view </item>
    <item> single_view </item>
    <item> transform_view </item>
    <item> zip_view </item>

    <item> at </item>
    <item> at_c </item>
    <item> back </item>
    <item> begin </item>
    <item> clear </item>
    <item> empty </item>
    <item> end </item>
    <item> erase </item>
    <item> erase_key </item>
    <item> front </item>
    <item> has_key </item>
    <item> insert </item>
    <item> insert_range </item>
    <item> is_sequence </item>
    <item> order </item>
    <item> pop_back </item>
    <item> pop_front </item>
    <item> push_back </item>
    <item> push_front </item>
    <item> sequence_tag </item>
    <item> size </item>

    <item> advance </item>
    <item> distance </item>
    <item> next </item>
    <item> prior </item>
    <item> deref </item>
    <item> iterator_category </item>

    <item> back_inserter </item>
    <item> front_inserter </item>
    <item> inserter </item>

    <item> fold </item>
    <item> iter_fold </item>
    <item> reverse_fold </item>
    <item> reverse_iter_fold </item>
    <item> accumulate </item>

    <item> find </item>
    <item> find_if </item>
    <item> contains </item>
    <item> count </item>
    <item> count_if </item>
    <item> lower_bound </item>
    <item> upper_bound </item>
    <item> min_element </item>
    <item> max_element </item>
    <item> equal </item>

    <item> copy </item>
    <item> copy_if </item>
    <item> transform </item>
    <item> replace </item>
    <item> replace_if </item>
    <item> remove </item>
    <item> remove_if </item>
    <item> unique </item>
    <item> partition </item>
    <item> stable_partition </item>
    <item> sort </item>
    <item> reverse </item>
    <item> reverse_copy </item>
    <item> reverse_copy_if </item>
    <item> reverse_transform </item>
    <item> reverse_replace </item>
    <item> reverse_replace_if </item>
    <item> reverse_remove </item>
    <item> reverse_remove_if </item>
    <item> reverse_unique </item>
    <item> reverse_partition </item>
    <item> reverse_stable_partition </item>

    <item> if_ </item>
    <item> if_c </item>
    <item> eval_if </item>
    <item> eval_if_c </item>

    <item> apply </item>
    <item> apply_wrap </item>
    <item> unpack_args </item>

    <item> _ </item>
    <item> _1 </item>
    <item> _2 </item>
    <item> _3 </item>
    <item> _4 </item>
    <item> _5 </item>

    <item> bind </item>
    <item> quote </item>
    <item> arg </item>
    <item> protect </item>

    <item> plus </item>
    <item> minus </item>
    <item> times </item>
    <item> divides </item>
    <item> modulus </item>
    <item> negate </item>

    <item> less </item>
    <item> less_equal </item>
    <item> greater </item>
    <item> greater_equal </item>
    <item> equal_to </item>
    <item> not_equal_to </item>

    <item> and_ </item>
    <item> or_ </item>
    <item> not_ </item>

    <item> bitand_ </item>
    <item> bitor_ </item>
    <item> bitxor_ </item>
    <item> shift_left </item>
    <item> shift_right </item>

    <item> identity </item>
    <item> always </item>
    <item> inherit </item>
    <item> inherit_linearly </item>
    <item> numeric_cast </item>
    <item> min </item>
    <item> max </item>
    <item> sizeof_ </item>

    <item> bool_ </item>
    <item> int_ </item>
    <item> long_ </item>
    <item> size_t </item>
    <item> integral_c </item>

    <item> pair </item>
    <item> empty_base </item>
    <item> void_ </item>

    <!-- boost.operators -->

    <item> less_than_comparable </item>
    <item> less_than_comparable1 </item>
    <item> less_than_comparable2 </item>

    <item> equality_comparable </item>
    <item> equality_comparable1 </item>

    <item> equality_comparable2 </item>

    <item> addable </item>
    <item> addable1 </item>

    <item> addable2 </item>

    <item> subtractable </item>
    <item> subtractable1 </item>

    <item> subtractable2 </item>

    <item> subtractable2_left </item>

    <item> multipliable </item>
    <item> multipliable1 </item>
    <item> multipliable2 </item>

    <item> dividable </item>
    <item> dividable1 </item>
    <item> dividable2 </item>

    <item> dividable2_left </item>

    <item> modable </item>
    <item> modable1 </item>
    <item> modable2 </item>

    <item> modable2_left </item>

    <item> orable </item>
    <item> orable1 </item>
    <item> orable2 </item>

    <item> andable </item>
    <item> andable1 </item>
    <item> andable2 </item>

    <item> xorable </item>
    <item> xorable1 </item>
    <item> xorable2 </item>

    <item> incrementable </item>
    <item> decrementable </item>

    <item> left_shiftable </item>
    <item> left_shiftable1 </item>
    <item> left_shiftable2 </item>

    <item> right_shiftable </item>
    <item> right_shiftable1 </item>
    <item> right_shiftable2 </item>

    <item> equivalent </item>
    <item> equivalent1 </item>
    <item> equivalent2 </item>

    <item> partially_ordered </item>
    <item> partially_ordered1 </item>
    <item> partially_ordered2 </item>

    <item> totally_ordered </item>
    <item> totally_ordered1 </item>
    <item> totally_ordered2 </item>

    <item> additive </item>
    <item> additive1 </item>
    <item> additive2 </item>

    <item> multiplicative </item>
    <item> multiplicative1 </item>
    <item> multiplicative2 </item>

    <item> integer_multiplicative </item>
    <item> integer_multiplicative1 </item>
    <item> integer_multiplicative2 </item>

    <item> arithmetic </item>
    <item> arithmetic1 </item>
    <item> arithmetic2 </item>

    <item> integer_arithmetic </item>
    <item> integer_arithmetic1 </item>
    <item> integer_arithmetic2 </item>

    <item> bitwise </item>
    <item> bitwise1 </item>
    <item> bitwise2 </item>

    <item> unit_steppable </item>

    <item> shiftable </item>
    <item> shiftable1 </item>
    <item> shiftable2 </item>

    <item> ring_operators </item>
    <item> ring_operators1 </item>
    <item> ring_operators2 </item>

    <item> ordered_ring_operators </item>
    <item> ordered_ring_operators1 </item>
    <item> ordered_ring_operators2 </item>

    <item> field_operators </item>
    <item> field_operators1 </item>
    <item> field_operators2 </item>

    <item> ordered_field_operators </item>
    <item> ordered_field_operators1 </item>

    <item> ordered_field_operators2 </item>

    <item> euclidian_ring_operators </item>
    <item> euclidian_ring_operators1 </item>
    <item> euclidian_ring_operators2 </item>

    <item> ordered_euclidian_ring_operators </item>
    <item> ordered_euclidian_ring_operators1 </item>
    <item> ordered_euclidian_ring_operators2 </item>

    <item> operators </item>
    <item> operators2 </item>

    <item> dereferenceable </item>
    <item> indexable </item>

    <item> input_iteratable </item>
    <item> output_iteratable </item>
    <item> forward_iteratable </item>
    <item> bidirectional_iteratable </item>
    <item> random_access_iteratable </item>

    <item> input_iterator_helper </item>
    <item> output_iterator_helper </item>
    <item> forward_iterator_helper </item>
    <item> bidirectional_iterator_helper </item>
    <item> random_access_iterator_helper </item>

    <!-- boost.property_map -->

    <item> property_traits </item>


    <!-- boost.ref -->

    <item> is_reference_wrapper </item>

    <!-- boost.type_traits -->

    <item> add_const </item>
    <item> add_cv </item>
    <item> add_pointer </item>
    <item> add_reference </item>
    <item> add_volatile </item>
    <item> aligned_storage </item>
    <item> alignment_of </item>
    <item> extent </item>
    <item> function_traits </item>
    <item> has_nothrow_assign </item>
    <item> has_nothrow_constructor </item>
    <item> has_nothrow_copy </item>
    <item> has_trivial_assign </item>
    <item> has_trivial_constructor </item>
    <item> has_trivial_copy </item>
    <item> has_trivial_destructor </item>
    <item> has_virtual_destructor </item>
    <item> integral_constant </item>
    <item> is_abstract </item>
    <item> is_arithmetic </item>
    <item> is_array </item>
    <item> is_base_of </item>
    <item> is_class </item>
    <item> is_compound </item>
    <item> is_const </item>
    <item> is_convertible </item>
    <item> is_empty </item>
    <item> is_enum </item>
    <item> is_floating_point </item>
    <item> is_function </item>
    <item> is_fundamental </item>
    <item> is_integral </item>
    <item> is_member_function_pointer </item>
    <item> is_member_object_pointer </item>
    <item> is_member_pointer </item>
    <item> is_object </item>
    <item> is_pod </item>
    <item> is_pointer </item>
    <item> is_polymorphic </item>
    <item> is_same </item>
    <item> is_scalar </item>
    <item> is_stateless </item>
    <item> is_reference </item>
    <item> is_union </item>
    <item> is_void </item>
    <item> is_volatile </item>
    <item> rank </item>
    <item> remove_all_extents </item>
    <item> remove_const </item>
    <item> remove_cv </item>
    <item> remove_extent </item>
    <item> remove_pointer </item>
    <item> remove_reference </item>
    <item> remove_volatile </item>
    <item> type_with_alignment </item>



    <!-- boost.utility (TODO) -->

    <item> base_from_member </item>
    <item> checked_delete </item>
    <item> checked_array_delete </item>
    <item> next </item>
    <item> prior </item>
    <item> noncopyable </item>
    <item> addressof </item>
    <item> result_of </item>

</list>




<list name="boost.exception">

    <!-- boost.any -->

    <item> bad_any_cast </item>

    <!-- boost.assign -->

    <item> assignment_exception </item>

</list>



<list name="boost.container">

    <!-- boost.array -->

    <item> array </item>

    <!-- boost.dynamic_bitset -->

    <item> dynamic_bitset </item>

    <!-- boost.fusion -->

    <item> tuple </item>

    <!-- boost.mpl -->

    <item> range_c </item>
    <item> vector_c </item>
    <item> list_c </item>
    <item> set_c </item>

    <!-- boost.multi_index -->

    <item> multi_index_container </item>

    <!-- boost.bimap -->

    <item> bimap </item>

    <!-- boost.property_map -->

    <item> identity_property_map </item>
    <item> iterator_property_map </item>
    <item> associative_property_map </item>
    <item> const_associative_property_map </item>
    <item> vector_property_map </item>

</list>




<list name="boost.macro">

    <!-- boost.ConceptCheck -->

    <item> BOOST_CLASS_REQUIRE </item>

    <!-- boost.fusion -->

    <item> FUSION_MAX_VECTOR_SIZE </item>
    <item> FUSION_MAX_LIST_SIZE </item>
    <item> FUSION_MAX_SET_SIZE </item>
    <item> FUSION_MAX_MAP_SIZE </item>

    <!-- boost.mpl -->

    <item> BOOST_MPL_ASSERT </item>
    <item> BOOST_MPL_ASSERT_MSG </item>
    <item> BOOST_MPL_ASSERT_NOT </item>
    <item> BOOST_MPL_ASSERT_RELATION </item>

    <item> BOOST_MPL_HAS_XXX_TRAIT_DEF </item>
    <item> BOOST_MPL_HAS_XXX_TRAIT_NAMED_DEF </item>

    <item> BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS </item>
    <item> BOOST_MPL_CFG_NO_HAS_XXX </item>
    <item> BOOST_MPL_LIMIT_METAFUNCTION_ARITY </item>
    <item> BOOST_MPL_LIMIT_VECTOR_SIZE </item>
    <item> BOOST_MPL_LIMIT_LIST_SIZE </item>
    <item> BOOST_MPL_LIMIT_SET_SIZE </item>
    <item> BOOST_MPL_LIMIT_MAP_SIZE </item>
    <item> BOOST_MPL_LIMIT_UNROLLING </item>

    <item> BOOST_MPL_AUX_LAMBDA_SUPPORT </item>

    <!-- boost.multi_index -->

    <item> BOOST_MULTI_INDEX_MEMBER </item>
    <item> BOOST_MULTI_INDEX_CONST_MEM_FUN </item>
    <item> BOOST_MULTI_INDEX_MEM_FUN </item>

    <!-- boost.static_assert -->

    <item> BOOST_STATIC_ASSERT </item>

    <!-- boost.test -->

    <item> BOOST_TEST_CATCH_SYSTEM_ERRORS </item>
    <item> BOOST_PRG_MON_CONFIRM </item>
    <item> BOOST_TEST_DONT_PRINT_LOG_VALUE </item>

    <item> BOOST_CHECK </item>
    <item> BOOST_CHECK_PRED </item>
    <item> BOOST_CHECK_MSG </item>
    <item> BOOST_CHECK_EQUAL </item>
    <item> BOOST_CHECK_CLOSE </item>
    <item> BOOST_CHECK_SMALL </item>
    <item> BOOST_CHECK_BITWISE_EQUAL </item>

    <item> BOOST_WARN </item>
    <item> BOOST_WARN_PRED </item>
    <item> BOOST_WARN_MSG </item>
    <item> BOOST_WARN_EQUAL </item>
    <item> BOOST_WARN_CLOSE </item>
    <item> BOOST_WARN_SMALL </item>
    <item> BOOST_WARN_BITWISE_EQUAL </item>

    <item> BOOST_REQUIRE </item>
    <item> BOOST_REQUIRE_PRED </item>
    <item> BOOST_REQUIRE_MSG </item>
    <item> BOOST_REQUIRE_EQUAL </item>
    <item> BOOST_REQUIRE_CLOSE </item>
    <item> BOOST_REQUIRE_SMALL </item>
    <item> BOOST_REQUIRE_BITWISE_EQUAL </item>

    <item> BOOST_PASS </item>
    <item> BOOST_PASS_PRED </item>
    <item> BOOST_PASS_MSG </item>
    <item> BOOST_PASS_EQUAL </item>
    <item> BOOST_PASS_CLOSE </item>
    <item> BOOST_PASS_SMALL </item>
    <item> BOOST_PASS_BITWISE_EQUAL </item>

    <item> BOOST_MSG_ONLY </item>
    <item> BOOST_SET_CHECKPOINT </item>
    <item> BOOST_CHECK_PRED_WITH_ARGS </item>
    <item> BOOST_CHECK_EQUAL_COLL </item>

    <item> BOOST_ERROR </item>
    <item> BOOST_FAIL </item>

</list>


<list name="boost.fusion.result_of">

    <item> advance_c </item>
    <item> next </item>
    <item> equal_to </item>
    <item> advance </item>
    <item> distance </item>
    <item> deref </item>
    <item> value_of </item>
    <item> prior </item>
    <item> begin </item>
    <item> end </item>
    <item> size </item>
    <item> empty </item>
    <item> front </item>
    <item> back </item>

</list>




<list name="boost.concepts.member.functions">

    <!-- boost.iterator -->

    <item> dereference </item>
    <item> equal </item>
    <item> increment </item>
    <item> decrement </item>
    <item> advance </item>
    <item> distance_to </item>
    <item> begin </item>
    <item> end </item>
    <item> size </item>
    <item> max_size </item>
    <item> empty </item>
    <item> swap </item>
    <item> rbegin </item>
    <item> rend </item>
    <item> front </item>
    <item> insert </item>
    <item> erase </item>
    <item> clear </item>
    <item> resize </item>
    <item> push_front </item>
    <item> pop_front </item>
    <item> push_back </item>
    <item> pop_back </item>
    <item> erase </item>
    <item> clear </item>
    <item> find </item>
    <item> count </item>
    <item> equal_range </item>
    <item> key_comp </item>
    <item> lower_bound </item>
    <item> upper_bound </item>
    <item> equal_range </item>
    <item> get_allocator </item>
    <item> hash_function </item>
    <item> key_eq </item>
    <item> bucket_count </item>
    <item> max_bucket_count </item>
    <item> bucket_size </item>
    <item> bucket </item>
    <item> load_factor </item>
    <item> max_load_factor </item>
    <item> at </item>

</list>




<list name="boost.concepts.free.functions">

    <!-- boost.test -->

    <item> cpp_main </item>
    <item> test_main </item>

</list>




<list name="boost.tags">

    <!-- boost.iterator -->

    <item> readable_iterator_t </item>
    <item> writable_iterator_t </item>
    <item> readable_writable_iterator_t </item>
    <item> readable_lvalue_iterator_t </item>
    <item> writable_lvalue_iterator_t </item>

    <!-- boost.property_map -->

    <item> readable_property_map_tag </item>
    <item> writable_property_map_tag </item>
    <item> read_write_property_map_tag </item>
    <item> lvalue_property_map_tag </item>

</list>




<list name="boost.member.functions">

    <item> base </item>
    <item> base_reference </item>

</list>

<list name="boost.constants">

    <!-- boost.test -->
    <item> exit_success </item>
    <item> exit_failure </item>
    <item> exit_exception_failure </item>

</list>

<list name="boost.concepts.member.typedef">

    <item> value_type </item>
    <item> iterator </item>
    <item> const_iterator </item>
    <item> reference </item>
    <item> const_reference </item>
    <item> pointer </item>
    <item> difference_type </item>
    <item> size_type </item>
    <item> reverse_iterator </item>
    <item> const_reverse_iterator </item>
    <item> key_type </item>
    <item> data_type </item>
    <item> hasher </item>
    <item> key_equal </item>
    <item> local_iterator </item>
    <item> const_local_iterator </item>
    <item> key_compare </item>
    <item> value_compare </item>
    <item> iterator_category </item>
    <item> value_type </item>
    <item> difference_type </item>
    <item> pointer </item>
    <item> reference </item>

</list>

<list name="boost.namespaces" >

    <item> std </item>
    <item> boost </item>
    <item> assign </item>
    <item> bimaps </item>
    <item> call_traits </item>
    <item> concept_check </item>
    <item> conversion </item>
    <item> date_time </item>
    <item> dynamic_bitset </item>
    <item> enable_if </item>
    <item> filesystem </item>
    <item> format </item>
    <item> hash </item>
    <item> graph </item>
    <item> integer </item>
    <item> in_place_factory </item>
    <item> io_state_saver </item>
    <item> iostream </item>
    <item> lambda </item>
    <item> math </item>
    <item> minmax </item>
    <item> mpl </item>
    <item> multi_array </item>
    <item> multi_index </item>
    <item> numeric </item>
    <item> operators </item>
    <item> parameter </item>
    <item> pointer_container </item>
    <item> pool </item>
    <item> preprocesor </item>
    <item> program_options </item>
    <item> property_map </item>
    <item> python </item>
    <item> random </item>
    <item> regex </item>
    <item> serialization </item>
    <item> signals </item>
    <item> smart_ptr </item>
    <item> static_assert </item>
    <item> spirit </item>
    <item> string_algo </item>
    <item> test </item>
    <item> thread </item>
    <item> timer </item>
    <item> tokenizer </item>
    <item> tribool </item>
    <item> tuples </item>
    <item> type_traits </item>
    <item> uBLAS </item>
    <item> utility </item>
    <item> value_initialized </item>
    <item> wave </item>
    <item> fusion </item>

</list>


<!-- TODO LIST BEGIN

<list name="boost.date_time">

    <item> day_functor </item>
    <item> month_functor </item>
    <item> week_functor </item>
    <item> year_functor </item>
    <item> c_local_adjustor </item>
    <item> c_time </item>
    <item> constrained_value </item>
    <item> date </item>
    <item> day_clock </item>
    <item> weekdays::Sunday </item>
    <item> weekdays::Monday </item>
    <item> weekdays::Tuesday </item>
    <item> weekdays::Wednesday </item>
    <item> weekdays::Thursday </item>
    <item> weekdays::Friday </item>
    <item> weekdays::Saturday </item>
    <item> weekdays </item>
    <item> months_of_year::Jan </item>
    <item> months_of_year::Feb </item>
    <item> months_of_year::Mar </item>
    <item> months_of_year::Apr </item>
    <item> months_of_year::May </item>
    <item> months_of_year::Jun </item>
    <item> months_of_year::Jul </item>
    <item> months_of_year::Aug </item>
    <item> months_of_year::Sep </item>
    <item> months_of_year::Oct </item>
    <item> months_of_year::Nov </item>
    <item> months_of_year::Dec </item>
    <item> months_of_year </item>
    <item> NotAMonth </item>
    <item> NumMonths </item>
    <item> date_duration </item>
    <item> duration_traits_long </item>
    <item> duration_traits_adapted </item>
    <item> weeks_duration </item>
    <item> months_duration </item>
    <item> years_duration </item>
    <item> date_facet </item>
    <item> date_input_facet </item>
    <item> simple_format </item>
    <item> month_formatter </item>
    <item> ymd_formatter </item>
    <item> date_formatter </item>
    <item> ostream_month_formatter </item>
    <item> ostream_weekday_formatter </item>
    <item> ostream_ymd_formatter </item>
    <item> ostream_date_formatter </item>
    <item> date_generator_formatter </item>
    <item> date_generator_parser </item>
    <item> year_based_generator </item>
    <item> partial_date </item>
    <item> nth_kday_of_month </item>
    <item> first_kday_of_month </item>
    <item> last_kday_of_month </item>
    <item> first_kday_after </item>
    <item> first_kday_before </item>
    <item> days_until_weekday </item>
    <item> days_before_weekday </item>
    <item> next_weekday </item>
    <item> previous_weekday </item>
    <item> date_itr_base </item>
    <item> date_itr </item>
    <item> date_resolutions </item>
    <item> date_resolutions::day </item>
    <item> date_resolutions::week </item>
    <item> date_resolutions::months </item>
    <item> date_resolutions::year </item>
    <item> date_resolutions::decade </item>
    <item> date_resolutions::century  </item>
    <item> date_names_put </item>
    <item> all_date_names_put </item>
    <item> dst_calculator </item>
    <item> dst_calc_engine </item>
    <item> us_dst_rules </item>
    <item> null_dst_rules </item>
    <item> dst_day_calc_rule </item>
    <item> day_calc_dst_rule </item>
    <item> time_from_ftime </item>
    <item> format_date_parser </item>
    <item> gregorian_calendar_base </item>
    <item> iso_format_base </item>
    <item> iso_format </item>
    <item> iso_extended_format </item>
    <item> utc_adjustment </item>
    <item> dynamic_local_time_adjustor </item>
    <item> class static_local_time_adjustor </item>
    <item> local_adjustor </item>
    <item> us_dst_trait </item>
    <item> eu_dst_trait </item>
    <item> uk_dst_trait </item>
    <item> acst_dst_trait </item>
    <item> microsec_clock </item>
    <item> month_format_spec </item>
    <item> month_format_spec::month_as_integer </item>
    <item> month_format_spec::month_as_short_string  </item>
    <item> month_format_spec::month_as_long_string </item>
    <item> ymd_order_spec </item>
    <item> period </item>
    <item> period_formatter </item>
    <item> period_parser </item>
    <item> special_values </item>
    <item> special_values::not_a_date_time </item>
    <item> special_values::neg_infin </item>
    <item> special_values::pos_infin </item>
    <item> special_values::min_date_time </item>
    <item> special_values::max_date_time </item>
    <item> special_values::not_special </item>
    <item> special_values_formatter </item>
    <item> special_values_parser </item>
    <item> convert_string_type </item>
    <item> gather_month_strings </item>
    <item> gather_weekday_strings </item>
    <item> base_time </item>
    <item> second_clock </item>
    <item> time_resolutions </item>
    <item> time_resolutions::sec </item>
    <item> time_resolutions::tenth </item>
    <item> time_resolutions::hundreth </item>
    <item> time_resolutions::milli </item>
    <item> time_resolutions::ten_thousandth </item>
    <item> time_resolutions::micro </item>
    <item> time_resolutions::nano </item>
    <item> dst_flags </item>
    <item> dst_flags::not_dst </item>
    <item> dst_flags::is_dst </item>
    <item> dst_flags::calculate </item>
    <item> time_duration </item>
    <item> subsecond_duration </item>
    <item> time_formats </item>
    <item> time_facet </item>
    <item> time_input_facet </item>
    <item> ostream_time_duration_formatter </item>
    <item> ostream_time_formatter </item>
    <item> ostream_time_period_formatter </item>
    <item> time_itr </item>
    <item> parse_delimited_time_duration </item>
    <item> parse_delimited_time </item>
    <item> parse_undelimited_time_duration </item>
    <item> parse_iso_time </item>
    <item> time_resolution_traits </item>
    <item> counted_time_rep </item>
    <item> counted_time_system </item>
    <item> split_timedate_system </item>
    <item> time_zone_base </item>
    <item> dst_adjustment_offsets </item>
    <item> time_zone_names_base </item>
    <item> time_zone_names </item>
    <item> year_month_day_base </item>

    <item> gregorian_calendar </item>
    <item> fancy_date_rep </item>
    <item> bad_day_of_month </item>
    <item> greg_day </item>
    <item> greg_day_policies </item>
    <item> greg_day_rep </item>
    <item> bad_day_of_year </item>
    <item> greg_day_of_year_policies </item>
    <item> greg_day_of_year_rep </item>
    <item> date_duration_rep </item>
    <item> date_duration </item>
    <item> greg_durations_config </item>
    <item> months </item>
    <item> years </item>
    <item> weeks </item>
    <item> bad_month </item>
    <item> greg_month </item>
    <item> greg_month_policies </item>
    <item> greg_month_rep </item>
    <item> bad_weekday </item>
    <item> greg_weekday </item>
    <item> greg_weekday_policies </item>
    <item> greg_weekday_rep </item>
    <item> bad_year </item>
    <item> greg_year </item>
    <item> greg_year_policies </item>
    <item> greg_year_rep </item>
    <item> greg_year_month_day </item>
    <item> date_period </item>
    <item> day_clock </item>
    <item> date_iterator </item>
    <item> day_iterator </item>
    <item> week_iterator </item>
    <item> month_iterator </item>
    <item> year_iterator </item>
    <item> date_from_iso_string </item>
    <item> from_streamdate_period_from_string </item>
    <item> date_period_from_wstring </item>

    <item> ptime </item>
    <item> time_duration </item>
    <item> simple_time_rep </item>
    <item> posix_time_system_config </item>
    <item> millisec_posix_time_system_config </item>
    <item> hours </item>
    <item> minutes </item>
    <item> seconds </item>
    <item> millisec </item>
    <item> milliseconds </item>
    <item> microsec </item>
    <item> microseconds </item>
    <item> nanosec </item>
    <item> nanoseconds </item>
    <item> posix_time_system </item>
    <item> time_iterator </item>
    <item> second_clock </item>
    <item> microsec_clock </item>
    <item> no_dst </item>
    <item> us_dst </item>
    <item> duration_from_string </item>
    <item> time_from_string </item>
    <item> time_period </item>

    <item> to_tm </item>
    <item> custom_time_zone </item>
    <item> dst_calc_rule_ptr </item>
    <item> dst_calc_rule </item>
    <item> partial_date_dst_rule </item>
    <item> first_last_dst_rule </item>
    <item> last_last_dst_rule </item>
    <item> nth_last_dst_rule </item>
    <item> nth_kday_dst_rule </item>
    <item> nth_day_of_the_week_in_month_dst_rule </item>
    <item> ambiguous_result </item>
    <item> time_label_invalid </item>
    <item> dst_not_valid </item>
    <item> local_date_time_base </item>
    <item> local_date_time </item>
    <item> BOOST_SERIALIZATION_SPLIT_FREE </item>
    <item> local_time_period </item>
    <item> local_time_iterator </item>
    <item> local_sec_clock </item>
    <item> local_microsec_clock </item>
    <item> time_zone_ptr </item>

</list>

<list name="boost.filesystem">

    <item> path </item>
    <item> portable_posix_name </item>
    <item> windows_name </item>
    <item> portable_name </item>
    <item> portable_directory_name </item>
    <item> portable_file_name </item>
    <item> no_check </item>
    <item> native </item>

    <item> directory_iterator </item>
    <item> exists </item>
    <item> symbolic_link_exists </item>
    <item> is_directory </item>
    <item> is_empty </item>
    <item> equivalent </item>
    <item> file_size </item>
    <item> last_write_time </item>
    <item> create_directory </item>
    <item> remove </item>
    <item> remove_all </item>
    <item> rename </item>
    <item> copy_file </item>
    <item> initial_path </item>
    <item> current_path </item>
    <item> complete </item>
    <item> system_complete </item>

    <item> error_code </item>
    <item> error_code::no_error </item>
    <item> error_code::system_error </item>
    <item> error_code::other_error </item>
    <item> error_code::security_error </item>
    <item> error_code::read_only_error </item>
    <item> error_code::io_error </item>
    <item> error_code::path_error </item>
    <item> error_code::not_found_error </item>
    <item> error_code::not_directory_error </item>
    <item> error_code::busy_error </item>
    <item> error_code::already_exists_error </item>
    <item> error_code::not_empty_error </item>
    <item> error_code::error_code::is_directory_error </item>
    <item> error_code::out_of_space_error </item>
    <item> error_code::out_of_memory_error </item>
    <item> error_code::out_of_resource_error </item>
    <item> filesystem_error </item>

    <item> create_directories </item>
    <item> extension </item>
    <item> basename </item>
    <item> change_extension </item>

</list>

<list name="boost.format">

    <item> basic_format </item>
    <item> format </item>
    <item> wformat </item>

</list>

<list name="boost.function">

    <item> bad_function_call </item>
    <item> function_base </item>
    <item> functionN </item>
    <item> function </item>
    <item> function_equal </item>

</list>

<list name="boost.graph">

</list>

<list name="boost.integer">

    <item> integer_traits </item>

    <item> int_fast_t </item>
    <item> int_t </item>
    <item> uint_t </item>
    <item> int_max_value_t </item>
    <item> int_min_value_t </item>
    <item> uint_value_t </item>

    <item> high_bit_mask_t </item>
    <item> low_bits_mask_t </item>

    <item> static_log2 </item>

    <item> static_signed_min </item>
    <item> static_signed_max </item>
    <item> static_unsigned_min </item>
    <item> static_unsigned_max </item>

</list>

<list name="boost.interval">

    <item> interval_policies </item>
    <item> interval </item>
    <item> lower </item>
    <item> upper </item>
    <item> width </item>
    <item> median </item>
    <item> norm </item>
    <item> singleton </item>
    <item> in_zero </item>
    <item> subset </item>
    <item> proper_subset </item>
    <item> overlap </item>
    <item> intersection </item>
    <item> hull </item>
    <item> bisect </item>
    <item> division_part1 </item>
    <item> division_part2 </item>
    <item> multiplicative_inverse </item>

</list>

<list name="boost.in_place_factory">

    <item> in_place_factory_base </item>
    <item> in_place_factory </item>
    <item> in_place </item>
    <item> typed_in_place_factory_base </item>
    <item> typed_in_place_factory </item>

</list>

<list name="boost.io_state_saver">

    <item> ios_flags_saver </item>
    <item> ios_precision_saver </item>
    <item> ios_width_saver </item>
    <item> ios_base_all_saver </item>
    <item> basic_ios_iostate_saver </item>
    <item> basic_ios_exception_saver </item>
    <item> basic_ios_tie_saver </item>
    <item> basic_ios_rdbuf_saver </item>
    <item> basic_ios_fill_saver </item>
    <item> basic_ios_locale_saver </item>
    <item> basic_ios_all_saver </item>
    <item> ios_iostate_saver </item>
    <item> wios_iostate_saver </item>
    <item> ios_exception_saver </item>
    <item> wios_exception_saver </item>
    <item> ios_tie_saver </item>
    <item> wios_tie_saver </item>
    <item> ios_rdbuf_saver </item>
    <item> wios_rdbuf_saver </item>
    <item> ios_fill_saver </item>
    <item> wios_fill_saver </item>
    <item> ios_locale_saver </item>
    <item> wios_locale_saver </item>
    <item> ios_all_saver </item>
    <item> wios_all_saver </item>
    <item> ios_iword_saver </item>
    <item> ios_pword_saver </item>
    <item> ios_all_word_saver </item>

</list>

<list name="boost.iostream">

    <item> aggregate_filter </item>
    <item> array </item>
    <item> array_sink </item>
    <item> array_source </item>
    <item> back_insert_device </item>
    <item> basic_array </item>
    <item> basic_array_sink </item>
    <item> basic_array_source </item>
    <item> basic_bzip2_compressor </item>
    <item> basic_bzip2_decompressor </item>
    <item> basic_counter </item>
    <item> basic_file </item>
    <item> basic_file_sink </item>
    <item> basic_file_source </item>
    <item> basic_gzip_compressor </item>
    <item> basic_gzip_decompressor </item>
    <item> basic_line_filter </item>
    <item> basic_null_device </item>
    <item> basic_null_sink </item>
    <item> basic_null_source </item>
    <item> basic_regex_filter </item>
    <item> basic_stdio_filter </item>
    <item> basic_zlib_compressor </item>
    <item> basic_zlib_decompressor </item>
    <item> bzip2_compressor </item>
    <item> bzip2_decompressor </item>
    <item> bzip2_error </item>
    <item> bzip2_params </item>
    <item> category_of </item>
    <item> chain </item>
    <item> char_traits </item>
    <item> char_type_of </item>
    <item> code_converter </item>
    <item> combination </item>
    <item> composite </item>
    <item> counter </item>
    <item> device </item>
    <item> dual_use_filter </item>
    <item> dual_use_wfilter </item>
    <item> file </item>
    <item> file_descriptor </item>
    <item> file_descriptor_sink </item>
    <item> file_descriptor_source </item>
    <item> file_sink </item>
    <item> file_source </item>
    <item> filtering_stream </item>
    <item> filtering_streambuf </item>
    <item> filter </item>
    <item> gzip_compressor </item>
    <item> gzip_decompressor </item>
    <item> gzip_error </item>
    <item> gzip_params </item>
    <item> input_filter </item>
    <item> input_wfilter </item>
    <item> inverse </item>
    <item> line_filter </item>
    <item> mapped_file </item>
    <item> mapped_file_sink </item>
    <item> mapped_file_source </item>
    <item> mode_of </item>
    <item> multichar_dual_use_filter </item>
    <item> multichar_dual_use_wfilter </item>
    <item> multichar_filter </item>
    <item> multichar_input_filter </item>
    <item> multichar_input_wfilter </item>
    <item> multichar_output_filter </item>
    <item> multichar_output_wfilter </item>
    <item> multichar_wfilter </item>
    <item> newline_filter </item>
    <item> null_sink </item>
    <item> null_source </item>
    <item> output_filter </item>
    <item> output_wfilter </item>
    <item> regex_filter </item>
    <item> restriction </item>
    <item> seekable_filter </item>
    <item> seekable_wfilter </item>
    <item> sink </item>
    <item> source </item>
    <item> stdio_filter </item>
    <item> stream </item>
    <item> stream_buffer </item>
    <item> symmetric_filter </item>
    <item> tee_device </item>
    <item> tee_filter </item>
    <item> warray </item>
    <item> warray_sink </item>
    <item> warray_source </item>
    <item> wchain </item>
    <item> wcounter </item>
    <item> wdevice </item>
    <item> wfile </item>
    <item> wfile_sink </item>
    <item> wfile_source </item>
    <item> wfilter </item>
    <item> wline_filter </item>
    <item> wnull_sink </item>
    <item> wnull_source </item>
    <item> wregex_filter </item>
    <item> wsink </item>
    <item> wsource </item>
    <item> wstdio_filter </item>
    <item> zlib_compressor </item>
    <item> zlib_decompressor </item>
    <item> zlib_error </item>
    <item> zlib_params </item>

    <item> back_inserter </item>
    <item> close </item>
    <item> combine </item>
    <item> compose </item>
    <item> copy </item>
    <item> flush </item>
    <item> get </item>
    <item> imbue </item>
    <item> invert </item>
    <item> offset_to_position </item>
    <item> optimal_buffer_size </item>
    <item> position_to_offset </item>
    <item> put </item>
    <item> putback </item>
    <item> read </item>
    <item> restrict </item>
    <item> seek </item>
    <item> tee </item>
    <item> test_filter_pair </item>
    <item> test_input_filter </item>
    <item> test_output_filter </item>
    <item> write </item>

    <item> BOOST_IOS </item>
    <item> BOOST_IOSTREAMS_BASIC_ISTREAM </item>
    <item> BOOST_IOSTREAMS_BASIC_IOS </item>
    <item> BOOST_IOSTREAMS_BASIC_IOSTREAM </item>
    <item> BOOST_IOSTREAMS_BASIC_OSTREAM </item>
    <item> BOOST_IOSTREAMS_BASIC_STREAMBUF </item>
    <item> BOOST_IOSTREAMS_CHAR_TRAITS </item>
    <item> BOOST_IOSTREAMS_COMPONENT </item>
    <item> BOOST_IOSTREAMS_COMPONENT_TYPE </item>
    <item> BOOST_IOSTREAMS_DEFAULT_DEVICE_BUFFER_SIZE </item>
    <item> BOOST_IOSTREAMS_DEFAULT_FILTER_BUFFER_SIZE </item>
    <item> BOOST_IOSTREAMS_DEFAULT_PBACK_BUFFER_SIZE </item>
    <item> BOOST_IOSTREAMS_FAILURE </item>
    <item> BOOST_IOSTREAMS_PIPABLE </item>
    <item> BOOST_IOSTREAMS_PUBSEEKOFF </item>
    <item> BOOST_IOSTREAMS_PUBSEEKPOS </item>
    <item> BOOST_IOSTREAMS_PUBSYNC </item>

</list>

<list name="boost.lambda">

    <item> _1 </item>
    <item> _2 </item>
    <item> _3 </item>

    <item> placeholder1_type </item>
    <item> placeholder2_type </item>
    <item> placeholder3_type </item>

    <item> bind </item>

    <item> ret </item>
    <item> var </item>
    <item> constant </item>
    <item> var_type </item>
    <item> constant_type </item>

    <item> if_then </item>
    <item> if_then_else </item>
    <item> if_then_else_return </item>
    <item> while_loop </item>
    <item> do_while_loop </item>
    <item> for_loop </item>
    <item> switch_statement </item>
    <item> case_statement </item>
    <item> default_statement </item>

    <item> if_ </item>
    <item> else_ </item>
    <item> while_ </item>
    <item> do_ </item>
    <item> for_ </item>

    <item> try_catch </item>
    <item> catch_exception </item>
    <item> catch_all </item>

    <item> constructor </item>
    <item> destructor </item>
    <item> destructor </item>
    <item> new_ptr </item>
    <item> new_array </item>
    <item> delete_ptr </item>
    <item> delete_array </item>

    <item> unlambda </item>
    <item> protect </item>

    <item> make_const </item>
    <item> const_parameters </item>
    <item> break_const </item>

    <item> ll_static_cast </item>
    <item> ll_dynamic_cast </item>
    <item> ll_const_cast </item>
    <item> ll_reinterpret_cast </item>

    <item> ll_sizeof </item>
    <item> ll_typeid </item>

    <item> call_begin </item>
    <item> call_end </item>

</list>

<list name="boost.math">

    <item> quaternion </item>
    <item> octonion </item>

    <item> gcd </item>
    <item> lcm </item>
    <item> static_gcd </item>
    <item> static_lcm </item>
    <item> gcd_evaluator </item>
    <item> lcm_evaluator </item>

    <item> acosh </item>
    <item> asinh </item>
    <item> atanh </item>
    <item> sinc </item>
    <item> sinhc </item>

</list>

<list name="boost.minmax">

    <item> minmax </item>
    <item> minmax_element </item>
    <item> first_min_element </item>
    <item> last_min_element </item>
    <item> first_max_element </item>
    <item> last_max_element </item>
    <item> first_min_first_max_element </item>
    <item> first_min_last_max_element </item>
    <item> last_min_first_max_element </item>
    <item> last_min_last_max_element </item>

</list>

<list name="boost.multi_array">

    <item> multi_array_types </item>
    <item> multi_array_types::index </item>
    <item> multi_array_types::size_type </item>
    <item> multi_array_types::difference_type </item>
    <item> multi_array_types::index_range </item>
    <item> multi_array_types::extent_range </item>
    <item> multi_array_types::index_gen </item>
    <item> multi_array_types::extent_gen </item>

    <item> multi_array </item>
    <item> multi_array_ref </item>
    <item> const_multi_array_ref </item>

    <item> extents </item>
    <item> indices </item>

    <item> subarray_gen </item>
    <item> const_subarray_gen </item>
    <item> array_view_gen </item>
    <item> const_array_view_gen </item>

    <item> c_storage_order </item>
    <item> fortran_storage_order </item>
    <item> general_storage_order </item>

</list>

<list name="boost.numeric">

    <item> converter </item>
    <item> bounds </item>

    <item> int_float_mixture_enum </item>

    <item> int_float_mixture_enum::integral_to_integral </item>
    <item> int_float_mixture_enum::integral_to_float </item>
    <item> int_float_mixture_enum::float_to_integral </item>
    <item> int_float_mixture_enum::float_to_float </item>

    <item> sign_mixture_enum </item>
    <item> sign_mixture_enum::unsigned_to_unsigned </item>
    <item> sign_mixture_enum::signed_to_signed </item>
    <item> sign_mixture_enum::signed_to_unsigned </item>
    <item> sign_mixture_enum::unsigned_to_signed </item>

    <item> udt_builtin_mixture_enum </item>
    <item> udt_builtin_mixture_enum::builtin_to_builtin </item>
    <item> udt_builtin_mixture_enum::builtin_to_udt </item>
    <item> udt_builtin_mixture_enum::udt_to_builtin </item>
    <item> udt_builtin_mixture_enum::udt_to_udt </item>

    <item> int_float_mixture </item>
    <item> sign_mixture  </item>
    <item> udt_builtin_mixture </item>
    <item> is_subranged </item>

    <item> conversion_traits </item>

    <item> range_check_result </item>
    <item> range_check_result::cInRange </item>
    <item> range_check_result::cNegOverflow </item>
    <item> range_check_result::cPosOverflow </item>

    <item> def_overflow_handler </item>
    <item> silent_overflow_handler </item>

    <item> bad_numeric_cast </item>
    <item> negative_overflow </item>
    <item> positive_overflow </item>

    <item> Trunc </item>
    <item> RoundEven </item>
    <item> Ceil </item>
    <item> Floor </item>

    <item> raw_numeric_converter </item>

    <item> UseInternalRangeChecker </item>

    <item> numeric_cast </item>

</list>

<list name="boost.parameter">

    <item> BOOST_PARAMETER_KEYWORD </item>
    <item> BOOST_PARAMETER_FUN </item>
    <item> BOOST_PARAMETER_MATCH </item>

</list>

<list name="boost.pointer_container">

    <item> new_clone </item>
    <item> delete_clone </item>
    <item> allocate_clone </item>
    <item> deallocate_clone </item>
    <item> heap_clone_allocator </item>
    <item> view_clone_allocator </item>

    <item> ptr_sequence_adapter </item>
    <item> ptr_set_adapter </item>
    <item> ptr_multiset_adapter </item>
    <item> ptr_map_adapter </item>
    <item> ptr_multimap_adapter </item>

    <item> ptr_vector </item>
    <item> ptr_deque </item>
    <item> ptr_list </item>
    <item> ptr_array </item>

    <item> ptr_set </item>
    <item> ptr_multiset </item>
    <item> ptr_map </item>
    <item> ptr_multimap </item>

    <item> nullable </item>
    <item> bad_ptr_container_operation </item>
    <item> bad_index </item>
    <item> bad_pointer </item>

</list>

<list name="boost.pool">

    <item> pool </item>
    <item> object_pool </item>
    <item> singleton_pool </item>
    <item> pool_allocator </item>

</list>

<list name="boost.preprocesor">

    <item> BOOST_PP_ADD </item>
    <item> BOOST_PP_ADD_D </item>
    <item> BOOST_PP_AND </item>
    <item> BOOST_PP_APPLY </item>
    <item> BOOST_PP_ARRAY_DATA </item>
    <item> BOOST_PP_ARRAY_ELEM </item>
    <item> BOOST_PP_ARRAY_INSERT </item>
    <item> BOOST_PP_ARRAY_INSERT_D </item>
    <item> BOOST_PP_ARRAY_POP_BACK </item>
    <item> BOOST_PP_ARRAY_POP_BACK_Z </item>
    <item> BOOST_PP_ARRAY_POP_FRONT </item>
    <item> BOOST_PP_ARRAY_POP_FRONT_Z </item>
    <item> BOOST_PP_ARRAY_PUSH_BACK </item>
    <item> BOOST_PP_ARRAY_PUSH_FRONT </item>
    <item> BOOST_PP_ARRAY_REMOVE </item>
    <item> BOOST_PP_ARRAY_REMOVE_D </item>
    <item> BOOST_PP_ARRAY_REPLACE </item>
    <item> BOOST_PP_ARRAY_REPLACE_D </item>
    <item> BOOST_PP_ARRAY_REVERSE </item>
    <item> BOOST_PP_ARRAY_SIZE </item>
    <item> BOOST_PP_ASSERT </item>
    <item> BOOST_PP_ASSERT_MSG </item>
    <item> BOOST_PP_ASSIGN_SLOT </item>
    <item> BOOST_PP_BITAND </item>
    <item> BOOST_PP_BITNOR </item>
    <item> BOOST_PP_BITOR </item>
    <item> BOOST_PP_BITXOR </item>
    <item> BOOST_PP_BOOL </item>
    <item> BOOST_PP_CAT </item>
    <item> BOOST_PP_COMMA </item>
    <item> BOOST_PP_COMMA_IF </item>
    <item> BOOST_PP_COMPL </item>
    <item> BOOST_PP_CONFIG_EXTENDED_LINE_INFO </item>
    <item> BOOST_PP_DEC </item>
    <item> BOOST_PP_DEDUCE_D </item>
    <item> BOOST_PP_DEDUCE_R </item>
    <item> BOOST_PP_DEDUCE_Z </item>
    <item> BOOST_PP_DIV </item>
    <item> BOOST_PP_DIV_D </item>
    <item> BOOST_PP_EMPTY </item>
    <item> BOOST_PP_ENUM </item>
    <item> BOOST_PP_ENUM_BINARY_PARAMS </item>
    <item> BOOST_PP_ENUM_BINARY_PARAMS_Z </item>
    <item> BOOST_PP_ENUM_PARAMS </item>
    <item> BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT </item>
    <item> BOOST_PP_ENUM_PARAMS_WITH_DEFAULTS </item>
    <item> BOOST_PP_ENUM_PARAMS_Z </item>
    <item> BOOST_PP_ENUM_SHIFTED </item>
    <item> BOOST_PP_ENUM_SHIFTED_PARAMS </item>
    <item> BOOST_PP_ENUM_SHIFTED_PARAMS_Z </item>
    <item> BOOST_PP_ENUM_TRAILING </item>
    <item> BOOST_PP_ENUM_TRAILING_BINARY_PARAMS </item>
    <item> BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z </item>
    <item> BOOST_PP_ENUM_TRAILING_PARAMS </item>
    <item> BOOST_PP_ENUM_TRAILING_PARAMS_Z </item>
    <item> BOOST_PP_EQUAL </item>
    <item> BOOST_PP_EQUAL_D </item>
    <item> BOOST_PP_EXPAND </item>
    <item> BOOST_PP_EXPR_IF </item>
    <item> BOOST_PP_EXPR_IIF </item>
    <item> BOOST_PP_FILENAME_x </item>
    <item> BOOST_PP_FOR </item>
    <item> BOOST_PP_FRAME_FINISH </item>
    <item> BOOST_PP_FRAME_FLAGS </item>
    <item> BOOST_PP_FRAME_ITERATION </item>
    <item> BOOST_PP_FRAME_START </item>
    <item> BOOST_PP_GREATER </item>
    <item> BOOST_PP_GREATER_D </item>
    <item> BOOST_PP_GREATER_EQUAL </item>
    <item> BOOST_PP_GREATER_EQUAL_D </item>
    <item> BOOST_PP_IDENTITY </item>
    <item> BOOST_PP_IF </item>
    <item> BOOST_PP_IIF </item>
    <item> BOOST_PP_INC </item>
    <item> BOOST_PP_INCLUDE_SELF </item>
    <item> BOOST_PP_INDIRECT_SELF </item>
    <item> BOOST_PP_INTERCEPT </item>
    <item> BOOST_PP_IS_ITERATING </item>
    <item> BOOST_PP_IS_SELFISH </item>
    <item> BOOST_PP_ITERATE </item>
    <item> BOOST_PP_ITERATION </item>
    <item> BOOST_PP_ITERATION_DEPTH </item>
    <item> BOOST_PP_ITERATION_FINISH </item>
    <item> BOOST_PP_ITERATION_FLAGS </item>
    <item> BOOST_PP_ITERATION_LIMITS </item>
    <item> BOOST_PP_ITERATION_START </item>
    <item> BOOST_PP_LESS </item>
    <item> BOOST_PP_LESS_D </item>
    <item> BOOST_PP_LESS_EQUAL </item>
    <item> BOOST_PP_LESS_EQUAL_D </item>
    <item> BOOST_PP_LIMIT_DIM </item>
    <item> BOOST_PP_LIMIT_FOR </item>
    <item> BOOST_PP_LIMIT_ITERATION </item>
    <item> BOOST_PP_LIMIT_ITERATION_DIM </item>
    <item> BOOST_PP_LIMIT_MAG </item>
    <item> BOOST_PP_LIMIT_REPEAT </item>
    <item> BOOST_PP_LIMIT_SEQ </item>
    <item> BOOST_PP_LIMIT_SLOT_COUNT </item>
    <item> BOOST_PP_LIMIT_SLOT_SIG </item>
    <item> BOOST_PP_LIMIT_TUPLE </item>
    <item> BOOST_PP_LIMIT_WHILE </item>
    <item> BOOST_PP_LINE </item>
    <item> BOOST_PP_LIST_APPEND </item>
    <item> BOOST_PP_LIST_APPEND_D </item>
    <item> BOOST_PP_LIST_AT </item>
    <item> BOOST_PP_LIST_AT_D </item>
    <item> BOOST_PP_LIST_CAT </item>
    <item> BOOST_PP_LIST_CAT_D </item>
    <item> BOOST_PP_LIST_CONS </item>
    <item> BOOST_PP_LIST_ENUM </item>
    <item> BOOST_PP_LIST_ENUM_R </item>
    <item> BOOST_PP_LIST_FILTER </item>
    <item> BOOST_PP_LIST_FILTER_D </item>
    <item> BOOST_PP_LIST_FIRST </item>
    <item> BOOST_PP_LIST_FIRST_N </item>
    <item> BOOST_PP_LIST_FIRST_N_D </item>
    <item> BOOST_PP_LIST_FOLD_LEFT </item>
    <item> BOOST_PP_LIST_FOLD_LEFT_2ND </item>
    <item> BOOST_PP_LIST_FOLD_LEFT_2ND_D </item>
    <item> BOOST_PP_LIST_FOLD_LEFT_D </item>
    <item> BOOST_PP_LIST_FOLD_RIGHT </item>
    <item> BOOST_PP_LIST_FOLD_RIGHT_2ND </item>
    <item> BOOST_PP_LIST_FOLD_RIGHT_2ND_D </item>
    <item> BOOST_PP_LIST_FOLD_RIGHT_D </item>
    <item> BOOST_PP_LIST_FOR_EACH </item>
    <item> BOOST_PP_LIST_FOR_EACH_I </item>
    <item> BOOST_PP_LIST_FOR_EACH_I_R </item>
    <item> BOOST_PP_LIST_FOR_EACH_PRODUCT </item>
    <item> BOOST_PP_LIST_FOR_EACH_PRODUCT_R </item>
    <item> BOOST_PP_LIST_FOR_EACH_R </item>
    <item> BOOST_PP_LIST_IS_CONS </item>
    <item> BOOST_PP_LIST_IS_NIL </item>
    <item> BOOST_PP_LIST_NIL </item>
    <item> BOOST_PP_LIST_REST </item>
    <item> BOOST_PP_LIST_REST_N </item>
    <item> BOOST_PP_LIST_REST_N_D </item>
    <item> BOOST_PP_LIST_REVERSE </item>
    <item> BOOST_PP_LIST_REVERSE_D </item>
    <item> BOOST_PP_LIST_SIZE </item>
    <item> BOOST_PP_LIST_SIZE_D </item>
    <item> BOOST_PP_LIST_TO_TUPLE </item>
    <item> BOOST_PP_LIST_TO_TUPLE_R </item>
    <item> BOOST_PP_LIST_TRANSFORM </item>
    <item> BOOST_PP_LIST_TRANSFORM_D </item>
    <item> BOOST_PP_LOCAL_ITERATE </item>
    <item> BOOST_PP_LOCAL_LIMITS </item>
    <item> BOOST_PP_LOCAL_MACRO </item>
    <item> BOOST_PP_LPAREN </item>
    <item> BOOST_PP_LPAREN_IF </item>
    <item> BOOST_PP_MAX </item>
    <item> BOOST_PP_MAX_D </item>
    <item> BOOST_PP_MIN </item>
    <item> BOOST_PP_MIN_D </item>
    <item> BOOST_PP_MOD </item>
    <item> BOOST_PP_MOD_D </item>
    <item> BOOST_PP_MUL </item>
    <item> BOOST_PP_MUL_D </item>
    <item> BOOST_PP_NIL </item>
    <item> BOOST_PP_NOR </item>
    <item> BOOST_PP_NOT </item>
    <item> BOOST_PP_NOT_EQUAL </item>
    <item> BOOST_PP_NOT_EQUAL_D </item>
    <item> BOOST_PP_OR </item>
    <item> BOOST_PP_RELATIVE_FINISH </item>
    <item> BOOST_PP_RELATIVE_FLAGS </item>
    <item> BOOST_PP_RELATIVE_ITERATION </item>
    <item> BOOST_PP_RELATIVE_START </item>
    <item> BOOST_PP_REPEAT </item>
    <item> BOOST_PP_REPEAT_1ST </item>
    <item> BOOST_PP_REPEAT_2ND </item>
    <item> BOOST_PP_REPEAT_3RD </item>
    <item> BOOST_PP_REPEAT_FROM_TO </item>
    <item> BOOST_PP_REPEAT_FROM_TO_1ST </item>
    <item> BOOST_PP_REPEAT_FROM_TO_2ND </item>
    <item> BOOST_PP_REPEAT_FROM_TO_3RD </item>
    <item> BOOST_PP_REPEAT_FROM_TO_D </item>
    <item> BOOST_PP_RPAREN </item>
    <item> BOOST_PP_RPAREN_IF </item>
    <item> BOOST_PP_SEQ_CAT </item>
    <item> BOOST_PP_SEQ_CAT_S </item>
    <item> BOOST_PP_SEQ_ELEM </item>
    <item> BOOST_PP_SEQ_ENUM </item>
    <item> BOOST_PP_SEQ_FILTER </item>
    <item> BOOST_PP_SEQ_FILTER_S </item>
    <item> BOOST_PP_SEQ_FIRST_N </item>
    <item> BOOST_PP_SEQ_FOLD_LEFT </item>
    <item> BOOST_PP_SEQ_FOLD_RIGHT </item>
    <item> BOOST_PP_SEQ_FOR_EACH </item>
    <item> BOOST_PP_SEQ_FOR_EACH_I </item>
    <item> BOOST_PP_SEQ_FOR_EACH_I_R </item>
    <item> BOOST_PP_SEQ_FOR_EACH_PRODUCT </item>
    <item> BOOST_PP_SEQ_FOR_EACH_PRODUCT_R </item>
    <item> BOOST_PP_SEQ_FOR_EACH_R </item>
    <item> BOOST_PP_SEQ_HEAD </item>
    <item> BOOST_PP_SEQ_INSERT </item>
    <item> BOOST_PP_SEQ_NIL </item>
    <item> BOOST_PP_SEQ_POP_BACK </item>
    <item> BOOST_PP_SEQ_POP_FRONT </item>
    <item> BOOST_PP_SEQ_PUSH_BACK </item>
    <item> BOOST_PP_SEQ_PUSH_FRONT </item>
    <item> BOOST_PP_SEQ_REMOVE </item>
    <item> BOOST_PP_SEQ_REPLACE </item>
    <item> BOOST_PP_SEQ_REST_N </item>
    <item> BOOST_PP_SEQ_REVERSE </item>
    <item> BOOST_PP_SEQ_REVERSE_S </item>
    <item> BOOST_PP_SEQ_SIZE </item>
    <item> BOOST_PP_SEQ_SUBSEQ </item>
    <item> BOOST_PP_SEQ_TAIL </item>
    <item> BOOST_PP_SEQ_TO_ARRAY </item>
    <item> BOOST_PP_SEQ_TO_TUPLE </item>
    <item> BOOST_PP_SEQ_TRANSFORM </item>
    <item> BOOST_PP_SEQ_TRANSFORM_S </item>
    <item> BOOST_PP_SLOT </item>
    <item> BOOST_PP_STRINGIZE </item>
    <item> BOOST_PP_SUB </item>
    <item> BOOST_PP_SUB_D </item>
    <item> BOOST_PP_TUPLE_EAT </item>
    <item> BOOST_PP_TUPLE_ELEM </item>
    <item> BOOST_PP_TUPLE_REM </item>
    <item> BOOST_PP_TUPLE_REM_CTOR </item>
    <item> BOOST_PP_TUPLE_REVERSE </item>
    <item> BOOST_PP_TUPLE_TO_LIST </item>
    <item> BOOST_PP_TUPLE_TO_SEQ </item>
    <item> BOOST_PP_VALUE </item>
    <item> BOOST_PP_WHILE </item>
    <item> BOOST_PP_WSTRINGIZE  </item>
    <item> BOOST_PP_XOR  </item>

</list>


<list name="boost.program_options">

    <item> environment_iterator </item>
    <item> eof_iterator </item>

    <item> error </item>
    <item> invalid_syntax </item>
    <item> unknown_option </item>
    <item> ambiguous_option </item>
    <item> multiple_values </item>
    <item> multiple_occurrences </item>
    <item> validation_error </item>
    <item> invalid_option_value </item>
    <item> too_many_positional_options_error </item>
    <item> too_few_positional_options_error </item>
    <item> invalid_command_line_syntax </item>
    <item> invalid_command_line_style </item>

    <item> basic_option </item>
    <item> option </item>
    <item> woption </item>

    <item> option_description </item>
    <item> options_description_easy_init </item>
    <item> options_description </item>
    <item> duplicate_option_error </item>

    <item> basic_parsed_options </item>
    <item> basic_command_line_parser </item>
    <item> parsed_options </item>
    <item> wparsed_options </item>
    <item> ext_parser </item>
    <item> command_line_parser </item>
    <item> wcommand_line_parser </item>
    <item> parse_command_line </item>
    <item> parse_config_file </item>
    <item> collect_unrecognized </item>
    <item> parse_environment </item>

    <item> positional_options_description </item>

    <item> value_semantic </item>
    <item> value_semantic_codecvt_helper </item>
    <item> untyped_value </item>
    <item> typed_value </item>
    <item> value </item>
    <item> wvalue </item>
    <item> bool_switch </item>

    <item> variable_value </item>
    <item> abstract_variables_map </item>
    <item> variables_map </item>
    <item> store </item>
    <item> notify </item>

    <item> BOOST_PROGRAM_OPTIONS_VERSION </item>

</list>

<list name="boost.python">

</list>

<list name="boost.random">

</list>

<list name="boost.range">

    <item> range_value </item>
    <item> range_iterator </item>
    <item> range_const_iterator </item>
    <item> range_difference </item>
    <item> range_size </item>
    <item> range_reverse_iterator </item>
    <item> range_const_reverse_iterator </item>
    <item> range_result_iterator </item>
    <item> range_reverse_result_iterator </item>
    <item> begin </item>
    <item> end </item>
    <item> empty </item>
    <item> size </item>
    <item> rbegin </item>
    <item> rend </item>
    <item> const_begin </item>
    <item> const_end </item>
    <item> const_rbegin </item>
    <item> const_rend </item>
    <item> iterator_range </item>
    <item> sub_range </item>

</list>

<list name="boost.rational">

    <item> rational </item>
    <item> rational_cast </item>
    <item> numerator </item>
    <item> denominator </item>

</list>

<list name="boost.regex">

</list>

<list name="boost.serialization">

    <item> text_oarchive </item>
    <item> text_iarchive </item>
    <item> text_woarchive </item>
    <item> text_wiarchive </item>
    <item> binary_oarchive </item>
    <item> binary_iarchive </item>
    <item> xml_oarchive </item>
    <item> xml_iarchive </item>
    <item> xml_woarchive </item>
    <item> xml_wiarchive </item>
    <item> common_iarchive </item>

    <item> archive_flags </item>
    <item> archive_flags::no_header </item>
    <item> archive_flags::no_codecvt </item>
    <item> archive_flags::no_xml_tag_checking </item>

    <item> access </item>

    <item> serialize </item>
    <item> load </item>
    <item> save </item>

    <item> base_object </item>
    <item> split_member </item>
    <item> split_free </item>
    <item> load_construct_data </item>
    <item> save_construct_data </item>
    <item> register_type </item>
    <item> void_cast_register </item>

    <item> version_type </item>
    <item> object_id_type </item>
    <item> object_id_reference_type </item>
    <item> class_id_type </item>
    <item> class_id_optional_type </item>
    <item> class_id_reference_type </item>
    <item> tracking_type </item>
    <item> classname_type </item>

    <item> BOOST_SERIALIZATION_SPLIT_MEMBER </item>
    <item> BOOST_SERIALIZATION_SPLIT_FREE </item>
    <item> BOOST_CLASS_EXPORT_GUID </item>
    <item> BOOST_CLASS_EXPORT </item>
    <item> BOOST_CLASS_TRACKING </item>
    <item> BOOST_CLASS_IMPLEMENTATION </item>

</list>

<list name="boost.signals">

    <item> signal </item>
    <item> connect_position  </item>
    <item> connect_position::at_front </item>
    <item> connect_position::at_back </item>
    <item> slot </item>
    <item> trackable </item>
    <item> connection </item>
    <item> scoped_connection </item>
    <item> visit_each </item>
    <item> last_value </item>
    <item> swap </item>

</list>


<list name="boost.smart_ptr">

    <item> scoped_ptr </item>
    <item> scoped_array </item>
    <item> swap </item>

    <item> weak_ptr </item>
    <item> make_shared </item>

    <item> shared_ptr_traits </item>
    <item> static_cast_tag </item>
    <item> struct const_cast_tag </item>
    <item> struct dynamic_cast_tag </item>
    <item> struct polymorphic_cast_tag </item>
    <item> sp_enable_shared_from_this </item>
    <item> shared_ptr </item>
    <item> static_pointer_cast </item>
    <item> const_pointer_cast </item>
    <item> dynamic_pointer_cast </item>
    <item> shared_static_cast </item>
    <item> shared_dynamic_cast </item>
    <item> shared_polymorphic_cast </item>
    <item> shared_polymorphic_downcast </item>
    <item> get_pointer </item>
    <item> get_deleter </item>

    <item> shared_array </item>

    <item> intrusive_ptr </item>
    <item> intrusive_ptr_add_ref </item>
    <item> intrusive_ptr_release </item>

</list>

<list name="boost.spirit">

</list>

<list name="boost.string_algo">

    <item> to_lower_copy </item>
    <item> to_lower </item>
    <item> to_upper_copy </item>
    <item> to_upper </item>
    <item> is_classified </item>
    <item> is_space </item>
    <item> is_alnum </item>
    <item> is_alpha </item>
    <item> is_cntrl </item>
    <item> is_digit </item>
    <item> is_graph </item>
    <item> is_lower </item>
    <item> is_print </item>
    <item> is_punct </item>
    <item> is_upper </item>
    <item> is_xdigit </item>
    <item> is_any_of </item>
    <item> is_from_range</item>
    <item> is_equal </item>

    <item> FormatterConcept </item>
    <item> token_compress_mode_type </item>

    <item> erase_range_copy </item>
    <item> erase_range </item>
    <item> erase_first_copy </item>
    <item> erase_first </item>
    <item> ierase_first_copy </item>
    <item> ierase_first </item>
    <item> erase_last_copy </item>
    <item> erase_last </item>
    <item> ierase_last_copy </item>
    <item> ierase_last </item>
    <item> erase_nth_copy </item>
    <item> erase_nth </item>
    <item> ierase_nth_copy </item>
    <item> ierase_nth </item>
    <item> erase_all_copy </item>
    <item> erase_all </item>
    <item> ierase_all_copy </item>
    <item> ierase_all </item>
    <item> erase_head_copy </item>
    <item> erase_head </item>
    <item> erase_tail_copy </item>
    <item> erase_tail </item>
    <item> find </item>
    <item> find_first </item>
    <item> ifind_first </item>
    <item> find_last </item>
    <item> ifind_last </item>
    <item> find_nth </item>
    <item> ifind_nth </item>
    <item> find_head </item>
    <item> find_tail </item>
    <item> find_token </item>
    <item> find_format_copy </item>
    <item> find_format </item>
    <item> find_format_all_copy </item>
    <item> find_format_all </item>
    <item> regex_finder </item>
    <item> regex_formatter </item>
    <item> find_iterator </item>
    <item> split_iterator </item>
    <item> make_find_iterator </item>
    <item> make_split_iterator </item>
    <item> first_finder </item>
    <item> last_finder </item>
    <item> nth_finder </item>
    <item> head_finder </item>
    <item> tail_finder </item>
    <item> token_finder </item>
    <item> range_finder </item>
    <item> const_formatter </item>
    <item> identity_formatter </item>
    <item> empty_formatter </item>
    <item> starts_with </item>
    <item> istarts_with </item>
    <item> ends_with </item>
    <item> iends_with </item>
    <item> contains </item>
    <item> icontains </item>
    <item> equals </item>
    <item> iequals </item>
    <item> all </item>
    <item> find_regex </item>
    <item> replace_regex_copy </item>
    <item> replace_regex </item>
    <item> replace_all_regex_copy </item>
    <item> replace_all_regex </item>
    <item> erase_regex_copy </item>
    <item> erase_regex </item>
    <item> erase_all_regex_copy </item>
    <item> erase_all_regex </item>
    <item> find_all_regex </item>
    <item> split_regex </item>
    <item> regex_finder </item>
    <item> regex_formatter </item>
    <item> replace_range_copy </item>
    <item> replace_range </item>
    <item> replace_first_copy </item>
    <item> replace_first </item>
    <item> ireplace_first_copy </item>
    <item> ireplace_first </item>
    <item> replace_last_copy </item>
    <item> replace_last </item>
    <item> ireplace_last_copy </item>
    <item> ireplace_last </item>
    <item> replace_nth_copy </item>
    <item> replace_nth </item>
    <item> ireplace_nth_copy </item>
    <item> ireplace_nth </item>
    <item> replace_all_copy </item>
    <item> replace_all </item>
    <item> ireplace_all_copy </item>
    <item> ireplace_all </item>
    <item> replace_head_copy </item>
    <item> replace_head </item>
    <item> replace_tail_copy </item>
    <item> replace_tail </item>

    <item> has_native_replace </item>
    <item> has_stable_iterators </item>
    <item> has_const_time_insert </item>
    <item> has_const_time_erase </item>

    <item> find_all </item>
    <item> ifind_all </item>
    <item> split </item>
    <item> trim_left_copy_if </item>
    <item> trim_left_copy </item>
    <item> trim_left_if </item>
    <item> trim_left </item>
    <item> trim_right_copy_if </item>
    <item> trim_right_copy </item>
    <item> trim_right_if </item>
    <item> trim_right </item>
    <item> trim_copy_if </item>
    <item> trim_copy </item>
    <item> trim_if </item>
    <item> trim </item>

</list>

<list name="boost.thread">

    <item> barrier </item>
    <item> condition </item>
    <item> lock_error </item>
    <item> thread_resource_error </item>
    <item> mutex </item>
    <item> try_mutex </item>
    <item> timed_mutex </item>
    <item> BOOST_ONCE_INIT </item>
    <item> call_once </item>
    <item> recursive_mutex </item>
    <item> recursive_try_mutex </item>
    <item> recursive_timed_mutex </item>
    <item> thread </item>
    <item> thread_group </item>
    <item> thread_specific_ptr </item>
    <item> xtime_clock_types </item>
    <item> xtime </item>
    <item> xtime_get </item>

</list>

<list name="boost.timer">

    <item> timer </item>
    <item> progress_timer </item>
    <item> progress_display </item>

</list>

<list name="boost.tokenizer">

    <item> tokenizer </item>
    <item> make_token_iterator </item>
    <item> token_iterator_generator </item>
    <item> char_separator </item>
    <item> escaped_list_separator </item>
    <item> offset_separator </item>

</list>

<list name="boost.tribool">

    <item> BOOST_TRIBOOL_THIRD_STATE </item>
    <item> tribool </item>
    <item> indeterminate </item>
    <item> indeterminate_name </item>
    <item> get_default_indeterminate_name </item>

</list>

<list name="boost.tuple">

    <item> tuple </item>
    <item> make_tuple </item>
    <item> tie </item>
    <item> set_open </item>
    <item> set_close </item>
    <item> set_delimiter </item>
    <item> get </item>

</list>

TODO LIST END -->

<!-- Contexts -->





<list name="boost.uBLAS">

    <!-- coming soon! -->

</list>

<!--
<list name="boost.value_initialized">

    <item> value_initialized </item>
    <item> get </item>

</list>


<list name="boost.variant">

    <item> BOOST_VARIANT_LIMIT_TYPES </item>
    <item> BOOST_VARIANT_ENUM_PARAMS </item>
    <item> BOOST_VARIANT_ENUM_SHIFTED_PARAMS </item>
    <item> BOOST_VARIANT_NO_REFERENCE_SUPPORT </item>
    <item> BOOST_VARIANT_NO_TYPE_SEQUENCE_SUPPORT </item>
    <item> BOOST_VARIANT_NO_FULL_RECURSIVE_VARIANT_SUPPORT </item>

    <item> variant </item>
    <item> make_variant_over </item>
    <item> swap </item>
    <item> make_recursive_variant </item>
    <item> make_recursive_variant_over </item>
    <item> recursive_wrapper </item>
    <item> is_recursive_wrapper </item>
    <item> unwrap_recursive_wrapper </item>
    <item> apply_visitor_delayed_t </item>
    <item> apply_visitor </item>
    <item> bad_get </item>
    <item> get </item>
    <item> bad_visit </item>
    <item> static_visitor </item>
    <item> visitor_ptr_t </item>
    <item> visitor_ptr </item>

</list>
-->
<list name="boost.wave">

    <!-- maybe later... -->

</list>



<contexts>


<context name="main" attribute="boost.free.function" >

    <keyword attribute="boost.free.function" context="#stay" String="boost.free.function" />
    <keyword attribute="boost.template.classes" context="#stay" String="boost.template.classes" />
    <keyword attribute="boost.classes" context="#stay" String="boost.classes" />
    <keyword attribute="boost.metaprogramming" context="#stay" String="boost.metaprogramming" />
    <keyword attribute="boost.exception" context="#stay" String="boost.exception" />
    <keyword attribute="boost.container" context="#stay" String="boost.container" />
    <keyword attribute="boost.macro" context="#stay" String="boost.macro" />
    <keyword attribute="boost.object" context="#stay" String="boost.object" />
    <keyword attribute="boost.fusion.result_of" context="#stay" String="boost.fusion.result_of" />
    <keyword attribute="boost.concepts.member.functions" context="#stay" String="boost.concepts.member.functions" />
    <keyword attribute="boost.concepts.free.functions" context="#stay" String="boost.concepts.free.functions" />
    <keyword attribute="boost.tags" context="#stay" String="boost.tags" />
    <keyword attribute="boost.member.functions" context="#stay" String="boost.member.functions" />
    <keyword attribute="boost.constants" context="#stay" String="boost.constants" />
    <keyword attribute="boost.concepts.member.typedef" context="#stay" String="boost.concepts.member.typedef" />
    <keyword attribute="boost.namespaces" context="#stay" String="boost.namespaces" />


</context>

</contexts>


<!--
    This section defines the colors and format of each type of string parsed
    Try to use defaults so the user can change it as he wished
-->

<itemDatas>

    <itemData name="boost.free.function"                defStyleNum="dsFunction"/>
    <itemData name="boost.template.classes"             defStyleNum="dsDataType"/>
    <itemData name="boost.classes"                      defStyleNum="dsDataType"/>
    <itemData name="boost.metaprogramming"              defStyleNum="dsFunction"/>
    <itemData name="boost.exception"                    defStyleNum="dsDataType" color="#0095ff" selColor="#ffffff" bold="1" italic="0"/>
    <itemData name="boost.container"                    defStyleNum="dsDataType"/>
    <itemData name="boost.macro"                        defStyleNum="dsOthers"/>
    <itemData name="boost.object"                       defStyleNum="dsDataType" color="#0095ff" selColor="#ffffff" bold="1" italic="0"/>
    <itemData name="boost.fusion.result_of"             defStyleNum="dsFunction"/>
    <itemData name="boost.concepts.member.functions"    defStyleNum="dsFunction"/>
    <itemData name="boost.concepts.free.functions"      defStyleNum="dsFunction"/>
    <itemData name="boost.tags"                         defStyleNum="dsOthers"/>
    <itemData name="boost.member.functions"             defStyleNum="dsFunction"/>
    <itemData name="boost.constants"                    defStyleNum="dsKeyword" color="#0095ff" selColor="#ffffff" bold="1" italic="0"/>
    <itemData name="boost.concepts.member.typedef"      defStyleNum="dsDataType"/>
    <itemData name="boost.namespaces"                   defStyleNum="dsDataType"/>

    <!--
        This is an extract from the official Kate page
        It is leave here as a reference.

        dsNormal        used for normal text.
        dsKeyword       used for keywords.
        dsDataType      used for data types.
        dsDecVal        used for decimal values.
        dsBaseN         used for values with a base other than 10.
        dsFloat         used for float values.
        dsChar          used for a character.
        dsString        used for strings.
        dsComment       used for comments.
        dsOthers        used for 'other' things.
        dsAlert         used for warning messages.
        dsFunction      used for function calls.
        dsRegionMarker  used for region markers.
        dsError         used for error highlighting and wrong syntax.

    -->
</itemDatas>

</highlighting>

<general>

    <keywords casesensitive="1" />

</general>

</language>


<!-- [ About the code ]


Introduction
================================================
This kate syntax files aims to improve boost C++ productivity by providing a
consitent highligthing framework.
This files work with kate-part so it can be used in every text procesing application
of KDE. (KWrite,Kate,Konqueror,KDevelop,etc)


Aknowelegments
=================================================



Version history
=================================================

[ 0.1.0 ] Initial beta.

Known bugs
=================================================


Included boost libraries
=================================================

[ boost.any ]
Safe, generic container for single values of different value types.
- Kevlin Henney

[ boost.array ]
STL compliant container wrapper for arrays of constant size.
- Nicolai Josuttis.

[ boost.assign ]
Filling containers with constant or generated data has never been easier.
- Thorsten Ottosen.

[ boost.bind ]
Generalized binders for function/object/pointers and member functions.
- Peter Dimov.

[ boost.call_traits ]
Defines types for passing parameters.
- John Maddock, Howard Hinnant, et al.

[ boost.compressed_pair ]
Empty member optimization.
- John Maddock, Howard Hinnant, et al.

[ boost.concept_check ]
Tools for generic programming
- Jeremy Siek.

[ boost.conversion ]
Polymorphic and lexical casts
- Dave Abrahams, Kevlin Henney.

[ boost.crc ]
Cyclic Redundancy Code
- Daryle Walker.

[ boost.date_time ]
Date-Time library.
- Jeff Garland.

[ boost.dynamic_bitset ]
A runtime sized version of std::bitset
- Jeremy Siek, Chuck Allison.

[ boost.enable_if ]
Selective inclusion of function template overloads
- Jaakko Järvi, Jeremiah Willcock, Andrew Lumsdaine.

[ boost.filesystem ]
Portable paths, iteration over directories, and other useful filesystem operations.
- Beman Dawes.

[ boost.format ]
Type-safe 'printf-like' format operations.
- Samuel Krempp.

[ boost.function ]
Function object wrappers for deferred calls or callbacks.
- Doug Gregor.

[ boost.functional ]
Enhanced function object adaptors.
- Mark Rodgers.

[ boost.fusion ]
Fusion between compile and run time
Joel de Guzman

[ boost.hash ]
A TR1 hash function object that can be extended to hash user defined types
- Daniel James.

[ boost.graph ]
Generic graph components and algorithms
- Jeremy Siek, University of Notre Dame team.

[ boost.integer ]
Headers to ease dealing with integral types.

[ boost.interval ]
Extends the usual arithmetic functions to mathematical intervals
- Guillaume Melquiond, Herv´ Brönnimann, Sylvain Pion.

[ boost.in_place_factory ]
Generic in-place construction of contained objects with a variadic argument-list.
- Fernando Cacciola.

[ boost.io_state_savers ] - Save I/O state to prevent jumbled data
- Daryle Walker.

[ boost.iostreams ]
Framework for defining streams, stream buffers and i/o filters.
- Jonathan Turkanis.

[ boost.iterators ]
Iterator construction framework, adaptors, concepts, and more.
- Dave Abrahams, Jeremy Siek, Thomas Witt.

[ boost.lambda ]
Define small unnamed function objects at the actual call site, and more.
- Jaakko Järvi, Gary Powell.

[ boost.math ]
Several contributions in the domain of mathematics.

[ boost.minmax ]
standard library extensions for simultaneous min/max and min/max element computations,
- Hervé Brönnimann.

[ boost.mpl ]
Template metaprogramming framework of compile-time algorithms, sequences and metafunction classes
- Aleksey Gurtovoy.

[ boost.multi_array ]
Multidimensional containers and adaptors for arrays of contiguous data
- Ron Garcia.

[ boost.multi_index ]
Containers with multiple STL-compatible access interfaces
- Joaquín M López Muñoz.

[ boost.numeric ]
Optimized Policy-based Numeric Conversions
- Fernando Cacciola.

[ boost.operators ]
Templates ease arithmetic classes and iterators
- Dave Abrahams, Jeremy Siek.

[ boost.optional ]
Discriminated-union wrapper for optional values.
- Fernando Cacciola.

[ boost.parameter ]
Write functions that accept arguments by name.
- David Abrahams, Daniel Wallin.

[ boost.pointer_container ]
Containers for storing heap-allocated polymorphic objects to ease OO-programming.
- Thorsten Ottosen.

[ boost.pool ]
Memory pool management
- Steve Cleary.

[ boost.preprocessor ]
Preprocessor metaprogramming tools including repetition and recursion.
- Vesa Karvonen, Paul Mensonides.

[ boost.program_options ]
Access to configuration data given on command line, in config files and other sources.
- Vladimir Prus.

[ boost.property_map ]
Concepts defining interfaces which map key objects to value objects.
- Jeremy Siek.

[ boost.python ]
Reflects C++ classes and functions into Python
- Dave Abrahams.

[ boost.random ]
A complete system for random number generation
- Jens Maurer.

[ boost.range ]
A new infrastructure for generic algorithms that builds on top of the new iterator concepts.
- Thorsten Ottosen.

[ boost.rational ]
A rational number class,
- Paul Moore.

[ boost.ref ]
A utility library for passing references to generic functions.
- Jaako Järvi, Peter Dimov, Doug Gregor, Dave Abrahams.

[ boost.regex ]
Regular expression library.
- John Maddock.

[ boost.serialization ]
Serialization for persistence and marshalling.
- Robert Ramey

[ boost.signals ]
managed signals & slots callback implementation.
- Doug Gregor.

[ boost.smart_ptr ]
Five smart pointer class templates.
- Greg Colvin, Beman Dawes, Peter Dimov, and Darin Adler.

[ boost.static_assert ]
Static assertions (compile time assertions).
- John Maddock.

[ boost.spirit ]
LL parser framework  represents parsers directly as EBNF grammars in inlined C++.
- Joel de Guzman and team.

[ boost.string_algo ]
String algorithms library
- Pavol Droba

[ boost.test ]
Support for simple program testing, full unit testing, and for program execution monitoring.
- Gennadiy Rozental.

[ boost.thread ]
Portable C++ multi-threading.
- William Kempf.

[ boost.timer ]
Event timer, progress timer, and progress display classes.
- Beman Dawes.

[ boost.tokenizer ]
Break of a string or other character sequence into a series of tokens.
- John Bandela.

[ boost.tribool ]
3-state boolean type library.
- Doug Gregor.

[ boost.tuple ]
Ease definition of functions returning multiple values, and more.
- Jaakko Järvi.

[ boost.type_traits ]
Templates for fundamental properties of types.
- John Maddock, Steve Cleary, et al.

[ boost.uBLAS ]
Basic linear algebra for dense, packed and sparse matrices.
- Joerg Walter, Mathias Koch.

[ boost.utility ]
Class noncopyable plus checked_delete(), checked_array_delete(), next(),  prior() function templates,
plus base-from-member idiom.
- Dave Abrahams and others.

[ boost.value_initialized ]
Wrapper for uniform-syntax value initialization.
- Fernando Cacciola, based on the original idea of David Abrahams.

[ boost.variant ]
Safe, generic, stack-based discriminated union container.
- Eric Friedman, Itay Maman.

[ boost.wave ]
Preprocessor functionality packed behind an easy to use iterator interface.
- Hartmut Kaiser


-->

