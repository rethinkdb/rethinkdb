{
  "name": "long",
  "version": "1.1.2",
  "author": {
    "name": "Daniel Wirtz",
    "email": "dcode@dcode.io"
  },
  "description": "A Long class for representing a 64-bit two's-complement integer value.",
  "main": "Long.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/dcodeIO/Long.js.git"
  },
  "keywords": [
    "math"
  ],
  "dependencies": {},
  "devDependencies": {
    "testjs": "latest",
    "closurecompiler": "latest"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.6"
  },
  "scripts": {
    "make": "npm run-script compile && npm test && npm run-script jsdoc",
    "compile": "ccjs Long.js --compilation_level=ADVANCED_OPTIMIZATIONS > Long.min.js",
    "test": "node node_modules/testjs/bin/testjs tests/suite.js",
    "jsdoc": "jsdoc -c jsdoc.json"
  },
  "readme": "![Long.js -A Long class for representing a 64-bit two's-complement integer ](https://raw.github.com/dcodeIO/Long.js/master/long.png)\n=======\nA Long class for representing a 64-bit two's-complement integer value derived from the [Closure Library](https://code.google.com/p/closure-library/)\nfor stand-alone use and extended with unsigned support.\n\nWhy?\n----\nAs of the [ECMAScript specification](http://ecma262-5.com/ELS5_HTML.htm#Section_8.5), number types have a maximum value\nof 2^53. Beyond that, behaviour might be unexpected. Furthermore, bitwise operations can only be performed on 32bit\nnumbers. However, in some use cases it is required to be able to perform reliable mathematical and/or bitwise operations\non the full 64bits. This is where Long.js comes into play.\n\nFeatures\n--------\n* [CommonJS](http://www.commonjs.org/) compatible\n* [RequireJS](http://requirejs.org/)/AMD compatible\n* Shim compatible (include the script, then use var Long = dcodeIO.Long;)\n* [node.js](http://nodejs.org) compatible, also available via [npm](https://npmjs.org/package/long)\n* Fully documented using [jsdoc3](https://github.com/jsdoc3/jsdoc)\n* API-compatible to the Closure Library implementation\n* Zero production dependencies\n* Small footprint\n\nUsage\n-----\n\n#### node.js / CommonJS ####\n\nInstall: `npm install long`\n\n```javascript\nvar Long = require(\"long\");\nvar longVal = new Long(0xFFFFFFFF, 0x7FFFFFFF);\nconsole.log(longVal.toString());\n...\n```\n\n#### RequireJS / AMD ####\n\n````javascript\nrequire.config({\n    \"paths\": {\n        \"Math/Long\": \"/path/to/Long.js\"\n    }\n});\nrequire([\"Math/Long\"], function(Long) {\n    var longVal = new Long(0xFFFFFFFF, 0x7FFFFFFF);\n    console.log(longVal.toString());\n});\n````\n\n### Browser / shim ####\n\n```html\n<script src=\"Long.min.js\"></script>\n```\n\n```javascript\nvar Long = dcodeIO.Long;\nvar longVal = new Long(0xFFFFFFFF, 0x7FFFFFFF);\nalert(longVal.toString());\n```\n\nDocumentation\n-------------\n* [View the API documentation](http://htmlpreview.github.com/?http://github.com/dcodeIO/Long.js/master/docs/Long.html)\n\nDownloads\n---------\n* [ZIP-Archive](https://github.com/dcodeIO/Long.js/archive/master.zip)\n* [Tarball](https://github.com/dcodeIO/Long.js/tarball/master)\n\nLicense\n-------\nApache License, Version 2.0 - http://www.apache.org/licenses/LICENSE-2.0.html\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dcodeIO/Long.js/issues"
  },
  "_id": "long@1.1.2",
  "dist": {
    "shasum": "642c46685724b1bfe83d6b889b2876b059226104"
  },
  "_from": "https://registry.npmjs.org/long/-/long-1.1.2.tgz",
  "_resolved": "https://registry.npmjs.org/long/-/long-1.1.2.tgz"
}
