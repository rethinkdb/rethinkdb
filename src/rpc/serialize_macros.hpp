// Copyright 2010-2014 RethinkDB, all rights reserved.
#ifndef RPC_SERIALIZE_MACROS_HPP_
#define RPC_SERIALIZE_MACROS_HPP_

/* This file is automatically generated by '../scripts/generate_serialize_macros.py'.
Please modify '../scripts/generate_serialize_macros.py' instead of modifying this file.*/

#include <type_traits>

#include "containers/archive/archive.hpp"
#include "containers/archive/versioned.hpp"
#include "errors.hpp"
#include "version.hpp"

/* The purpose of these macros is to make it easier to serialize and
unserialize data types that consist of a simple series of fields, each
of which is serializable. Suppose we have a type "struct point_t {
int32_t x, y; }" that we want to be able to serialize. To make it
serializable automatically, either write
RDB_MAKE_SERIALIZABLE_2(point_t, x, y) at the global scope, or write
RDB_MAKE_ME_SERIALIZABLE_2(point_t, x, y) within the body of the
point_t type.

The _FOR_CLUSTER variants of the macros exist to indicate that a type
can only be serialized for use within the cluster, thus should not be
serialized to disk.

The _SINCE_v1_13 variants of the macros exist to make the conversion to
versioned serialization easier. They must only be used for types which
serialization format has not changed since version 1.13.0.
Once the format changes, you can still use the macros without
the _SINCE_v1_13 suffix and instantiate the serialize() and deserialize()
functions explicitly for a certain version.

We use dummy "extern int" declarations to force a compile error in
macros that should not be used inside of class bodies. */
namespace helper {

/* When a `static_assert` is used within a templated class or function,
 * but does not depend on any template parameters the C++ compiler is free
 * to evaluate the assert even before instantiating that template. This
 * helper class allows a `static_assert(false, ...)` to depend on the
 * `cluster_version_t` template parameter.
 * Also see http://stackoverflow.com/a/14637534. */
template <cluster_version_t W>
struct always_false
    : std::false_type { };

} // namespace helper

#define RDB_DECLARE_SERIALIZABLE(type_t) \
    template <cluster_version_t W> \
    void serialize(write_message_t *, const type_t &); \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing); \
    extern int dont_use_RDB_DECLARE_SERIALIZABLE_within_a_class_body

#define RDB_DECLARE_SERIALIZABLE_FOR_CLUSTER(type_t) \
    template <cluster_version_t W> \
    void serialize(write_message_t *, const type_t &) { \
        static_assert(helper::always_false<W>::value, \
                      "This type is only serializable for cluster."); \
        unreachable(); \
    } \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *, const type_t &); \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *, type_t *) { \
        static_assert(helper::always_false<W>::value, \
                      "This type is only deserializable for cluster."); \
        unreachable(); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing)

#define RDB_DECLARE_ME_SERIALIZABLE(type_t) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *, const type_t &); \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing)
#define RDB_MAKE_SERIALIZABLE_0(type_t) \
    template <cluster_version_t W> \
    void serialize(UNUSED write_message_t *wm, UNUSED const type_t &thing) { \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(UNUSED read_stream_t *s, UNUSED type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_0_FOR_CLUSTER(type_t) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        UNUSED write_message_t *wm, UNUSED const type_t &thing) { \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        UNUSED read_stream_t *s, UNUSED type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_0(type_t) RDB_MAKE_SERIALIZABLE_0(type_t); \

#define RDB_IMPL_SERIALIZABLE_0_FOR_CLUSTER(type_t) \
    RDB_MAKE_SERIALIZABLE_0_FOR_CLUSTER(type_t); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_0_SINCE_v1_13(type_t) \
    RDB_IMPL_SERIALIZABLE_0(type_t); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_0_SINCE_v1_16(type_t) \
    RDB_IMPL_SERIALIZABLE_0(type_t); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_0_SINCE_v2_1(type_t) \
    RDB_IMPL_SERIALIZABLE_0(type_t); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_0_SINCE_v2_2(type_t) \
    RDB_IMPL_SERIALIZABLE_0(type_t); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_0(type_t) \
    template <cluster_version_t W> \
    friend void serialize(UNUSED write_message_t *wm, UNUSED const type_t &thing) { \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(UNUSED read_stream_t *s, UNUSED type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_1(type_t, field1) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_1_FOR_CLUSTER(type_t, field1) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_1(type_t, field1) RDB_MAKE_SERIALIZABLE_1(type_t, field1); \

#define RDB_IMPL_SERIALIZABLE_1_FOR_CLUSTER(type_t, field1) \
    RDB_MAKE_SERIALIZABLE_1_FOR_CLUSTER(type_t, field1); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_1_SINCE_v1_13(type_t, field1) \
    RDB_IMPL_SERIALIZABLE_1(type_t, field1); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_1_SINCE_v1_16(type_t, field1) \
    RDB_IMPL_SERIALIZABLE_1(type_t, field1); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_1_SINCE_v2_1(type_t, field1) \
    RDB_IMPL_SERIALIZABLE_1(type_t, field1); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_1_SINCE_v2_2(type_t, field1) \
    RDB_IMPL_SERIALIZABLE_1(type_t, field1); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_1(type_t, field1) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_2(type_t, field1, field2) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_2_FOR_CLUSTER(type_t, field1, field2) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_2(type_t, field1, field2) RDB_MAKE_SERIALIZABLE_2(type_t, field1, field2); \

#define RDB_IMPL_SERIALIZABLE_2_FOR_CLUSTER(type_t, field1, field2) \
    RDB_MAKE_SERIALIZABLE_2_FOR_CLUSTER(type_t, field1, field2); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_2_SINCE_v1_13(type_t, field1, field2) \
    RDB_IMPL_SERIALIZABLE_2(type_t, field1, field2); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_2_SINCE_v1_16(type_t, field1, field2) \
    RDB_IMPL_SERIALIZABLE_2(type_t, field1, field2); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_2_SINCE_v2_1(type_t, field1, field2) \
    RDB_IMPL_SERIALIZABLE_2(type_t, field1, field2); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_2_SINCE_v2_2(type_t, field1, field2) \
    RDB_IMPL_SERIALIZABLE_2(type_t, field1, field2); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_2(type_t, field1, field2) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_3(type_t, field1, field2, field3) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_3_FOR_CLUSTER(type_t, field1, field2, field3) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_3(type_t, field1, field2, field3) RDB_MAKE_SERIALIZABLE_3(type_t, field1, field2, field3); \

#define RDB_IMPL_SERIALIZABLE_3_FOR_CLUSTER(type_t, field1, field2, field3) \
    RDB_MAKE_SERIALIZABLE_3_FOR_CLUSTER(type_t, field1, field2, field3); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_3_SINCE_v1_13(type_t, field1, field2, field3) \
    RDB_IMPL_SERIALIZABLE_3(type_t, field1, field2, field3); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_3_SINCE_v1_16(type_t, field1, field2, field3) \
    RDB_IMPL_SERIALIZABLE_3(type_t, field1, field2, field3); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_3_SINCE_v2_1(type_t, field1, field2, field3) \
    RDB_IMPL_SERIALIZABLE_3(type_t, field1, field2, field3); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_3_SINCE_v2_2(type_t, field1, field2, field3) \
    RDB_IMPL_SERIALIZABLE_3(type_t, field1, field2, field3); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_3(type_t, field1, field2, field3) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_4(type_t, field1, field2, field3, field4) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_4_FOR_CLUSTER(type_t, field1, field2, field3, field4) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_4(type_t, field1, field2, field3, field4) RDB_MAKE_SERIALIZABLE_4(type_t, field1, field2, field3, field4); \

#define RDB_IMPL_SERIALIZABLE_4_FOR_CLUSTER(type_t, field1, field2, field3, field4) \
    RDB_MAKE_SERIALIZABLE_4_FOR_CLUSTER(type_t, field1, field2, field3, field4); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_4_SINCE_v1_13(type_t, field1, field2, field3, field4) \
    RDB_IMPL_SERIALIZABLE_4(type_t, field1, field2, field3, field4); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_4_SINCE_v1_16(type_t, field1, field2, field3, field4) \
    RDB_IMPL_SERIALIZABLE_4(type_t, field1, field2, field3, field4); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_4_SINCE_v2_1(type_t, field1, field2, field3, field4) \
    RDB_IMPL_SERIALIZABLE_4(type_t, field1, field2, field3, field4); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_4_SINCE_v2_2(type_t, field1, field2, field3, field4) \
    RDB_IMPL_SERIALIZABLE_4(type_t, field1, field2, field3, field4); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_4(type_t, field1, field2, field3, field4) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_5(type_t, field1, field2, field3, field4, field5) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_5_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_5(type_t, field1, field2, field3, field4, field5) RDB_MAKE_SERIALIZABLE_5(type_t, field1, field2, field3, field4, field5); \

#define RDB_IMPL_SERIALIZABLE_5_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5) \
    RDB_MAKE_SERIALIZABLE_5_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_5_SINCE_v1_13(type_t, field1, field2, field3, field4, field5) \
    RDB_IMPL_SERIALIZABLE_5(type_t, field1, field2, field3, field4, field5); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_5_SINCE_v1_16(type_t, field1, field2, field3, field4, field5) \
    RDB_IMPL_SERIALIZABLE_5(type_t, field1, field2, field3, field4, field5); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_5_SINCE_v2_1(type_t, field1, field2, field3, field4, field5) \
    RDB_IMPL_SERIALIZABLE_5(type_t, field1, field2, field3, field4, field5); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_5_SINCE_v2_2(type_t, field1, field2, field3, field4, field5) \
    RDB_IMPL_SERIALIZABLE_5(type_t, field1, field2, field3, field4, field5); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_5(type_t, field1, field2, field3, field4, field5) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_6(type_t, field1, field2, field3, field4, field5, field6) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_6_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_6(type_t, field1, field2, field3, field4, field5, field6) RDB_MAKE_SERIALIZABLE_6(type_t, field1, field2, field3, field4, field5, field6); \

#define RDB_IMPL_SERIALIZABLE_6_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6) \
    RDB_MAKE_SERIALIZABLE_6_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_6_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6) \
    RDB_IMPL_SERIALIZABLE_6(type_t, field1, field2, field3, field4, field5, field6); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_6_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6) \
    RDB_IMPL_SERIALIZABLE_6(type_t, field1, field2, field3, field4, field5, field6); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_6_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6) \
    RDB_IMPL_SERIALIZABLE_6(type_t, field1, field2, field3, field4, field5, field6); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_6_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6) \
    RDB_IMPL_SERIALIZABLE_6(type_t, field1, field2, field3, field4, field5, field6); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_6(type_t, field1, field2, field3, field4, field5, field6) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_7_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field7); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7) RDB_MAKE_SERIALIZABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7); \

#define RDB_IMPL_SERIALIZABLE_7_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7) \
    RDB_MAKE_SERIALIZABLE_7_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_7_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6, field7) \
    RDB_IMPL_SERIALIZABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_7_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6, field7) \
    RDB_IMPL_SERIALIZABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_7_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6, field7) \
    RDB_IMPL_SERIALIZABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_7_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6, field7) \
    RDB_IMPL_SERIALIZABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_8_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field7); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field8); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8) RDB_MAKE_SERIALIZABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8); \

#define RDB_IMPL_SERIALIZABLE_8_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    RDB_MAKE_SERIALIZABLE_8_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_8_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    RDB_IMPL_SERIALIZABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_8_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    RDB_IMPL_SERIALIZABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_8_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    RDB_IMPL_SERIALIZABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_8_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    RDB_IMPL_SERIALIZABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_9_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field7); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field8); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field9); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) RDB_MAKE_SERIALIZABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9); \

#define RDB_IMPL_SERIALIZABLE_9_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    RDB_MAKE_SERIALIZABLE_9_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_9_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    RDB_IMPL_SERIALIZABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_9_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    RDB_IMPL_SERIALIZABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_9_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    RDB_IMPL_SERIALIZABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_9_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    RDB_IMPL_SERIALIZABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_10_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field7); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field8); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field9); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field10); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) RDB_MAKE_SERIALIZABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10); \

#define RDB_IMPL_SERIALIZABLE_10_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    RDB_MAKE_SERIALIZABLE_10_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_10_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    RDB_IMPL_SERIALIZABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_10_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    RDB_IMPL_SERIALIZABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_10_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    RDB_IMPL_SERIALIZABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_10_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    RDB_IMPL_SERIALIZABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_11_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field7); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field8); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field9); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field10); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field11); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) RDB_MAKE_SERIALIZABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11); \

#define RDB_IMPL_SERIALIZABLE_11_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    RDB_MAKE_SERIALIZABLE_11_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_11_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    RDB_IMPL_SERIALIZABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_11_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    RDB_IMPL_SERIALIZABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_11_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    RDB_IMPL_SERIALIZABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_11_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    RDB_IMPL_SERIALIZABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_12_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field7); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field8); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field9); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field10); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field11); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field12); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) RDB_MAKE_SERIALIZABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12); \

#define RDB_IMPL_SERIALIZABLE_12_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    RDB_MAKE_SERIALIZABLE_12_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_12_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    RDB_IMPL_SERIALIZABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_12_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    RDB_IMPL_SERIALIZABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_12_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    RDB_IMPL_SERIALIZABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_12_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    RDB_IMPL_SERIALIZABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_13_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field7); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field8); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field9); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field10); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field11); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field12); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field13); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) RDB_MAKE_SERIALIZABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13); \

#define RDB_IMPL_SERIALIZABLE_13_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    RDB_MAKE_SERIALIZABLE_13_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_13_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    RDB_IMPL_SERIALIZABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_13_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    RDB_IMPL_SERIALIZABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_13_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    RDB_IMPL_SERIALIZABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_13_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    RDB_IMPL_SERIALIZABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_14_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field7); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field8); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field9); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field10); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field11); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field12); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field13); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field14); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) RDB_MAKE_SERIALIZABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14); \

#define RDB_IMPL_SERIALIZABLE_14_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    RDB_MAKE_SERIALIZABLE_14_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_14_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    RDB_IMPL_SERIALIZABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_14_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    RDB_IMPL_SERIALIZABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_14_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    RDB_IMPL_SERIALIZABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_14_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    RDB_IMPL_SERIALIZABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_15_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field7); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field8); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field9); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field10); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field11); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field12); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field13); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field14); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field15); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) RDB_MAKE_SERIALIZABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15); \

#define RDB_IMPL_SERIALIZABLE_15_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    RDB_MAKE_SERIALIZABLE_15_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_15_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    RDB_IMPL_SERIALIZABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_15_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    RDB_IMPL_SERIALIZABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_15_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    RDB_IMPL_SERIALIZABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_15_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    RDB_IMPL_SERIALIZABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
        serialize<W>(wm, thing.field16); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_16_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field7); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field8); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field9); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field10); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field11); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field12); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field13); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field14); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field15); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field16); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) RDB_MAKE_SERIALIZABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16); \

#define RDB_IMPL_SERIALIZABLE_16_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    RDB_MAKE_SERIALIZABLE_16_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_16_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    RDB_IMPL_SERIALIZABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_16_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    RDB_IMPL_SERIALIZABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_16_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    RDB_IMPL_SERIALIZABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_16_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    RDB_IMPL_SERIALIZABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
        serialize<W>(wm, thing.field16); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
        serialize<W>(wm, thing.field16); \
        serialize<W>(wm, thing.field17); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field17)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_17_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field7); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field8); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field9); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field10); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field11); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field12); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field13); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field14); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field15); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field16); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field17); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field17)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) RDB_MAKE_SERIALIZABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17); \

#define RDB_IMPL_SERIALIZABLE_17_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    RDB_MAKE_SERIALIZABLE_17_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_17_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    RDB_IMPL_SERIALIZABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_17_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    RDB_IMPL_SERIALIZABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_17_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    RDB_IMPL_SERIALIZABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_17_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    RDB_IMPL_SERIALIZABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
        serialize<W>(wm, thing.field16); \
        serialize<W>(wm, thing.field17); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field17)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
        serialize<W>(wm, thing.field16); \
        serialize<W>(wm, thing.field17); \
        serialize<W>(wm, thing.field18); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field17)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field18)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_18_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field7); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field8); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field9); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field10); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field11); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field12); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field13); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field14); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field15); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field16); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field17); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field18); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field17)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field18)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) RDB_MAKE_SERIALIZABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18); \

#define RDB_IMPL_SERIALIZABLE_18_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    RDB_MAKE_SERIALIZABLE_18_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_18_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    RDB_IMPL_SERIALIZABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_18_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    RDB_IMPL_SERIALIZABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_18_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    RDB_IMPL_SERIALIZABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_18_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    RDB_IMPL_SERIALIZABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
        serialize<W>(wm, thing.field16); \
        serialize<W>(wm, thing.field17); \
        serialize<W>(wm, thing.field18); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field17)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field18)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#define RDB_MAKE_SERIALIZABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
        serialize<W>(wm, thing.field16); \
        serialize<W>(wm, thing.field17); \
        serialize<W>(wm, thing.field18); \
        serialize<W>(wm, thing.field19); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field17)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field18)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field19)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_19_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    template <> \
    void serialize<cluster_version_t::CLUSTER>( \
        write_message_t *wm, const type_t &thing) { \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field1); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field2); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field3); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field4); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field5); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field6); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field7); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field8); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field9); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field10); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field11); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field12); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field13); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field14); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field15); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field16); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field17); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field18); \
        serialize<cluster_version_t::CLUSTER>(wm, thing.field19); \
    } \
    template <> \
    archive_result_t deserialize<cluster_version_t::CLUSTER>( \
        read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field17)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field18)); \
        if (bad(res)) { return res; } \
        res = deserialize<cluster_version_t::CLUSTER>( \
            s, deserialize_deref(thing->field19)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_FOR_CLUSTER_within_a_class_body

#define RDB_IMPL_SERIALIZABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) RDB_MAKE_SERIALIZABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19); \

#define RDB_IMPL_SERIALIZABLE_19_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    RDB_MAKE_SERIALIZABLE_19_FOR_CLUSTER(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19); \
    INSTANTIATE_SERIALIZABLE_FOR_CLUSTER(type_t);

#define RDB_IMPL_SERIALIZABLE_19_SINCE_v1_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    RDB_IMPL_SERIALIZABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_13(type_t)

#define RDB_IMPL_SERIALIZABLE_19_SINCE_v1_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    RDB_IMPL_SERIALIZABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19); \
    INSTANTIATE_SERIALIZABLE_SINCE_v1_16(type_t)

#define RDB_IMPL_SERIALIZABLE_19_SINCE_v2_1(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    RDB_IMPL_SERIALIZABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_1(type_t)

#define RDB_IMPL_SERIALIZABLE_19_SINCE_v2_2(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    RDB_IMPL_SERIALIZABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19); \
    INSTANTIATE_SERIALIZABLE_SINCE_v2_2(type_t)
#define RDB_MAKE_ME_SERIALIZABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    template <cluster_version_t W> \
    friend void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
        serialize<W>(wm, thing.field16); \
        serialize<W>(wm, thing.field17); \
        serialize<W>(wm, thing.field18); \
        serialize<W>(wm, thing.field19); \
    } \
    template <cluster_version_t W> \
    friend archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field17)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field18)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field19)); \
        if (bad(res)) { return res; } \
        return res; \
    }

#endif // RPC_SERIALIZE_MACROS_HPP_
